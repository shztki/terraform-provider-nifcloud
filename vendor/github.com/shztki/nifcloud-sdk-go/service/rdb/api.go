// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package rdb

import (
	"time"

	"github.com/shztki/nifcloud-sdk-go/nifcloud"
	"github.com/shztki/nifcloud-sdk-go/nifcloud/awsutil"
	"github.com/shztki/nifcloud-sdk-go/nifcloud/request"
	"github.com/shztki/nifcloud-sdk-go/private/protocol"
	"github.com/shztki/nifcloud-sdk-go/private/protocol/query"
)

const opAddSourceIdentifierToSubscription = "AddSourceIdentifierToSubscription"

// AddSourceIdentifierToSubscriptionRequest generates a "nifcloud/request.Request" representing the
// client's request for the AddSourceIdentifierToSubscription operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See AddSourceIdentifierToSubscription for more information on using the AddSourceIdentifierToSubscription
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the AddSourceIdentifierToSubscriptionRequest method.
//    req, resp := client.AddSourceIdentifierToSubscriptionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/AddSourceIdentifierToSubscription
func (c *Rdb) AddSourceIdentifierToSubscriptionRequest(input *AddSourceIdentifierToSubscriptionInput) (req *request.Request, output *AddSourceIdentifierToSubscriptionOutput) {
	op := &request.Operation{
		Name:       opAddSourceIdentifierToSubscription,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AddSourceIdentifierToSubscriptionInput{}
	}

	output = &AddSourceIdentifierToSubscriptionOutput{}
	req = c.newRequest(op, input, output)
	return
}

// AddSourceIdentifierToSubscription API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation AddSourceIdentifierToSubscription for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/AddSourceIdentifierToSubscription
func (c *Rdb) AddSourceIdentifierToSubscription(input *AddSourceIdentifierToSubscriptionInput) (*AddSourceIdentifierToSubscriptionOutput, error) {
	req, out := c.AddSourceIdentifierToSubscriptionRequest(input)
	return out, req.Send()
}

// AddSourceIdentifierToSubscriptionWithContext is the same as AddSourceIdentifierToSubscription with the addition of
// the ability to pass a context and additional request options.
//
// See AddSourceIdentifierToSubscription for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) AddSourceIdentifierToSubscriptionWithContext(ctx nifcloud.Context, input *AddSourceIdentifierToSubscriptionInput, opts ...request.Option) (*AddSourceIdentifierToSubscriptionOutput, error) {
	req, out := c.AddSourceIdentifierToSubscriptionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opAuthorizeDBSecurityGroupIngress = "AuthorizeDBSecurityGroupIngress"

// AuthorizeDBSecurityGroupIngressRequest generates a "nifcloud/request.Request" representing the
// client's request for the AuthorizeDBSecurityGroupIngress operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See AuthorizeDBSecurityGroupIngress for more information on using the AuthorizeDBSecurityGroupIngress
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the AuthorizeDBSecurityGroupIngressRequest method.
//    req, resp := client.AuthorizeDBSecurityGroupIngressRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/AuthorizeDBSecurityGroupIngress
func (c *Rdb) AuthorizeDBSecurityGroupIngressRequest(input *AuthorizeDBSecurityGroupIngressInput) (req *request.Request, output *AuthorizeDBSecurityGroupIngressOutput) {
	op := &request.Operation{
		Name:       opAuthorizeDBSecurityGroupIngress,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AuthorizeDBSecurityGroupIngressInput{}
	}

	output = &AuthorizeDBSecurityGroupIngressOutput{}
	req = c.newRequest(op, input, output)
	return
}

// AuthorizeDBSecurityGroupIngress API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation AuthorizeDBSecurityGroupIngress for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/AuthorizeDBSecurityGroupIngress
func (c *Rdb) AuthorizeDBSecurityGroupIngress(input *AuthorizeDBSecurityGroupIngressInput) (*AuthorizeDBSecurityGroupIngressOutput, error) {
	req, out := c.AuthorizeDBSecurityGroupIngressRequest(input)
	return out, req.Send()
}

// AuthorizeDBSecurityGroupIngressWithContext is the same as AuthorizeDBSecurityGroupIngress with the addition of
// the ability to pass a context and additional request options.
//
// See AuthorizeDBSecurityGroupIngress for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) AuthorizeDBSecurityGroupIngressWithContext(ctx nifcloud.Context, input *AuthorizeDBSecurityGroupIngressInput, opts ...request.Option) (*AuthorizeDBSecurityGroupIngressOutput, error) {
	req, out := c.AuthorizeDBSecurityGroupIngressRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCopyDBSnapshot = "CopyDBSnapshot"

// CopyDBSnapshotRequest generates a "nifcloud/request.Request" representing the
// client's request for the CopyDBSnapshot operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CopyDBSnapshot for more information on using the CopyDBSnapshot
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CopyDBSnapshotRequest method.
//    req, resp := client.CopyDBSnapshotRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CopyDBSnapshot
func (c *Rdb) CopyDBSnapshotRequest(input *CopyDBSnapshotInput) (req *request.Request, output *CopyDBSnapshotOutput) {
	op := &request.Operation{
		Name:       opCopyDBSnapshot,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CopyDBSnapshotInput{}
	}

	output = &CopyDBSnapshotOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CopyDBSnapshot API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation CopyDBSnapshot for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CopyDBSnapshot
func (c *Rdb) CopyDBSnapshot(input *CopyDBSnapshotInput) (*CopyDBSnapshotOutput, error) {
	req, out := c.CopyDBSnapshotRequest(input)
	return out, req.Send()
}

// CopyDBSnapshotWithContext is the same as CopyDBSnapshot with the addition of
// the ability to pass a context and additional request options.
//
// See CopyDBSnapshot for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) CopyDBSnapshotWithContext(ctx nifcloud.Context, input *CopyDBSnapshotInput, opts ...request.Option) (*CopyDBSnapshotOutput, error) {
	req, out := c.CopyDBSnapshotRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBInstance = "CreateDBInstance"

// CreateDBInstanceRequest generates a "nifcloud/request.Request" representing the
// client's request for the CreateDBInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateDBInstance for more information on using the CreateDBInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateDBInstanceRequest method.
//    req, resp := client.CreateDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CreateDBInstance
func (c *Rdb) CreateDBInstanceRequest(input *CreateDBInstanceInput) (req *request.Request, output *CreateDBInstanceOutput) {
	op := &request.Operation{
		Name:       opCreateDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBInstanceInput{}
	}

	output = &CreateDBInstanceOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateDBInstance API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation CreateDBInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CreateDBInstance
func (c *Rdb) CreateDBInstance(input *CreateDBInstanceInput) (*CreateDBInstanceOutput, error) {
	req, out := c.CreateDBInstanceRequest(input)
	return out, req.Send()
}

// CreateDBInstanceWithContext is the same as CreateDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) CreateDBInstanceWithContext(ctx nifcloud.Context, input *CreateDBInstanceInput, opts ...request.Option) (*CreateDBInstanceOutput, error) {
	req, out := c.CreateDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBInstanceReadReplica = "CreateDBInstanceReadReplica"

// CreateDBInstanceReadReplicaRequest generates a "nifcloud/request.Request" representing the
// client's request for the CreateDBInstanceReadReplica operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateDBInstanceReadReplica for more information on using the CreateDBInstanceReadReplica
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateDBInstanceReadReplicaRequest method.
//    req, resp := client.CreateDBInstanceReadReplicaRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CreateDBInstanceReadReplica
func (c *Rdb) CreateDBInstanceReadReplicaRequest(input *CreateDBInstanceReadReplicaInput) (req *request.Request, output *CreateDBInstanceReadReplicaOutput) {
	op := &request.Operation{
		Name:       opCreateDBInstanceReadReplica,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBInstanceReadReplicaInput{}
	}

	output = &CreateDBInstanceReadReplicaOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateDBInstanceReadReplica API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation CreateDBInstanceReadReplica for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CreateDBInstanceReadReplica
func (c *Rdb) CreateDBInstanceReadReplica(input *CreateDBInstanceReadReplicaInput) (*CreateDBInstanceReadReplicaOutput, error) {
	req, out := c.CreateDBInstanceReadReplicaRequest(input)
	return out, req.Send()
}

// CreateDBInstanceReadReplicaWithContext is the same as CreateDBInstanceReadReplica with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBInstanceReadReplica for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) CreateDBInstanceReadReplicaWithContext(ctx nifcloud.Context, input *CreateDBInstanceReadReplicaInput, opts ...request.Option) (*CreateDBInstanceReadReplicaOutput, error) {
	req, out := c.CreateDBInstanceReadReplicaRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBParameterGroup = "CreateDBParameterGroup"

// CreateDBParameterGroupRequest generates a "nifcloud/request.Request" representing the
// client's request for the CreateDBParameterGroup operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateDBParameterGroup for more information on using the CreateDBParameterGroup
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateDBParameterGroupRequest method.
//    req, resp := client.CreateDBParameterGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CreateDBParameterGroup
func (c *Rdb) CreateDBParameterGroupRequest(input *CreateDBParameterGroupInput) (req *request.Request, output *CreateDBParameterGroupOutput) {
	op := &request.Operation{
		Name:       opCreateDBParameterGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBParameterGroupInput{}
	}

	output = &CreateDBParameterGroupOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateDBParameterGroup API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation CreateDBParameterGroup for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CreateDBParameterGroup
func (c *Rdb) CreateDBParameterGroup(input *CreateDBParameterGroupInput) (*CreateDBParameterGroupOutput, error) {
	req, out := c.CreateDBParameterGroupRequest(input)
	return out, req.Send()
}

// CreateDBParameterGroupWithContext is the same as CreateDBParameterGroup with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBParameterGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) CreateDBParameterGroupWithContext(ctx nifcloud.Context, input *CreateDBParameterGroupInput, opts ...request.Option) (*CreateDBParameterGroupOutput, error) {
	req, out := c.CreateDBParameterGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBSecurityGroup = "CreateDBSecurityGroup"

// CreateDBSecurityGroupRequest generates a "nifcloud/request.Request" representing the
// client's request for the CreateDBSecurityGroup operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateDBSecurityGroup for more information on using the CreateDBSecurityGroup
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateDBSecurityGroupRequest method.
//    req, resp := client.CreateDBSecurityGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CreateDBSecurityGroup
func (c *Rdb) CreateDBSecurityGroupRequest(input *CreateDBSecurityGroupInput) (req *request.Request, output *CreateDBSecurityGroupOutput) {
	op := &request.Operation{
		Name:       opCreateDBSecurityGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBSecurityGroupInput{}
	}

	output = &CreateDBSecurityGroupOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateDBSecurityGroup API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation CreateDBSecurityGroup for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CreateDBSecurityGroup
func (c *Rdb) CreateDBSecurityGroup(input *CreateDBSecurityGroupInput) (*CreateDBSecurityGroupOutput, error) {
	req, out := c.CreateDBSecurityGroupRequest(input)
	return out, req.Send()
}

// CreateDBSecurityGroupWithContext is the same as CreateDBSecurityGroup with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBSecurityGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) CreateDBSecurityGroupWithContext(ctx nifcloud.Context, input *CreateDBSecurityGroupInput, opts ...request.Option) (*CreateDBSecurityGroupOutput, error) {
	req, out := c.CreateDBSecurityGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateDBSnapshot = "CreateDBSnapshot"

// CreateDBSnapshotRequest generates a "nifcloud/request.Request" representing the
// client's request for the CreateDBSnapshot operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateDBSnapshot for more information on using the CreateDBSnapshot
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateDBSnapshotRequest method.
//    req, resp := client.CreateDBSnapshotRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CreateDBSnapshot
func (c *Rdb) CreateDBSnapshotRequest(input *CreateDBSnapshotInput) (req *request.Request, output *CreateDBSnapshotOutput) {
	op := &request.Operation{
		Name:       opCreateDBSnapshot,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateDBSnapshotInput{}
	}

	output = &CreateDBSnapshotOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateDBSnapshot API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation CreateDBSnapshot for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CreateDBSnapshot
func (c *Rdb) CreateDBSnapshot(input *CreateDBSnapshotInput) (*CreateDBSnapshotOutput, error) {
	req, out := c.CreateDBSnapshotRequest(input)
	return out, req.Send()
}

// CreateDBSnapshotWithContext is the same as CreateDBSnapshot with the addition of
// the ability to pass a context and additional request options.
//
// See CreateDBSnapshot for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) CreateDBSnapshotWithContext(ctx nifcloud.Context, input *CreateDBSnapshotInput, opts ...request.Option) (*CreateDBSnapshotOutput, error) {
	req, out := c.CreateDBSnapshotRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateEventSubscription = "CreateEventSubscription"

// CreateEventSubscriptionRequest generates a "nifcloud/request.Request" representing the
// client's request for the CreateEventSubscription operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateEventSubscription for more information on using the CreateEventSubscription
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateEventSubscriptionRequest method.
//    req, resp := client.CreateEventSubscriptionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CreateEventSubscription
func (c *Rdb) CreateEventSubscriptionRequest(input *CreateEventSubscriptionInput) (req *request.Request, output *CreateEventSubscriptionOutput) {
	op := &request.Operation{
		Name:       opCreateEventSubscription,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateEventSubscriptionInput{}
	}

	output = &CreateEventSubscriptionOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateEventSubscription API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation CreateEventSubscription for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/CreateEventSubscription
func (c *Rdb) CreateEventSubscription(input *CreateEventSubscriptionInput) (*CreateEventSubscriptionOutput, error) {
	req, out := c.CreateEventSubscriptionRequest(input)
	return out, req.Send()
}

// CreateEventSubscriptionWithContext is the same as CreateEventSubscription with the addition of
// the ability to pass a context and additional request options.
//
// See CreateEventSubscription for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) CreateEventSubscriptionWithContext(ctx nifcloud.Context, input *CreateEventSubscriptionInput, opts ...request.Option) (*CreateEventSubscriptionOutput, error) {
	req, out := c.CreateEventSubscriptionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDBInstance = "DeleteDBInstance"

// DeleteDBInstanceRequest generates a "nifcloud/request.Request" representing the
// client's request for the DeleteDBInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteDBInstance for more information on using the DeleteDBInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteDBInstanceRequest method.
//    req, resp := client.DeleteDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DeleteDBInstance
func (c *Rdb) DeleteDBInstanceRequest(input *DeleteDBInstanceInput) (req *request.Request, output *DeleteDBInstanceOutput) {
	op := &request.Operation{
		Name:       opDeleteDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDBInstanceInput{}
	}

	output = &DeleteDBInstanceOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DeleteDBInstance API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DeleteDBInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DeleteDBInstance
func (c *Rdb) DeleteDBInstance(input *DeleteDBInstanceInput) (*DeleteDBInstanceOutput, error) {
	req, out := c.DeleteDBInstanceRequest(input)
	return out, req.Send()
}

// DeleteDBInstanceWithContext is the same as DeleteDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DeleteDBInstanceWithContext(ctx nifcloud.Context, input *DeleteDBInstanceInput, opts ...request.Option) (*DeleteDBInstanceOutput, error) {
	req, out := c.DeleteDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDBParameterGroup = "DeleteDBParameterGroup"

// DeleteDBParameterGroupRequest generates a "nifcloud/request.Request" representing the
// client's request for the DeleteDBParameterGroup operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteDBParameterGroup for more information on using the DeleteDBParameterGroup
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteDBParameterGroupRequest method.
//    req, resp := client.DeleteDBParameterGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DeleteDBParameterGroup
func (c *Rdb) DeleteDBParameterGroupRequest(input *DeleteDBParameterGroupInput) (req *request.Request, output *DeleteDBParameterGroupOutput) {
	op := &request.Operation{
		Name:       opDeleteDBParameterGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDBParameterGroupInput{}
	}

	output = &DeleteDBParameterGroupOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteDBParameterGroup API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DeleteDBParameterGroup for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DeleteDBParameterGroup
func (c *Rdb) DeleteDBParameterGroup(input *DeleteDBParameterGroupInput) (*DeleteDBParameterGroupOutput, error) {
	req, out := c.DeleteDBParameterGroupRequest(input)
	return out, req.Send()
}

// DeleteDBParameterGroupWithContext is the same as DeleteDBParameterGroup with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDBParameterGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DeleteDBParameterGroupWithContext(ctx nifcloud.Context, input *DeleteDBParameterGroupInput, opts ...request.Option) (*DeleteDBParameterGroupOutput, error) {
	req, out := c.DeleteDBParameterGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDBSecurityGroup = "DeleteDBSecurityGroup"

// DeleteDBSecurityGroupRequest generates a "nifcloud/request.Request" representing the
// client's request for the DeleteDBSecurityGroup operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteDBSecurityGroup for more information on using the DeleteDBSecurityGroup
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteDBSecurityGroupRequest method.
//    req, resp := client.DeleteDBSecurityGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DeleteDBSecurityGroup
func (c *Rdb) DeleteDBSecurityGroupRequest(input *DeleteDBSecurityGroupInput) (req *request.Request, output *DeleteDBSecurityGroupOutput) {
	op := &request.Operation{
		Name:       opDeleteDBSecurityGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDBSecurityGroupInput{}
	}

	output = &DeleteDBSecurityGroupOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteDBSecurityGroup API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DeleteDBSecurityGroup for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DeleteDBSecurityGroup
func (c *Rdb) DeleteDBSecurityGroup(input *DeleteDBSecurityGroupInput) (*DeleteDBSecurityGroupOutput, error) {
	req, out := c.DeleteDBSecurityGroupRequest(input)
	return out, req.Send()
}

// DeleteDBSecurityGroupWithContext is the same as DeleteDBSecurityGroup with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDBSecurityGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DeleteDBSecurityGroupWithContext(ctx nifcloud.Context, input *DeleteDBSecurityGroupInput, opts ...request.Option) (*DeleteDBSecurityGroupOutput, error) {
	req, out := c.DeleteDBSecurityGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteDBSnapshot = "DeleteDBSnapshot"

// DeleteDBSnapshotRequest generates a "nifcloud/request.Request" representing the
// client's request for the DeleteDBSnapshot operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteDBSnapshot for more information on using the DeleteDBSnapshot
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteDBSnapshotRequest method.
//    req, resp := client.DeleteDBSnapshotRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DeleteDBSnapshot
func (c *Rdb) DeleteDBSnapshotRequest(input *DeleteDBSnapshotInput) (req *request.Request, output *DeleteDBSnapshotOutput) {
	op := &request.Operation{
		Name:       opDeleteDBSnapshot,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteDBSnapshotInput{}
	}

	output = &DeleteDBSnapshotOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DeleteDBSnapshot API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DeleteDBSnapshot for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DeleteDBSnapshot
func (c *Rdb) DeleteDBSnapshot(input *DeleteDBSnapshotInput) (*DeleteDBSnapshotOutput, error) {
	req, out := c.DeleteDBSnapshotRequest(input)
	return out, req.Send()
}

// DeleteDBSnapshotWithContext is the same as DeleteDBSnapshot with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteDBSnapshot for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DeleteDBSnapshotWithContext(ctx nifcloud.Context, input *DeleteDBSnapshotInput, opts ...request.Option) (*DeleteDBSnapshotOutput, error) {
	req, out := c.DeleteDBSnapshotRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteEventSubscription = "DeleteEventSubscription"

// DeleteEventSubscriptionRequest generates a "nifcloud/request.Request" representing the
// client's request for the DeleteEventSubscription operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteEventSubscription for more information on using the DeleteEventSubscription
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteEventSubscriptionRequest method.
//    req, resp := client.DeleteEventSubscriptionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DeleteEventSubscription
func (c *Rdb) DeleteEventSubscriptionRequest(input *DeleteEventSubscriptionInput) (req *request.Request, output *DeleteEventSubscriptionOutput) {
	op := &request.Operation{
		Name:       opDeleteEventSubscription,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteEventSubscriptionInput{}
	}

	output = &DeleteEventSubscriptionOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DeleteEventSubscription API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DeleteEventSubscription for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DeleteEventSubscription
func (c *Rdb) DeleteEventSubscription(input *DeleteEventSubscriptionInput) (*DeleteEventSubscriptionOutput, error) {
	req, out := c.DeleteEventSubscriptionRequest(input)
	return out, req.Send()
}

// DeleteEventSubscriptionWithContext is the same as DeleteEventSubscription with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteEventSubscription for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DeleteEventSubscriptionWithContext(ctx nifcloud.Context, input *DeleteEventSubscriptionInput, opts ...request.Option) (*DeleteEventSubscriptionOutput, error) {
	req, out := c.DeleteEventSubscriptionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBEngineVersions = "DescribeDBEngineVersions"

// DescribeDBEngineVersionsRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeDBEngineVersions operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeDBEngineVersions for more information on using the DescribeDBEngineVersions
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeDBEngineVersionsRequest method.
//    req, resp := client.DescribeDBEngineVersionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBEngineVersions
func (c *Rdb) DescribeDBEngineVersionsRequest(input *DescribeDBEngineVersionsInput) (req *request.Request, output *DescribeDBEngineVersionsOutput) {
	op := &request.Operation{
		Name:       opDescribeDBEngineVersions,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBEngineVersionsInput{}
	}

	output = &DescribeDBEngineVersionsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeDBEngineVersions API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DescribeDBEngineVersions for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBEngineVersions
func (c *Rdb) DescribeDBEngineVersions(input *DescribeDBEngineVersionsInput) (*DescribeDBEngineVersionsOutput, error) {
	req, out := c.DescribeDBEngineVersionsRequest(input)
	return out, req.Send()
}

// DescribeDBEngineVersionsWithContext is the same as DescribeDBEngineVersions with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBEngineVersions for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DescribeDBEngineVersionsWithContext(ctx nifcloud.Context, input *DescribeDBEngineVersionsInput, opts ...request.Option) (*DescribeDBEngineVersionsOutput, error) {
	req, out := c.DescribeDBEngineVersionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBInstances = "DescribeDBInstances"

// DescribeDBInstancesRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeDBInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeDBInstances for more information on using the DescribeDBInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeDBInstancesRequest method.
//    req, resp := client.DescribeDBInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBInstances
func (c *Rdb) DescribeDBInstancesRequest(input *DescribeDBInstancesInput) (req *request.Request, output *DescribeDBInstancesOutput) {
	op := &request.Operation{
		Name:       opDescribeDBInstances,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBInstancesInput{}
	}

	output = &DescribeDBInstancesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeDBInstances API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DescribeDBInstances for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBInstances
func (c *Rdb) DescribeDBInstances(input *DescribeDBInstancesInput) (*DescribeDBInstancesOutput, error) {
	req, out := c.DescribeDBInstancesRequest(input)
	return out, req.Send()
}

// DescribeDBInstancesWithContext is the same as DescribeDBInstances with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DescribeDBInstancesWithContext(ctx nifcloud.Context, input *DescribeDBInstancesInput, opts ...request.Option) (*DescribeDBInstancesOutput, error) {
	req, out := c.DescribeDBInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBLogFiles = "DescribeDBLogFiles"

// DescribeDBLogFilesRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeDBLogFiles operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeDBLogFiles for more information on using the DescribeDBLogFiles
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeDBLogFilesRequest method.
//    req, resp := client.DescribeDBLogFilesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBLogFiles
func (c *Rdb) DescribeDBLogFilesRequest(input *DescribeDBLogFilesInput) (req *request.Request, output *DescribeDBLogFilesOutput) {
	op := &request.Operation{
		Name:       opDescribeDBLogFiles,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBLogFilesInput{}
	}

	output = &DescribeDBLogFilesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeDBLogFiles API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DescribeDBLogFiles for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBLogFiles
func (c *Rdb) DescribeDBLogFiles(input *DescribeDBLogFilesInput) (*DescribeDBLogFilesOutput, error) {
	req, out := c.DescribeDBLogFilesRequest(input)
	return out, req.Send()
}

// DescribeDBLogFilesWithContext is the same as DescribeDBLogFiles with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBLogFiles for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DescribeDBLogFilesWithContext(ctx nifcloud.Context, input *DescribeDBLogFilesInput, opts ...request.Option) (*DescribeDBLogFilesOutput, error) {
	req, out := c.DescribeDBLogFilesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBParameterGroups = "DescribeDBParameterGroups"

// DescribeDBParameterGroupsRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeDBParameterGroups operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeDBParameterGroups for more information on using the DescribeDBParameterGroups
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeDBParameterGroupsRequest method.
//    req, resp := client.DescribeDBParameterGroupsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBParameterGroups
func (c *Rdb) DescribeDBParameterGroupsRequest(input *DescribeDBParameterGroupsInput) (req *request.Request, output *DescribeDBParameterGroupsOutput) {
	op := &request.Operation{
		Name:       opDescribeDBParameterGroups,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBParameterGroupsInput{}
	}

	output = &DescribeDBParameterGroupsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeDBParameterGroups API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DescribeDBParameterGroups for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBParameterGroups
func (c *Rdb) DescribeDBParameterGroups(input *DescribeDBParameterGroupsInput) (*DescribeDBParameterGroupsOutput, error) {
	req, out := c.DescribeDBParameterGroupsRequest(input)
	return out, req.Send()
}

// DescribeDBParameterGroupsWithContext is the same as DescribeDBParameterGroups with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBParameterGroups for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DescribeDBParameterGroupsWithContext(ctx nifcloud.Context, input *DescribeDBParameterGroupsInput, opts ...request.Option) (*DescribeDBParameterGroupsOutput, error) {
	req, out := c.DescribeDBParameterGroupsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBParameters = "DescribeDBParameters"

// DescribeDBParametersRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeDBParameters operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeDBParameters for more information on using the DescribeDBParameters
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeDBParametersRequest method.
//    req, resp := client.DescribeDBParametersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBParameters
func (c *Rdb) DescribeDBParametersRequest(input *DescribeDBParametersInput) (req *request.Request, output *DescribeDBParametersOutput) {
	op := &request.Operation{
		Name:       opDescribeDBParameters,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBParametersInput{}
	}

	output = &DescribeDBParametersOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeDBParameters API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DescribeDBParameters for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBParameters
func (c *Rdb) DescribeDBParameters(input *DescribeDBParametersInput) (*DescribeDBParametersOutput, error) {
	req, out := c.DescribeDBParametersRequest(input)
	return out, req.Send()
}

// DescribeDBParametersWithContext is the same as DescribeDBParameters with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBParameters for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DescribeDBParametersWithContext(ctx nifcloud.Context, input *DescribeDBParametersInput, opts ...request.Option) (*DescribeDBParametersOutput, error) {
	req, out := c.DescribeDBParametersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBSecurityGroups = "DescribeDBSecurityGroups"

// DescribeDBSecurityGroupsRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeDBSecurityGroups operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeDBSecurityGroups for more information on using the DescribeDBSecurityGroups
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeDBSecurityGroupsRequest method.
//    req, resp := client.DescribeDBSecurityGroupsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBSecurityGroups
func (c *Rdb) DescribeDBSecurityGroupsRequest(input *DescribeDBSecurityGroupsInput) (req *request.Request, output *DescribeDBSecurityGroupsOutput) {
	op := &request.Operation{
		Name:       opDescribeDBSecurityGroups,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBSecurityGroupsInput{}
	}

	output = &DescribeDBSecurityGroupsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeDBSecurityGroups API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DescribeDBSecurityGroups for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBSecurityGroups
func (c *Rdb) DescribeDBSecurityGroups(input *DescribeDBSecurityGroupsInput) (*DescribeDBSecurityGroupsOutput, error) {
	req, out := c.DescribeDBSecurityGroupsRequest(input)
	return out, req.Send()
}

// DescribeDBSecurityGroupsWithContext is the same as DescribeDBSecurityGroups with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBSecurityGroups for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DescribeDBSecurityGroupsWithContext(ctx nifcloud.Context, input *DescribeDBSecurityGroupsInput, opts ...request.Option) (*DescribeDBSecurityGroupsOutput, error) {
	req, out := c.DescribeDBSecurityGroupsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeDBSnapshots = "DescribeDBSnapshots"

// DescribeDBSnapshotsRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeDBSnapshots operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeDBSnapshots for more information on using the DescribeDBSnapshots
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeDBSnapshotsRequest method.
//    req, resp := client.DescribeDBSnapshotsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBSnapshots
func (c *Rdb) DescribeDBSnapshotsRequest(input *DescribeDBSnapshotsInput) (req *request.Request, output *DescribeDBSnapshotsOutput) {
	op := &request.Operation{
		Name:       opDescribeDBSnapshots,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeDBSnapshotsInput{}
	}

	output = &DescribeDBSnapshotsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeDBSnapshots API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DescribeDBSnapshots for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeDBSnapshots
func (c *Rdb) DescribeDBSnapshots(input *DescribeDBSnapshotsInput) (*DescribeDBSnapshotsOutput, error) {
	req, out := c.DescribeDBSnapshotsRequest(input)
	return out, req.Send()
}

// DescribeDBSnapshotsWithContext is the same as DescribeDBSnapshots with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeDBSnapshots for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DescribeDBSnapshotsWithContext(ctx nifcloud.Context, input *DescribeDBSnapshotsInput, opts ...request.Option) (*DescribeDBSnapshotsOutput, error) {
	req, out := c.DescribeDBSnapshotsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEngineDefaultParameters = "DescribeEngineDefaultParameters"

// DescribeEngineDefaultParametersRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeEngineDefaultParameters operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeEngineDefaultParameters for more information on using the DescribeEngineDefaultParameters
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeEngineDefaultParametersRequest method.
//    req, resp := client.DescribeEngineDefaultParametersRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeEngineDefaultParameters
func (c *Rdb) DescribeEngineDefaultParametersRequest(input *DescribeEngineDefaultParametersInput) (req *request.Request, output *DescribeEngineDefaultParametersOutput) {
	op := &request.Operation{
		Name:       opDescribeEngineDefaultParameters,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeEngineDefaultParametersInput{}
	}

	output = &DescribeEngineDefaultParametersOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeEngineDefaultParameters API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DescribeEngineDefaultParameters for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeEngineDefaultParameters
func (c *Rdb) DescribeEngineDefaultParameters(input *DescribeEngineDefaultParametersInput) (*DescribeEngineDefaultParametersOutput, error) {
	req, out := c.DescribeEngineDefaultParametersRequest(input)
	return out, req.Send()
}

// DescribeEngineDefaultParametersWithContext is the same as DescribeEngineDefaultParameters with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEngineDefaultParameters for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DescribeEngineDefaultParametersWithContext(ctx nifcloud.Context, input *DescribeEngineDefaultParametersInput, opts ...request.Option) (*DescribeEngineDefaultParametersOutput, error) {
	req, out := c.DescribeEngineDefaultParametersRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEventCategories = "DescribeEventCategories"

// DescribeEventCategoriesRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeEventCategories operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeEventCategories for more information on using the DescribeEventCategories
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeEventCategoriesRequest method.
//    req, resp := client.DescribeEventCategoriesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeEventCategories
func (c *Rdb) DescribeEventCategoriesRequest(input *DescribeEventCategoriesInput) (req *request.Request, output *DescribeEventCategoriesOutput) {
	op := &request.Operation{
		Name:       opDescribeEventCategories,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeEventCategoriesInput{}
	}

	output = &DescribeEventCategoriesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeEventCategories API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DescribeEventCategories for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeEventCategories
func (c *Rdb) DescribeEventCategories(input *DescribeEventCategoriesInput) (*DescribeEventCategoriesOutput, error) {
	req, out := c.DescribeEventCategoriesRequest(input)
	return out, req.Send()
}

// DescribeEventCategoriesWithContext is the same as DescribeEventCategories with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEventCategories for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DescribeEventCategoriesWithContext(ctx nifcloud.Context, input *DescribeEventCategoriesInput, opts ...request.Option) (*DescribeEventCategoriesOutput, error) {
	req, out := c.DescribeEventCategoriesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEventSubscriptions = "DescribeEventSubscriptions"

// DescribeEventSubscriptionsRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeEventSubscriptions operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeEventSubscriptions for more information on using the DescribeEventSubscriptions
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeEventSubscriptionsRequest method.
//    req, resp := client.DescribeEventSubscriptionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeEventSubscriptions
func (c *Rdb) DescribeEventSubscriptionsRequest(input *DescribeEventSubscriptionsInput) (req *request.Request, output *DescribeEventSubscriptionsOutput) {
	op := &request.Operation{
		Name:       opDescribeEventSubscriptions,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeEventSubscriptionsInput{}
	}

	output = &DescribeEventSubscriptionsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeEventSubscriptions API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DescribeEventSubscriptions for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeEventSubscriptions
func (c *Rdb) DescribeEventSubscriptions(input *DescribeEventSubscriptionsInput) (*DescribeEventSubscriptionsOutput, error) {
	req, out := c.DescribeEventSubscriptionsRequest(input)
	return out, req.Send()
}

// DescribeEventSubscriptionsWithContext is the same as DescribeEventSubscriptions with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEventSubscriptions for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DescribeEventSubscriptionsWithContext(ctx nifcloud.Context, input *DescribeEventSubscriptionsInput, opts ...request.Option) (*DescribeEventSubscriptionsOutput, error) {
	req, out := c.DescribeEventSubscriptionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeEvents = "DescribeEvents"

// DescribeEventsRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeEvents operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeEvents for more information on using the DescribeEvents
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeEventsRequest method.
//    req, resp := client.DescribeEventsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeEvents
func (c *Rdb) DescribeEventsRequest(input *DescribeEventsInput) (req *request.Request, output *DescribeEventsOutput) {
	op := &request.Operation{
		Name:       opDescribeEvents,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeEventsInput{}
	}

	output = &DescribeEventsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeEvents API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DescribeEvents for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeEvents
func (c *Rdb) DescribeEvents(input *DescribeEventsInput) (*DescribeEventsOutput, error) {
	req, out := c.DescribeEventsRequest(input)
	return out, req.Send()
}

// DescribeEventsWithContext is the same as DescribeEvents with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeEvents for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DescribeEventsWithContext(ctx nifcloud.Context, input *DescribeEventsInput, opts ...request.Option) (*DescribeEventsOutput, error) {
	req, out := c.DescribeEventsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeOrderableDBInstanceOptions = "DescribeOrderableDBInstanceOptions"

// DescribeOrderableDBInstanceOptionsRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeOrderableDBInstanceOptions operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeOrderableDBInstanceOptions for more information on using the DescribeOrderableDBInstanceOptions
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeOrderableDBInstanceOptionsRequest method.
//    req, resp := client.DescribeOrderableDBInstanceOptionsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeOrderableDBInstanceOptions
func (c *Rdb) DescribeOrderableDBInstanceOptionsRequest(input *DescribeOrderableDBInstanceOptionsInput) (req *request.Request, output *DescribeOrderableDBInstanceOptionsOutput) {
	op := &request.Operation{
		Name:       opDescribeOrderableDBInstanceOptions,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeOrderableDBInstanceOptionsInput{}
	}

	output = &DescribeOrderableDBInstanceOptionsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeOrderableDBInstanceOptions API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DescribeOrderableDBInstanceOptions for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DescribeOrderableDBInstanceOptions
func (c *Rdb) DescribeOrderableDBInstanceOptions(input *DescribeOrderableDBInstanceOptionsInput) (*DescribeOrderableDBInstanceOptionsOutput, error) {
	req, out := c.DescribeOrderableDBInstanceOptionsRequest(input)
	return out, req.Send()
}

// DescribeOrderableDBInstanceOptionsWithContext is the same as DescribeOrderableDBInstanceOptions with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeOrderableDBInstanceOptions for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DescribeOrderableDBInstanceOptionsWithContext(ctx nifcloud.Context, input *DescribeOrderableDBInstanceOptionsInput, opts ...request.Option) (*DescribeOrderableDBInstanceOptionsOutput, error) {
	req, out := c.DescribeOrderableDBInstanceOptionsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDownloadDBLogFilePortion = "DownloadDBLogFilePortion"

// DownloadDBLogFilePortionRequest generates a "nifcloud/request.Request" representing the
// client's request for the DownloadDBLogFilePortion operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DownloadDBLogFilePortion for more information on using the DownloadDBLogFilePortion
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DownloadDBLogFilePortionRequest method.
//    req, resp := client.DownloadDBLogFilePortionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DownloadDBLogFilePortion
func (c *Rdb) DownloadDBLogFilePortionRequest(input *DownloadDBLogFilePortionInput) (req *request.Request, output *DownloadDBLogFilePortionOutput) {
	op := &request.Operation{
		Name:       opDownloadDBLogFilePortion,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DownloadDBLogFilePortionInput{}
	}

	output = &DownloadDBLogFilePortionOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DownloadDBLogFilePortion API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation DownloadDBLogFilePortion for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/DownloadDBLogFilePortion
func (c *Rdb) DownloadDBLogFilePortion(input *DownloadDBLogFilePortionInput) (*DownloadDBLogFilePortionOutput, error) {
	req, out := c.DownloadDBLogFilePortionRequest(input)
	return out, req.Send()
}

// DownloadDBLogFilePortionWithContext is the same as DownloadDBLogFilePortion with the addition of
// the ability to pass a context and additional request options.
//
// See DownloadDBLogFilePortion for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) DownloadDBLogFilePortionWithContext(ctx nifcloud.Context, input *DownloadDBLogFilePortionInput, opts ...request.Option) (*DownloadDBLogFilePortionOutput, error) {
	req, out := c.DownloadDBLogFilePortionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBInstance = "ModifyDBInstance"

// ModifyDBInstanceRequest generates a "nifcloud/request.Request" representing the
// client's request for the ModifyDBInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyDBInstance for more information on using the ModifyDBInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyDBInstanceRequest method.
//    req, resp := client.ModifyDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/ModifyDBInstance
func (c *Rdb) ModifyDBInstanceRequest(input *ModifyDBInstanceInput) (req *request.Request, output *ModifyDBInstanceOutput) {
	op := &request.Operation{
		Name:       opModifyDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBInstanceInput{}
	}

	output = &ModifyDBInstanceOutput{}
	req = c.newRequest(op, input, output)
	return
}

// ModifyDBInstance API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation ModifyDBInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/ModifyDBInstance
func (c *Rdb) ModifyDBInstance(input *ModifyDBInstanceInput) (*ModifyDBInstanceOutput, error) {
	req, out := c.ModifyDBInstanceRequest(input)
	return out, req.Send()
}

// ModifyDBInstanceWithContext is the same as ModifyDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) ModifyDBInstanceWithContext(ctx nifcloud.Context, input *ModifyDBInstanceInput, opts ...request.Option) (*ModifyDBInstanceOutput, error) {
	req, out := c.ModifyDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyDBParameterGroup = "ModifyDBParameterGroup"

// ModifyDBParameterGroupRequest generates a "nifcloud/request.Request" representing the
// client's request for the ModifyDBParameterGroup operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyDBParameterGroup for more information on using the ModifyDBParameterGroup
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyDBParameterGroupRequest method.
//    req, resp := client.ModifyDBParameterGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/ModifyDBParameterGroup
func (c *Rdb) ModifyDBParameterGroupRequest(input *ModifyDBParameterGroupInput) (req *request.Request, output *ModifyDBParameterGroupOutput) {
	op := &request.Operation{
		Name:       opModifyDBParameterGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyDBParameterGroupInput{}
	}

	output = &ModifyDBParameterGroupOutput{}
	req = c.newRequest(op, input, output)
	return
}

// ModifyDBParameterGroup API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation ModifyDBParameterGroup for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/ModifyDBParameterGroup
func (c *Rdb) ModifyDBParameterGroup(input *ModifyDBParameterGroupInput) (*ModifyDBParameterGroupOutput, error) {
	req, out := c.ModifyDBParameterGroupRequest(input)
	return out, req.Send()
}

// ModifyDBParameterGroupWithContext is the same as ModifyDBParameterGroup with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyDBParameterGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) ModifyDBParameterGroupWithContext(ctx nifcloud.Context, input *ModifyDBParameterGroupInput, opts ...request.Option) (*ModifyDBParameterGroupOutput, error) {
	req, out := c.ModifyDBParameterGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyEventSubscription = "ModifyEventSubscription"

// ModifyEventSubscriptionRequest generates a "nifcloud/request.Request" representing the
// client's request for the ModifyEventSubscription operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyEventSubscription for more information on using the ModifyEventSubscription
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyEventSubscriptionRequest method.
//    req, resp := client.ModifyEventSubscriptionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/ModifyEventSubscription
func (c *Rdb) ModifyEventSubscriptionRequest(input *ModifyEventSubscriptionInput) (req *request.Request, output *ModifyEventSubscriptionOutput) {
	op := &request.Operation{
		Name:       opModifyEventSubscription,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyEventSubscriptionInput{}
	}

	output = &ModifyEventSubscriptionOutput{}
	req = c.newRequest(op, input, output)
	return
}

// ModifyEventSubscription API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation ModifyEventSubscription for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/ModifyEventSubscription
func (c *Rdb) ModifyEventSubscription(input *ModifyEventSubscriptionInput) (*ModifyEventSubscriptionOutput, error) {
	req, out := c.ModifyEventSubscriptionRequest(input)
	return out, req.Send()
}

// ModifyEventSubscriptionWithContext is the same as ModifyEventSubscription with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyEventSubscription for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) ModifyEventSubscriptionWithContext(ctx nifcloud.Context, input *ModifyEventSubscriptionInput, opts ...request.Option) (*ModifyEventSubscriptionOutput, error) {
	req, out := c.ModifyEventSubscriptionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opNiftyFailoverDBInstance = "NiftyFailoverDBInstance"

// NiftyFailoverDBInstanceRequest generates a "nifcloud/request.Request" representing the
// client's request for the NiftyFailoverDBInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See NiftyFailoverDBInstance for more information on using the NiftyFailoverDBInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the NiftyFailoverDBInstanceRequest method.
//    req, resp := client.NiftyFailoverDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/NiftyFailoverDBInstance
func (c *Rdb) NiftyFailoverDBInstanceRequest(input *NiftyFailoverDBInstanceInput) (req *request.Request, output *NiftyFailoverDBInstanceOutput) {
	op := &request.Operation{
		Name:       opNiftyFailoverDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &NiftyFailoverDBInstanceInput{}
	}

	output = &NiftyFailoverDBInstanceOutput{}
	req = c.newRequest(op, input, output)
	return
}

// NiftyFailoverDBInstance API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation NiftyFailoverDBInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/NiftyFailoverDBInstance
func (c *Rdb) NiftyFailoverDBInstance(input *NiftyFailoverDBInstanceInput) (*NiftyFailoverDBInstanceOutput, error) {
	req, out := c.NiftyFailoverDBInstanceRequest(input)
	return out, req.Send()
}

// NiftyFailoverDBInstanceWithContext is the same as NiftyFailoverDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See NiftyFailoverDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) NiftyFailoverDBInstanceWithContext(ctx nifcloud.Context, input *NiftyFailoverDBInstanceInput, opts ...request.Option) (*NiftyFailoverDBInstanceOutput, error) {
	req, out := c.NiftyFailoverDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opNiftyGetMetricStatistics = "NiftyGetMetricStatistics"

// NiftyGetMetricStatisticsRequest generates a "nifcloud/request.Request" representing the
// client's request for the NiftyGetMetricStatistics operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See NiftyGetMetricStatistics for more information on using the NiftyGetMetricStatistics
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the NiftyGetMetricStatisticsRequest method.
//    req, resp := client.NiftyGetMetricStatisticsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/NiftyGetMetricStatistics
func (c *Rdb) NiftyGetMetricStatisticsRequest(input *NiftyGetMetricStatisticsInput) (req *request.Request, output *NiftyGetMetricStatisticsOutput) {
	op := &request.Operation{
		Name:       opNiftyGetMetricStatistics,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &NiftyGetMetricStatisticsInput{}
	}

	output = &NiftyGetMetricStatisticsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// NiftyGetMetricStatistics API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation NiftyGetMetricStatistics for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/NiftyGetMetricStatistics
func (c *Rdb) NiftyGetMetricStatistics(input *NiftyGetMetricStatisticsInput) (*NiftyGetMetricStatisticsOutput, error) {
	req, out := c.NiftyGetMetricStatisticsRequest(input)
	return out, req.Send()
}

// NiftyGetMetricStatisticsWithContext is the same as NiftyGetMetricStatistics with the addition of
// the ability to pass a context and additional request options.
//
// See NiftyGetMetricStatistics for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) NiftyGetMetricStatisticsWithContext(ctx nifcloud.Context, input *NiftyGetMetricStatisticsInput, opts ...request.Option) (*NiftyGetMetricStatisticsOutput, error) {
	req, out := c.NiftyGetMetricStatisticsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRebootDBInstance = "RebootDBInstance"

// RebootDBInstanceRequest generates a "nifcloud/request.Request" representing the
// client's request for the RebootDBInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RebootDBInstance for more information on using the RebootDBInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RebootDBInstanceRequest method.
//    req, resp := client.RebootDBInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/RebootDBInstance
func (c *Rdb) RebootDBInstanceRequest(input *RebootDBInstanceInput) (req *request.Request, output *RebootDBInstanceOutput) {
	op := &request.Operation{
		Name:       opRebootDBInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RebootDBInstanceInput{}
	}

	output = &RebootDBInstanceOutput{}
	req = c.newRequest(op, input, output)
	return
}

// RebootDBInstance API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation RebootDBInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/RebootDBInstance
func (c *Rdb) RebootDBInstance(input *RebootDBInstanceInput) (*RebootDBInstanceOutput, error) {
	req, out := c.RebootDBInstanceRequest(input)
	return out, req.Send()
}

// RebootDBInstanceWithContext is the same as RebootDBInstance with the addition of
// the ability to pass a context and additional request options.
//
// See RebootDBInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) RebootDBInstanceWithContext(ctx nifcloud.Context, input *RebootDBInstanceInput, opts ...request.Option) (*RebootDBInstanceOutput, error) {
	req, out := c.RebootDBInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRemoveSourceIdentifierFromSubscription = "RemoveSourceIdentifierFromSubscription"

// RemoveSourceIdentifierFromSubscriptionRequest generates a "nifcloud/request.Request" representing the
// client's request for the RemoveSourceIdentifierFromSubscription operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RemoveSourceIdentifierFromSubscription for more information on using the RemoveSourceIdentifierFromSubscription
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RemoveSourceIdentifierFromSubscriptionRequest method.
//    req, resp := client.RemoveSourceIdentifierFromSubscriptionRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/RemoveSourceIdentifierFromSubscription
func (c *Rdb) RemoveSourceIdentifierFromSubscriptionRequest(input *RemoveSourceIdentifierFromSubscriptionInput) (req *request.Request, output *RemoveSourceIdentifierFromSubscriptionOutput) {
	op := &request.Operation{
		Name:       opRemoveSourceIdentifierFromSubscription,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RemoveSourceIdentifierFromSubscriptionInput{}
	}

	output = &RemoveSourceIdentifierFromSubscriptionOutput{}
	req = c.newRequest(op, input, output)
	return
}

// RemoveSourceIdentifierFromSubscription API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation RemoveSourceIdentifierFromSubscription for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/RemoveSourceIdentifierFromSubscription
func (c *Rdb) RemoveSourceIdentifierFromSubscription(input *RemoveSourceIdentifierFromSubscriptionInput) (*RemoveSourceIdentifierFromSubscriptionOutput, error) {
	req, out := c.RemoveSourceIdentifierFromSubscriptionRequest(input)
	return out, req.Send()
}

// RemoveSourceIdentifierFromSubscriptionWithContext is the same as RemoveSourceIdentifierFromSubscription with the addition of
// the ability to pass a context and additional request options.
//
// See RemoveSourceIdentifierFromSubscription for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) RemoveSourceIdentifierFromSubscriptionWithContext(ctx nifcloud.Context, input *RemoveSourceIdentifierFromSubscriptionInput, opts ...request.Option) (*RemoveSourceIdentifierFromSubscriptionOutput, error) {
	req, out := c.RemoveSourceIdentifierFromSubscriptionRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opResetDBParameterGroup = "ResetDBParameterGroup"

// ResetDBParameterGroupRequest generates a "nifcloud/request.Request" representing the
// client's request for the ResetDBParameterGroup operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ResetDBParameterGroup for more information on using the ResetDBParameterGroup
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ResetDBParameterGroupRequest method.
//    req, resp := client.ResetDBParameterGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/ResetDBParameterGroup
func (c *Rdb) ResetDBParameterGroupRequest(input *ResetDBParameterGroupInput) (req *request.Request, output *ResetDBParameterGroupOutput) {
	op := &request.Operation{
		Name:       opResetDBParameterGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ResetDBParameterGroupInput{}
	}

	output = &ResetDBParameterGroupOutput{}
	req = c.newRequest(op, input, output)
	return
}

// ResetDBParameterGroup API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation ResetDBParameterGroup for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/ResetDBParameterGroup
func (c *Rdb) ResetDBParameterGroup(input *ResetDBParameterGroupInput) (*ResetDBParameterGroupOutput, error) {
	req, out := c.ResetDBParameterGroupRequest(input)
	return out, req.Send()
}

// ResetDBParameterGroupWithContext is the same as ResetDBParameterGroup with the addition of
// the ability to pass a context and additional request options.
//
// See ResetDBParameterGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) ResetDBParameterGroupWithContext(ctx nifcloud.Context, input *ResetDBParameterGroupInput, opts ...request.Option) (*ResetDBParameterGroupOutput, error) {
	req, out := c.ResetDBParameterGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestoreDBInstanceFromDBSnapshot = "RestoreDBInstanceFromDBSnapshot"

// RestoreDBInstanceFromDBSnapshotRequest generates a "nifcloud/request.Request" representing the
// client's request for the RestoreDBInstanceFromDBSnapshot operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RestoreDBInstanceFromDBSnapshot for more information on using the RestoreDBInstanceFromDBSnapshot
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RestoreDBInstanceFromDBSnapshotRequest method.
//    req, resp := client.RestoreDBInstanceFromDBSnapshotRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/RestoreDBInstanceFromDBSnapshot
func (c *Rdb) RestoreDBInstanceFromDBSnapshotRequest(input *RestoreDBInstanceFromDBSnapshotInput) (req *request.Request, output *RestoreDBInstanceFromDBSnapshotOutput) {
	op := &request.Operation{
		Name:       opRestoreDBInstanceFromDBSnapshot,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RestoreDBInstanceFromDBSnapshotInput{}
	}

	output = &RestoreDBInstanceFromDBSnapshotOutput{}
	req = c.newRequest(op, input, output)
	return
}

// RestoreDBInstanceFromDBSnapshot API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation RestoreDBInstanceFromDBSnapshot for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/RestoreDBInstanceFromDBSnapshot
func (c *Rdb) RestoreDBInstanceFromDBSnapshot(input *RestoreDBInstanceFromDBSnapshotInput) (*RestoreDBInstanceFromDBSnapshotOutput, error) {
	req, out := c.RestoreDBInstanceFromDBSnapshotRequest(input)
	return out, req.Send()
}

// RestoreDBInstanceFromDBSnapshotWithContext is the same as RestoreDBInstanceFromDBSnapshot with the addition of
// the ability to pass a context and additional request options.
//
// See RestoreDBInstanceFromDBSnapshot for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) RestoreDBInstanceFromDBSnapshotWithContext(ctx nifcloud.Context, input *RestoreDBInstanceFromDBSnapshotInput, opts ...request.Option) (*RestoreDBInstanceFromDBSnapshotOutput, error) {
	req, out := c.RestoreDBInstanceFromDBSnapshotRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRestoreDBInstanceToPointInTime = "RestoreDBInstanceToPointInTime"

// RestoreDBInstanceToPointInTimeRequest generates a "nifcloud/request.Request" representing the
// client's request for the RestoreDBInstanceToPointInTime operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RestoreDBInstanceToPointInTime for more information on using the RestoreDBInstanceToPointInTime
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RestoreDBInstanceToPointInTimeRequest method.
//    req, resp := client.RestoreDBInstanceToPointInTimeRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/RestoreDBInstanceToPointInTime
func (c *Rdb) RestoreDBInstanceToPointInTimeRequest(input *RestoreDBInstanceToPointInTimeInput) (req *request.Request, output *RestoreDBInstanceToPointInTimeOutput) {
	op := &request.Operation{
		Name:       opRestoreDBInstanceToPointInTime,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RestoreDBInstanceToPointInTimeInput{}
	}

	output = &RestoreDBInstanceToPointInTimeOutput{}
	req = c.newRequest(op, input, output)
	return
}

// RestoreDBInstanceToPointInTime API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation RestoreDBInstanceToPointInTime for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/RestoreDBInstanceToPointInTime
func (c *Rdb) RestoreDBInstanceToPointInTime(input *RestoreDBInstanceToPointInTimeInput) (*RestoreDBInstanceToPointInTimeOutput, error) {
	req, out := c.RestoreDBInstanceToPointInTimeRequest(input)
	return out, req.Send()
}

// RestoreDBInstanceToPointInTimeWithContext is the same as RestoreDBInstanceToPointInTime with the addition of
// the ability to pass a context and additional request options.
//
// See RestoreDBInstanceToPointInTime for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) RestoreDBInstanceToPointInTimeWithContext(ctx nifcloud.Context, input *RestoreDBInstanceToPointInTimeInput, opts ...request.Option) (*RestoreDBInstanceToPointInTimeOutput, error) {
	req, out := c.RestoreDBInstanceToPointInTimeRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRevokeDBSecurityGroupIngress = "RevokeDBSecurityGroupIngress"

// RevokeDBSecurityGroupIngressRequest generates a "nifcloud/request.Request" representing the
// client's request for the RevokeDBSecurityGroupIngress operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RevokeDBSecurityGroupIngress for more information on using the RevokeDBSecurityGroupIngress
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RevokeDBSecurityGroupIngressRequest method.
//    req, resp := client.RevokeDBSecurityGroupIngressRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/RevokeDBSecurityGroupIngress
func (c *Rdb) RevokeDBSecurityGroupIngressRequest(input *RevokeDBSecurityGroupIngressInput) (req *request.Request, output *RevokeDBSecurityGroupIngressOutput) {
	op := &request.Operation{
		Name:       opRevokeDBSecurityGroupIngress,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RevokeDBSecurityGroupIngressInput{}
	}

	output = &RevokeDBSecurityGroupIngressOutput{}
	req = c.newRequest(op, input, output)
	return
}

// RevokeDBSecurityGroupIngress API operation for NIFCLOUD RDB.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD RDB's
// API operation RevokeDBSecurityGroupIngress for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/rdb-2013-05-15N2013-12-16/RevokeDBSecurityGroupIngress
func (c *Rdb) RevokeDBSecurityGroupIngress(input *RevokeDBSecurityGroupIngressInput) (*RevokeDBSecurityGroupIngressOutput, error) {
	req, out := c.RevokeDBSecurityGroupIngressRequest(input)
	return out, req.Send()
}

// RevokeDBSecurityGroupIngressWithContext is the same as RevokeDBSecurityGroupIngress with the addition of
// the ability to pass a context and additional request options.
//
// See RevokeDBSecurityGroupIngress for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Rdb) RevokeDBSecurityGroupIngressWithContext(ctx nifcloud.Context, input *RevokeDBSecurityGroupIngressInput, opts ...request.Option) (*RevokeDBSecurityGroupIngressOutput, error) {
	req, out := c.RevokeDBSecurityGroupIngressRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AddSourceIdentifierToSubscriptionInput struct {
	_ struct{} `type:"structure"`

	SourceIdentifier *string `locationName:"SourceIdentifier" type:"string"`

	SubscriptionName *string `locationName:"SubscriptionName" type:"string"`
}

// String returns the string representation
func (s AddSourceIdentifierToSubscriptionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AddSourceIdentifierToSubscriptionInput) GoString() string {
	return s.String()
}

// SetSourceIdentifier sets the SourceIdentifier field's value.
func (s *AddSourceIdentifierToSubscriptionInput) SetSourceIdentifier(v string) *AddSourceIdentifierToSubscriptionInput {
	s.SourceIdentifier = &v
	return s
}

// SetSubscriptionName sets the SubscriptionName field's value.
func (s *AddSourceIdentifierToSubscriptionInput) SetSubscriptionName(v string) *AddSourceIdentifierToSubscriptionInput {
	s.SubscriptionName = &v
	return s
}

type AddSourceIdentifierToSubscriptionOutput struct {
	_ struct{} `type:"structure"`

	EventSubscription *EventSubscription `type:"structure"`
}

// String returns the string representation
func (s AddSourceIdentifierToSubscriptionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AddSourceIdentifierToSubscriptionOutput) GoString() string {
	return s.String()
}

// SetEventSubscription sets the EventSubscription field's value.
func (s *AddSourceIdentifierToSubscriptionOutput) SetEventSubscription(v *EventSubscription) *AddSourceIdentifierToSubscriptionOutput {
	s.EventSubscription = v
	return s
}

type AuthorizeDBSecurityGroupIngressInput struct {
	_ struct{} `type:"structure"`

	CIDRIP *string `locationName:"CIDRIP" type:"string"`

	DBSecurityGroupName *string `locationName:"DBSecurityGroupName" type:"string"`

	EC2SecurityGroupName *string `locationName:"EC2SecurityGroupName" type:"string"`
}

// String returns the string representation
func (s AuthorizeDBSecurityGroupIngressInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AuthorizeDBSecurityGroupIngressInput) GoString() string {
	return s.String()
}

// SetCIDRIP sets the CIDRIP field's value.
func (s *AuthorizeDBSecurityGroupIngressInput) SetCIDRIP(v string) *AuthorizeDBSecurityGroupIngressInput {
	s.CIDRIP = &v
	return s
}

// SetDBSecurityGroupName sets the DBSecurityGroupName field's value.
func (s *AuthorizeDBSecurityGroupIngressInput) SetDBSecurityGroupName(v string) *AuthorizeDBSecurityGroupIngressInput {
	s.DBSecurityGroupName = &v
	return s
}

// SetEC2SecurityGroupName sets the EC2SecurityGroupName field's value.
func (s *AuthorizeDBSecurityGroupIngressInput) SetEC2SecurityGroupName(v string) *AuthorizeDBSecurityGroupIngressInput {
	s.EC2SecurityGroupName = &v
	return s
}

type AuthorizeDBSecurityGroupIngressOutput struct {
	_ struct{} `type:"structure"`

	DBSecurityGroup *DBSecurityGroup `type:"structure"`
}

// String returns the string representation
func (s AuthorizeDBSecurityGroupIngressOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AuthorizeDBSecurityGroupIngressOutput) GoString() string {
	return s.String()
}

// SetDBSecurityGroup sets the DBSecurityGroup field's value.
func (s *AuthorizeDBSecurityGroupIngressOutput) SetDBSecurityGroup(v *DBSecurityGroup) *AuthorizeDBSecurityGroupIngressOutput {
	s.DBSecurityGroup = v
	return s
}

type AvailabilityZone struct {
	_ struct{} `type:"structure"`

	Name *string `type:"string"`

	NiftyStorageTypes []*int64 `type:"list"`

	ProvisionedIopsCapable *bool `type:"boolean"`
}

// String returns the string representation
func (s AvailabilityZone) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AvailabilityZone) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *AvailabilityZone) SetName(v string) *AvailabilityZone {
	s.Name = &v
	return s
}

// SetNiftyStorageTypes sets the NiftyStorageTypes field's value.
func (s *AvailabilityZone) SetNiftyStorageTypes(v []*int64) *AvailabilityZone {
	s.NiftyStorageTypes = v
	return s
}

// SetProvisionedIopsCapable sets the ProvisionedIopsCapable field's value.
func (s *AvailabilityZone) SetProvisionedIopsCapable(v bool) *AvailabilityZone {
	s.ProvisionedIopsCapable = &v
	return s
}

type CopyDBSnapshotInput struct {
	_ struct{} `type:"structure"`

	SourceDBSnapshotIdentifier *string `locationName:"SourceDBSnapshotIdentifier" type:"string"`

	TargetDBSnapshotIdentifier *string `locationName:"TargetDBSnapshotIdentifier" type:"string"`
}

// String returns the string representation
func (s CopyDBSnapshotInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CopyDBSnapshotInput) GoString() string {
	return s.String()
}

// SetSourceDBSnapshotIdentifier sets the SourceDBSnapshotIdentifier field's value.
func (s *CopyDBSnapshotInput) SetSourceDBSnapshotIdentifier(v string) *CopyDBSnapshotInput {
	s.SourceDBSnapshotIdentifier = &v
	return s
}

// SetTargetDBSnapshotIdentifier sets the TargetDBSnapshotIdentifier field's value.
func (s *CopyDBSnapshotInput) SetTargetDBSnapshotIdentifier(v string) *CopyDBSnapshotInput {
	s.TargetDBSnapshotIdentifier = &v
	return s
}

type CopyDBSnapshotOutput struct {
	_ struct{} `type:"structure"`

	DBSnapshot *DBSnapshot `type:"structure"`
}

// String returns the string representation
func (s CopyDBSnapshotOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CopyDBSnapshotOutput) GoString() string {
	return s.String()
}

// SetDBSnapshot sets the DBSnapshot field's value.
func (s *CopyDBSnapshotOutput) SetDBSnapshot(v *DBSnapshot) *CopyDBSnapshotOutput {
	s.DBSnapshot = v
	return s
}

type CreateDBInstanceInput struct {
	_ struct{} `type:"structure"`

	AllocatedStorage *int64 `locationName:"AllocatedStorage" type:"integer"`

	AvailabilityZone *string `locationName:"AvailabilityZone" type:"string"`

	BackupRetentionPeriod *int64 `locationName:"BackupRetentionPeriod" type:"integer"`

	DBInstanceClass *string `locationName:"DBInstanceClass" type:"string"`

	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string"`

	DBName *string `locationName:"DBName" type:"string"`

	DBParameterGroupName *string `locationName:"DBParameterGroupName" type:"string"`

	DBSecurityGroups []*string `locationName:"DBSecurityGroups" locationNameList:"member" type:"list"`

	Engine *string `locationName:"Engine" type:"string"`

	EngineVersion *string `locationName:"EngineVersion" type:"string"`

	LicenseModel *string `locationName:"LicenseModel" type:"string"`

	MasterUserPassword *string `locationName:"MasterUserPassword" type:"string"`

	MasterUsername *string `locationName:"MasterUsername" type:"string"`

	MultiAZ *bool `locationName:"MultiAZ" type:"boolean"`

	NiftyMasterPrivateAddress *string `locationName:"NiftyMasterPrivateAddress" type:"string"`

	NiftyMultiAZType *int64 `locationName:"NiftyMultiAZType" type:"integer"`

	NiftyNetworkId *string `locationName:"NiftyNetworkId" type:"string"`

	NiftyReadReplicaDBInstanceIdentifier *string `locationName:"NiftyReadReplicaDBInstanceIdentifier" type:"string"`

	NiftyReadReplicaPrivateAddress *string `locationName:"NiftyReadReplicaPrivateAddress" type:"string"`

	NiftySlavePrivateAddress *string `locationName:"NiftySlavePrivateAddress" type:"string"`

	NiftyStorageType *int64 `locationName:"NiftyStorageType" type:"integer"`

	NiftyVirtualPrivateAddress *string `locationName:"NiftyVirtualPrivateAddress" type:"string"`

	Port *int64 `locationName:"Port" type:"integer"`

	PreferredBackupWindow *string `locationName:"PreferredBackupWindow" type:"string"`

	PreferredMaintenanceWindow *string `locationName:"PreferredMaintenanceWindow" type:"string"`

	PubliclyAccessible *bool `locationName:"PubliclyAccessible" type:"boolean"`
}

// String returns the string representation
func (s CreateDBInstanceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBInstanceInput) GoString() string {
	return s.String()
}

// SetAllocatedStorage sets the AllocatedStorage field's value.
func (s *CreateDBInstanceInput) SetAllocatedStorage(v int64) *CreateDBInstanceInput {
	s.AllocatedStorage = &v
	return s
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *CreateDBInstanceInput) SetAvailabilityZone(v string) *CreateDBInstanceInput {
	s.AvailabilityZone = &v
	return s
}

// SetBackupRetentionPeriod sets the BackupRetentionPeriod field's value.
func (s *CreateDBInstanceInput) SetBackupRetentionPeriod(v int64) *CreateDBInstanceInput {
	s.BackupRetentionPeriod = &v
	return s
}

// SetDBInstanceClass sets the DBInstanceClass field's value.
func (s *CreateDBInstanceInput) SetDBInstanceClass(v string) *CreateDBInstanceInput {
	s.DBInstanceClass = &v
	return s
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *CreateDBInstanceInput) SetDBInstanceIdentifier(v string) *CreateDBInstanceInput {
	s.DBInstanceIdentifier = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *CreateDBInstanceInput) SetDBName(v string) *CreateDBInstanceInput {
	s.DBName = &v
	return s
}

// SetDBParameterGroupName sets the DBParameterGroupName field's value.
func (s *CreateDBInstanceInput) SetDBParameterGroupName(v string) *CreateDBInstanceInput {
	s.DBParameterGroupName = &v
	return s
}

// SetDBSecurityGroups sets the DBSecurityGroups field's value.
func (s *CreateDBInstanceInput) SetDBSecurityGroups(v []*string) *CreateDBInstanceInput {
	s.DBSecurityGroups = v
	return s
}

// SetEngine sets the Engine field's value.
func (s *CreateDBInstanceInput) SetEngine(v string) *CreateDBInstanceInput {
	s.Engine = &v
	return s
}

// SetEngineVersion sets the EngineVersion field's value.
func (s *CreateDBInstanceInput) SetEngineVersion(v string) *CreateDBInstanceInput {
	s.EngineVersion = &v
	return s
}

// SetLicenseModel sets the LicenseModel field's value.
func (s *CreateDBInstanceInput) SetLicenseModel(v string) *CreateDBInstanceInput {
	s.LicenseModel = &v
	return s
}

// SetMasterUserPassword sets the MasterUserPassword field's value.
func (s *CreateDBInstanceInput) SetMasterUserPassword(v string) *CreateDBInstanceInput {
	s.MasterUserPassword = &v
	return s
}

// SetMasterUsername sets the MasterUsername field's value.
func (s *CreateDBInstanceInput) SetMasterUsername(v string) *CreateDBInstanceInput {
	s.MasterUsername = &v
	return s
}

// SetMultiAZ sets the MultiAZ field's value.
func (s *CreateDBInstanceInput) SetMultiAZ(v bool) *CreateDBInstanceInput {
	s.MultiAZ = &v
	return s
}

// SetNiftyMasterPrivateAddress sets the NiftyMasterPrivateAddress field's value.
func (s *CreateDBInstanceInput) SetNiftyMasterPrivateAddress(v string) *CreateDBInstanceInput {
	s.NiftyMasterPrivateAddress = &v
	return s
}

// SetNiftyMultiAZType sets the NiftyMultiAZType field's value.
func (s *CreateDBInstanceInput) SetNiftyMultiAZType(v int64) *CreateDBInstanceInput {
	s.NiftyMultiAZType = &v
	return s
}

// SetNiftyNetworkId sets the NiftyNetworkId field's value.
func (s *CreateDBInstanceInput) SetNiftyNetworkId(v string) *CreateDBInstanceInput {
	s.NiftyNetworkId = &v
	return s
}

// SetNiftyReadReplicaDBInstanceIdentifier sets the NiftyReadReplicaDBInstanceIdentifier field's value.
func (s *CreateDBInstanceInput) SetNiftyReadReplicaDBInstanceIdentifier(v string) *CreateDBInstanceInput {
	s.NiftyReadReplicaDBInstanceIdentifier = &v
	return s
}

// SetNiftyReadReplicaPrivateAddress sets the NiftyReadReplicaPrivateAddress field's value.
func (s *CreateDBInstanceInput) SetNiftyReadReplicaPrivateAddress(v string) *CreateDBInstanceInput {
	s.NiftyReadReplicaPrivateAddress = &v
	return s
}

// SetNiftySlavePrivateAddress sets the NiftySlavePrivateAddress field's value.
func (s *CreateDBInstanceInput) SetNiftySlavePrivateAddress(v string) *CreateDBInstanceInput {
	s.NiftySlavePrivateAddress = &v
	return s
}

// SetNiftyStorageType sets the NiftyStorageType field's value.
func (s *CreateDBInstanceInput) SetNiftyStorageType(v int64) *CreateDBInstanceInput {
	s.NiftyStorageType = &v
	return s
}

// SetNiftyVirtualPrivateAddress sets the NiftyVirtualPrivateAddress field's value.
func (s *CreateDBInstanceInput) SetNiftyVirtualPrivateAddress(v string) *CreateDBInstanceInput {
	s.NiftyVirtualPrivateAddress = &v
	return s
}

// SetPort sets the Port field's value.
func (s *CreateDBInstanceInput) SetPort(v int64) *CreateDBInstanceInput {
	s.Port = &v
	return s
}

// SetPreferredBackupWindow sets the PreferredBackupWindow field's value.
func (s *CreateDBInstanceInput) SetPreferredBackupWindow(v string) *CreateDBInstanceInput {
	s.PreferredBackupWindow = &v
	return s
}

// SetPreferredMaintenanceWindow sets the PreferredMaintenanceWindow field's value.
func (s *CreateDBInstanceInput) SetPreferredMaintenanceWindow(v string) *CreateDBInstanceInput {
	s.PreferredMaintenanceWindow = &v
	return s
}

// SetPubliclyAccessible sets the PubliclyAccessible field's value.
func (s *CreateDBInstanceInput) SetPubliclyAccessible(v bool) *CreateDBInstanceInput {
	s.PubliclyAccessible = &v
	return s
}

type CreateDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	DBInstance *DBInstance `type:"structure"`
}

// String returns the string representation
func (s CreateDBInstanceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBInstanceOutput) GoString() string {
	return s.String()
}

// SetDBInstance sets the DBInstance field's value.
func (s *CreateDBInstanceOutput) SetDBInstance(v *DBInstance) *CreateDBInstanceOutput {
	s.DBInstance = v
	return s
}

type CreateDBInstanceReadReplicaInput struct {
	_ struct{} `type:"structure"`

	DBInstanceClass *string `locationName:"DBInstanceClass" type:"string"`

	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string"`

	NiftyReadReplicaPrivateAddress *string `locationName:"NiftyReadReplicaPrivateAddress" type:"string"`

	NiftyStorageType *int64 `locationName:"NiftyStorageType" type:"integer"`

	SourceDBInstanceIdentifier *string `locationName:"SourceDBInstanceIdentifier" type:"string"`
}

// String returns the string representation
func (s CreateDBInstanceReadReplicaInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBInstanceReadReplicaInput) GoString() string {
	return s.String()
}

// SetDBInstanceClass sets the DBInstanceClass field's value.
func (s *CreateDBInstanceReadReplicaInput) SetDBInstanceClass(v string) *CreateDBInstanceReadReplicaInput {
	s.DBInstanceClass = &v
	return s
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *CreateDBInstanceReadReplicaInput) SetDBInstanceIdentifier(v string) *CreateDBInstanceReadReplicaInput {
	s.DBInstanceIdentifier = &v
	return s
}

// SetNiftyReadReplicaPrivateAddress sets the NiftyReadReplicaPrivateAddress field's value.
func (s *CreateDBInstanceReadReplicaInput) SetNiftyReadReplicaPrivateAddress(v string) *CreateDBInstanceReadReplicaInput {
	s.NiftyReadReplicaPrivateAddress = &v
	return s
}

// SetNiftyStorageType sets the NiftyStorageType field's value.
func (s *CreateDBInstanceReadReplicaInput) SetNiftyStorageType(v int64) *CreateDBInstanceReadReplicaInput {
	s.NiftyStorageType = &v
	return s
}

// SetSourceDBInstanceIdentifier sets the SourceDBInstanceIdentifier field's value.
func (s *CreateDBInstanceReadReplicaInput) SetSourceDBInstanceIdentifier(v string) *CreateDBInstanceReadReplicaInput {
	s.SourceDBInstanceIdentifier = &v
	return s
}

type CreateDBInstanceReadReplicaOutput struct {
	_ struct{} `type:"structure"`

	DBInstance *DBInstance `type:"structure"`
}

// String returns the string representation
func (s CreateDBInstanceReadReplicaOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBInstanceReadReplicaOutput) GoString() string {
	return s.String()
}

// SetDBInstance sets the DBInstance field's value.
func (s *CreateDBInstanceReadReplicaOutput) SetDBInstance(v *DBInstance) *CreateDBInstanceReadReplicaOutput {
	s.DBInstance = v
	return s
}

type CreateDBParameterGroupInput struct {
	_ struct{} `type:"structure"`

	DBParameterGroupFamily *string `locationName:"DBParameterGroupFamily" type:"string"`

	DBParameterGroupName *string `locationName:"DBParameterGroupName" type:"string"`

	Description *string `locationName:"Description" type:"string"`
}

// String returns the string representation
func (s CreateDBParameterGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBParameterGroupInput) GoString() string {
	return s.String()
}

// SetDBParameterGroupFamily sets the DBParameterGroupFamily field's value.
func (s *CreateDBParameterGroupInput) SetDBParameterGroupFamily(v string) *CreateDBParameterGroupInput {
	s.DBParameterGroupFamily = &v
	return s
}

// SetDBParameterGroupName sets the DBParameterGroupName field's value.
func (s *CreateDBParameterGroupInput) SetDBParameterGroupName(v string) *CreateDBParameterGroupInput {
	s.DBParameterGroupName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *CreateDBParameterGroupInput) SetDescription(v string) *CreateDBParameterGroupInput {
	s.Description = &v
	return s
}

type CreateDBParameterGroupOutput struct {
	_ struct{} `type:"structure"`

	DBParameterGroup *DBParameterGroup `type:"structure"`
}

// String returns the string representation
func (s CreateDBParameterGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBParameterGroupOutput) GoString() string {
	return s.String()
}

// SetDBParameterGroup sets the DBParameterGroup field's value.
func (s *CreateDBParameterGroupOutput) SetDBParameterGroup(v *DBParameterGroup) *CreateDBParameterGroupOutput {
	s.DBParameterGroup = v
	return s
}

type CreateDBSecurityGroupInput struct {
	_ struct{} `type:"structure"`

	DBSecurityGroupDescription *string `locationName:"DBSecurityGroupDescription" type:"string"`

	DBSecurityGroupName *string `locationName:"DBSecurityGroupName" type:"string"`

	NiftyAvailabilityZone *string `locationName:"NiftyAvailabilityZone" type:"string"`
}

// String returns the string representation
func (s CreateDBSecurityGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBSecurityGroupInput) GoString() string {
	return s.String()
}

// SetDBSecurityGroupDescription sets the DBSecurityGroupDescription field's value.
func (s *CreateDBSecurityGroupInput) SetDBSecurityGroupDescription(v string) *CreateDBSecurityGroupInput {
	s.DBSecurityGroupDescription = &v
	return s
}

// SetDBSecurityGroupName sets the DBSecurityGroupName field's value.
func (s *CreateDBSecurityGroupInput) SetDBSecurityGroupName(v string) *CreateDBSecurityGroupInput {
	s.DBSecurityGroupName = &v
	return s
}

// SetNiftyAvailabilityZone sets the NiftyAvailabilityZone field's value.
func (s *CreateDBSecurityGroupInput) SetNiftyAvailabilityZone(v string) *CreateDBSecurityGroupInput {
	s.NiftyAvailabilityZone = &v
	return s
}

type CreateDBSecurityGroupOutput struct {
	_ struct{} `type:"structure"`

	DBSecurityGroup *DBSecurityGroup `type:"structure"`
}

// String returns the string representation
func (s CreateDBSecurityGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBSecurityGroupOutput) GoString() string {
	return s.String()
}

// SetDBSecurityGroup sets the DBSecurityGroup field's value.
func (s *CreateDBSecurityGroupOutput) SetDBSecurityGroup(v *DBSecurityGroup) *CreateDBSecurityGroupOutput {
	s.DBSecurityGroup = v
	return s
}

type CreateDBSnapshotInput struct {
	_ struct{} `type:"structure"`

	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string"`

	DBSnapshotIdentifier *string `locationName:"DBSnapshotIdentifier" type:"string"`
}

// String returns the string representation
func (s CreateDBSnapshotInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBSnapshotInput) GoString() string {
	return s.String()
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *CreateDBSnapshotInput) SetDBInstanceIdentifier(v string) *CreateDBSnapshotInput {
	s.DBInstanceIdentifier = &v
	return s
}

// SetDBSnapshotIdentifier sets the DBSnapshotIdentifier field's value.
func (s *CreateDBSnapshotInput) SetDBSnapshotIdentifier(v string) *CreateDBSnapshotInput {
	s.DBSnapshotIdentifier = &v
	return s
}

type CreateDBSnapshotOutput struct {
	_ struct{} `type:"structure"`

	DBSnapshot *DBSnapshot `type:"structure"`
}

// String returns the string representation
func (s CreateDBSnapshotOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateDBSnapshotOutput) GoString() string {
	return s.String()
}

// SetDBSnapshot sets the DBSnapshot field's value.
func (s *CreateDBSnapshotOutput) SetDBSnapshot(v *DBSnapshot) *CreateDBSnapshotOutput {
	s.DBSnapshot = v
	return s
}

type CreateEventSubscriptionInput struct {
	_ struct{} `type:"structure"`

	Enabled *bool `locationName:"Enabled" type:"boolean"`

	EventCategories []*string `locationName:"EventCategories" locationNameList:"member" type:"list"`

	NiftyDescription *string `locationName:"NiftyDescription" type:"string"`

	NiftyEmailAddresses []*string `locationName:"NiftyEmailAddresses" locationNameList:"member" type:"list"`

	SourceIds []*string `locationName:"SourceIds" locationNameList:"member" type:"list"`

	SourceType *string `locationName:"SourceType" type:"string"`

	SubscriptionName *string `locationName:"SubscriptionName" type:"string"`
}

// String returns the string representation
func (s CreateEventSubscriptionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateEventSubscriptionInput) GoString() string {
	return s.String()
}

// SetEnabled sets the Enabled field's value.
func (s *CreateEventSubscriptionInput) SetEnabled(v bool) *CreateEventSubscriptionInput {
	s.Enabled = &v
	return s
}

// SetEventCategories sets the EventCategories field's value.
func (s *CreateEventSubscriptionInput) SetEventCategories(v []*string) *CreateEventSubscriptionInput {
	s.EventCategories = v
	return s
}

// SetNiftyDescription sets the NiftyDescription field's value.
func (s *CreateEventSubscriptionInput) SetNiftyDescription(v string) *CreateEventSubscriptionInput {
	s.NiftyDescription = &v
	return s
}

// SetNiftyEmailAddresses sets the NiftyEmailAddresses field's value.
func (s *CreateEventSubscriptionInput) SetNiftyEmailAddresses(v []*string) *CreateEventSubscriptionInput {
	s.NiftyEmailAddresses = v
	return s
}

// SetSourceIds sets the SourceIds field's value.
func (s *CreateEventSubscriptionInput) SetSourceIds(v []*string) *CreateEventSubscriptionInput {
	s.SourceIds = v
	return s
}

// SetSourceType sets the SourceType field's value.
func (s *CreateEventSubscriptionInput) SetSourceType(v string) *CreateEventSubscriptionInput {
	s.SourceType = &v
	return s
}

// SetSubscriptionName sets the SubscriptionName field's value.
func (s *CreateEventSubscriptionInput) SetSubscriptionName(v string) *CreateEventSubscriptionInput {
	s.SubscriptionName = &v
	return s
}

type CreateEventSubscriptionOutput struct {
	_ struct{} `type:"structure"`

	EventSubscription *EventSubscription `type:"structure"`
}

// String returns the string representation
func (s CreateEventSubscriptionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateEventSubscriptionOutput) GoString() string {
	return s.String()
}

// SetEventSubscription sets the EventSubscription field's value.
func (s *CreateEventSubscriptionOutput) SetEventSubscription(v *EventSubscription) *CreateEventSubscriptionOutput {
	s.EventSubscription = v
	return s
}

type DBEngineVersion struct {
	_ struct{} `type:"structure"`

	DBEngineDescription *string `type:"string"`

	DBEngineVersionDescription *string `type:"string"`

	DBParameterGroupFamily *string `type:"string"`

	Engine *string `type:"string"`

	EngineVersion *string `type:"string"`
}

// String returns the string representation
func (s DBEngineVersion) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DBEngineVersion) GoString() string {
	return s.String()
}

// SetDBEngineDescription sets the DBEngineDescription field's value.
func (s *DBEngineVersion) SetDBEngineDescription(v string) *DBEngineVersion {
	s.DBEngineDescription = &v
	return s
}

// SetDBEngineVersionDescription sets the DBEngineVersionDescription field's value.
func (s *DBEngineVersion) SetDBEngineVersionDescription(v string) *DBEngineVersion {
	s.DBEngineVersionDescription = &v
	return s
}

// SetDBParameterGroupFamily sets the DBParameterGroupFamily field's value.
func (s *DBEngineVersion) SetDBParameterGroupFamily(v string) *DBEngineVersion {
	s.DBParameterGroupFamily = &v
	return s
}

// SetEngine sets the Engine field's value.
func (s *DBEngineVersion) SetEngine(v string) *DBEngineVersion {
	s.Engine = &v
	return s
}

// SetEngineVersion sets the EngineVersion field's value.
func (s *DBEngineVersion) SetEngineVersion(v string) *DBEngineVersion {
	s.EngineVersion = &v
	return s
}

type DBInstance struct {
	_ struct{} `type:"structure"`

	AllocatedStorage *string `type:"string"`

	AutoMinorVersionUpgrade *bool `type:"boolean"`

	AvailabilityZone *string `type:"string"`

	BackupRetentionPeriod *string `type:"string"`

	DBInstanceClass *string `type:"string"`

	DBInstanceIdentifier *string `type:"string"`

	DBInstanceStatus *string `type:"string"`

	DBName *string `type:"string"`

	DBParameterGroups []*DBParameterGroup `locationNameList:"DBParameterGroup" type:"list"`

	DBSecurityGroups []*DBSecurityGroup `locationNameList:"DBSecurityGroup" type:"list"`

	Endpoint *Endpoint `type:"structure"`

	Engine *string `type:"string"`

	EngineVersion *string `type:"string"`

	InstanceCreateTime *string `type:"string"`

	LatestRestorableTime *string `type:"string"`

	LicenseModel *string `type:"string"`

	MasterUsername *string `type:"string"`

	MultiAZ *string `type:"string"`

	NiftyMasterPrivateAddress *string `type:"string"`

	NiftyMultiAZType *string `type:"string"`

	NiftyNetworkId *string `type:"string"`

	NiftySlavePrivateAddress *string `type:"string"`

	NiftyStorageType *int64 `type:"integer"`

	OptionGroupMemberships []*OptionGroupMembership `locationNameList:"OptionGroupMembership" type:"list"`

	PendingModifiedValues *PendingModifiedValues `type:"structure"`

	PreferredBackupWindow *string `type:"string"`

	PreferredMaintenanceWindow *string `type:"string"`

	PubliclyAccessible *bool `type:"boolean"`

	ReadReplicaDBInstanceIdentifiers []*ReadReplicaDBInstanceIdentifier `locationNameList:"ReadReplicaDBInstanceIdentifier" type:"list"`

	ReadReplicaSourceDBInstanceIdentifier *string `type:"string"`

	SecondaryAvailabilityZone *string `type:"string"`

	StatusInfos []*DBInstanceStatusInfo `locationNameList:"DBInstanceStatusInfo" type:"list"`

	VpcSecurityGroups []*VpcSecurityGroup `locationNameList:"VpcSecurityGroup" type:"list"`
}

// String returns the string representation
func (s DBInstance) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DBInstance) GoString() string {
	return s.String()
}

// SetAllocatedStorage sets the AllocatedStorage field's value.
func (s *DBInstance) SetAllocatedStorage(v string) *DBInstance {
	s.AllocatedStorage = &v
	return s
}

// SetAutoMinorVersionUpgrade sets the AutoMinorVersionUpgrade field's value.
func (s *DBInstance) SetAutoMinorVersionUpgrade(v bool) *DBInstance {
	s.AutoMinorVersionUpgrade = &v
	return s
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *DBInstance) SetAvailabilityZone(v string) *DBInstance {
	s.AvailabilityZone = &v
	return s
}

// SetBackupRetentionPeriod sets the BackupRetentionPeriod field's value.
func (s *DBInstance) SetBackupRetentionPeriod(v string) *DBInstance {
	s.BackupRetentionPeriod = &v
	return s
}

// SetDBInstanceClass sets the DBInstanceClass field's value.
func (s *DBInstance) SetDBInstanceClass(v string) *DBInstance {
	s.DBInstanceClass = &v
	return s
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *DBInstance) SetDBInstanceIdentifier(v string) *DBInstance {
	s.DBInstanceIdentifier = &v
	return s
}

// SetDBInstanceStatus sets the DBInstanceStatus field's value.
func (s *DBInstance) SetDBInstanceStatus(v string) *DBInstance {
	s.DBInstanceStatus = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *DBInstance) SetDBName(v string) *DBInstance {
	s.DBName = &v
	return s
}

// SetDBParameterGroups sets the DBParameterGroups field's value.
func (s *DBInstance) SetDBParameterGroups(v []*DBParameterGroup) *DBInstance {
	s.DBParameterGroups = v
	return s
}

// SetDBSecurityGroups sets the DBSecurityGroups field's value.
func (s *DBInstance) SetDBSecurityGroups(v []*DBSecurityGroup) *DBInstance {
	s.DBSecurityGroups = v
	return s
}

// SetEndpoint sets the Endpoint field's value.
func (s *DBInstance) SetEndpoint(v *Endpoint) *DBInstance {
	s.Endpoint = v
	return s
}

// SetEngine sets the Engine field's value.
func (s *DBInstance) SetEngine(v string) *DBInstance {
	s.Engine = &v
	return s
}

// SetEngineVersion sets the EngineVersion field's value.
func (s *DBInstance) SetEngineVersion(v string) *DBInstance {
	s.EngineVersion = &v
	return s
}

// SetInstanceCreateTime sets the InstanceCreateTime field's value.
func (s *DBInstance) SetInstanceCreateTime(v string) *DBInstance {
	s.InstanceCreateTime = &v
	return s
}

// SetLatestRestorableTime sets the LatestRestorableTime field's value.
func (s *DBInstance) SetLatestRestorableTime(v string) *DBInstance {
	s.LatestRestorableTime = &v
	return s
}

// SetLicenseModel sets the LicenseModel field's value.
func (s *DBInstance) SetLicenseModel(v string) *DBInstance {
	s.LicenseModel = &v
	return s
}

// SetMasterUsername sets the MasterUsername field's value.
func (s *DBInstance) SetMasterUsername(v string) *DBInstance {
	s.MasterUsername = &v
	return s
}

// SetMultiAZ sets the MultiAZ field's value.
func (s *DBInstance) SetMultiAZ(v string) *DBInstance {
	s.MultiAZ = &v
	return s
}

// SetNiftyMasterPrivateAddress sets the NiftyMasterPrivateAddress field's value.
func (s *DBInstance) SetNiftyMasterPrivateAddress(v string) *DBInstance {
	s.NiftyMasterPrivateAddress = &v
	return s
}

// SetNiftyMultiAZType sets the NiftyMultiAZType field's value.
func (s *DBInstance) SetNiftyMultiAZType(v string) *DBInstance {
	s.NiftyMultiAZType = &v
	return s
}

// SetNiftyNetworkId sets the NiftyNetworkId field's value.
func (s *DBInstance) SetNiftyNetworkId(v string) *DBInstance {
	s.NiftyNetworkId = &v
	return s
}

// SetNiftySlavePrivateAddress sets the NiftySlavePrivateAddress field's value.
func (s *DBInstance) SetNiftySlavePrivateAddress(v string) *DBInstance {
	s.NiftySlavePrivateAddress = &v
	return s
}

// SetNiftyStorageType sets the NiftyStorageType field's value.
func (s *DBInstance) SetNiftyStorageType(v int64) *DBInstance {
	s.NiftyStorageType = &v
	return s
}

// SetOptionGroupMemberships sets the OptionGroupMemberships field's value.
func (s *DBInstance) SetOptionGroupMemberships(v []*OptionGroupMembership) *DBInstance {
	s.OptionGroupMemberships = v
	return s
}

// SetPendingModifiedValues sets the PendingModifiedValues field's value.
func (s *DBInstance) SetPendingModifiedValues(v *PendingModifiedValues) *DBInstance {
	s.PendingModifiedValues = v
	return s
}

// SetPreferredBackupWindow sets the PreferredBackupWindow field's value.
func (s *DBInstance) SetPreferredBackupWindow(v string) *DBInstance {
	s.PreferredBackupWindow = &v
	return s
}

// SetPreferredMaintenanceWindow sets the PreferredMaintenanceWindow field's value.
func (s *DBInstance) SetPreferredMaintenanceWindow(v string) *DBInstance {
	s.PreferredMaintenanceWindow = &v
	return s
}

// SetPubliclyAccessible sets the PubliclyAccessible field's value.
func (s *DBInstance) SetPubliclyAccessible(v bool) *DBInstance {
	s.PubliclyAccessible = &v
	return s
}

// SetReadReplicaDBInstanceIdentifiers sets the ReadReplicaDBInstanceIdentifiers field's value.
func (s *DBInstance) SetReadReplicaDBInstanceIdentifiers(v []*ReadReplicaDBInstanceIdentifier) *DBInstance {
	s.ReadReplicaDBInstanceIdentifiers = v
	return s
}

// SetReadReplicaSourceDBInstanceIdentifier sets the ReadReplicaSourceDBInstanceIdentifier field's value.
func (s *DBInstance) SetReadReplicaSourceDBInstanceIdentifier(v string) *DBInstance {
	s.ReadReplicaSourceDBInstanceIdentifier = &v
	return s
}

// SetSecondaryAvailabilityZone sets the SecondaryAvailabilityZone field's value.
func (s *DBInstance) SetSecondaryAvailabilityZone(v string) *DBInstance {
	s.SecondaryAvailabilityZone = &v
	return s
}

// SetStatusInfos sets the StatusInfos field's value.
func (s *DBInstance) SetStatusInfos(v []*DBInstanceStatusInfo) *DBInstance {
	s.StatusInfos = v
	return s
}

// SetVpcSecurityGroups sets the VpcSecurityGroups field's value.
func (s *DBInstance) SetVpcSecurityGroups(v []*VpcSecurityGroup) *DBInstance {
	s.VpcSecurityGroups = v
	return s
}

type DBInstanceStatusInfo struct {
	_ struct{} `type:"structure"`

	Message *string `type:"string"`

	Normal *bool `type:"boolean"`

	Status *string `type:"string"`

	StatusType *string `type:"string"`
}

// String returns the string representation
func (s DBInstanceStatusInfo) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DBInstanceStatusInfo) GoString() string {
	return s.String()
}

// SetMessage sets the Message field's value.
func (s *DBInstanceStatusInfo) SetMessage(v string) *DBInstanceStatusInfo {
	s.Message = &v
	return s
}

// SetNormal sets the Normal field's value.
func (s *DBInstanceStatusInfo) SetNormal(v bool) *DBInstanceStatusInfo {
	s.Normal = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DBInstanceStatusInfo) SetStatus(v string) *DBInstanceStatusInfo {
	s.Status = &v
	return s
}

// SetStatusType sets the StatusType field's value.
func (s *DBInstanceStatusInfo) SetStatusType(v string) *DBInstanceStatusInfo {
	s.StatusType = &v
	return s
}

type DBParameterGroup struct {
	_ struct{} `type:"structure"`

	DBParameterGroupFamily *string `type:"string"`

	DBParameterGroupName *string `type:"string"`

	Description *string `type:"string"`
}

// String returns the string representation
func (s DBParameterGroup) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DBParameterGroup) GoString() string {
	return s.String()
}

// SetDBParameterGroupFamily sets the DBParameterGroupFamily field's value.
func (s *DBParameterGroup) SetDBParameterGroupFamily(v string) *DBParameterGroup {
	s.DBParameterGroupFamily = &v
	return s
}

// SetDBParameterGroupName sets the DBParameterGroupName field's value.
func (s *DBParameterGroup) SetDBParameterGroupName(v string) *DBParameterGroup {
	s.DBParameterGroupName = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *DBParameterGroup) SetDescription(v string) *DBParameterGroup {
	s.Description = &v
	return s
}

type DBSecurityGroup struct {
	_ struct{} `type:"structure"`

	DBSecurityGroupDescription *string `type:"string"`

	DBSecurityGroupName *string `type:"string"`

	EC2SecurityGroups []*EC2SecurityGroup `locationNameList:"EC2SecurityGroup" type:"list"`

	IPRanges []*IPRange `locationNameList:"IPRange" type:"list"`

	NiftyAvailabilityZone *string `type:"string"`

	OwnerId *string `type:"string"`
}

// String returns the string representation
func (s DBSecurityGroup) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DBSecurityGroup) GoString() string {
	return s.String()
}

// SetDBSecurityGroupDescription sets the DBSecurityGroupDescription field's value.
func (s *DBSecurityGroup) SetDBSecurityGroupDescription(v string) *DBSecurityGroup {
	s.DBSecurityGroupDescription = &v
	return s
}

// SetDBSecurityGroupName sets the DBSecurityGroupName field's value.
func (s *DBSecurityGroup) SetDBSecurityGroupName(v string) *DBSecurityGroup {
	s.DBSecurityGroupName = &v
	return s
}

// SetEC2SecurityGroups sets the EC2SecurityGroups field's value.
func (s *DBSecurityGroup) SetEC2SecurityGroups(v []*EC2SecurityGroup) *DBSecurityGroup {
	s.EC2SecurityGroups = v
	return s
}

// SetIPRanges sets the IPRanges field's value.
func (s *DBSecurityGroup) SetIPRanges(v []*IPRange) *DBSecurityGroup {
	s.IPRanges = v
	return s
}

// SetNiftyAvailabilityZone sets the NiftyAvailabilityZone field's value.
func (s *DBSecurityGroup) SetNiftyAvailabilityZone(v string) *DBSecurityGroup {
	s.NiftyAvailabilityZone = &v
	return s
}

// SetOwnerId sets the OwnerId field's value.
func (s *DBSecurityGroup) SetOwnerId(v string) *DBSecurityGroup {
	s.OwnerId = &v
	return s
}

type DBSnapshot struct {
	_ struct{} `type:"structure"`

	AllocatedStorage *string `type:"string"`

	AvailabilityZone *string `type:"string"`

	DBInstanceIdentifier *string `type:"string"`

	DBSnapshotIdentifier *string `type:"string"`

	Engine *string `type:"string"`

	EngineVersion *string `type:"string"`

	InstanceCreateTime *string `type:"string"`

	LicenseModel *string `type:"string"`

	MasterUsername *string `type:"string"`

	OptionGroupName *string `type:"string"`

	Port *string `type:"string"`

	SnapshotCreateTime *string `type:"string"`

	SnapshotType *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s DBSnapshot) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DBSnapshot) GoString() string {
	return s.String()
}

// SetAllocatedStorage sets the AllocatedStorage field's value.
func (s *DBSnapshot) SetAllocatedStorage(v string) *DBSnapshot {
	s.AllocatedStorage = &v
	return s
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *DBSnapshot) SetAvailabilityZone(v string) *DBSnapshot {
	s.AvailabilityZone = &v
	return s
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *DBSnapshot) SetDBInstanceIdentifier(v string) *DBSnapshot {
	s.DBInstanceIdentifier = &v
	return s
}

// SetDBSnapshotIdentifier sets the DBSnapshotIdentifier field's value.
func (s *DBSnapshot) SetDBSnapshotIdentifier(v string) *DBSnapshot {
	s.DBSnapshotIdentifier = &v
	return s
}

// SetEngine sets the Engine field's value.
func (s *DBSnapshot) SetEngine(v string) *DBSnapshot {
	s.Engine = &v
	return s
}

// SetEngineVersion sets the EngineVersion field's value.
func (s *DBSnapshot) SetEngineVersion(v string) *DBSnapshot {
	s.EngineVersion = &v
	return s
}

// SetInstanceCreateTime sets the InstanceCreateTime field's value.
func (s *DBSnapshot) SetInstanceCreateTime(v string) *DBSnapshot {
	s.InstanceCreateTime = &v
	return s
}

// SetLicenseModel sets the LicenseModel field's value.
func (s *DBSnapshot) SetLicenseModel(v string) *DBSnapshot {
	s.LicenseModel = &v
	return s
}

// SetMasterUsername sets the MasterUsername field's value.
func (s *DBSnapshot) SetMasterUsername(v string) *DBSnapshot {
	s.MasterUsername = &v
	return s
}

// SetOptionGroupName sets the OptionGroupName field's value.
func (s *DBSnapshot) SetOptionGroupName(v string) *DBSnapshot {
	s.OptionGroupName = &v
	return s
}

// SetPort sets the Port field's value.
func (s *DBSnapshot) SetPort(v string) *DBSnapshot {
	s.Port = &v
	return s
}

// SetSnapshotCreateTime sets the SnapshotCreateTime field's value.
func (s *DBSnapshot) SetSnapshotCreateTime(v string) *DBSnapshot {
	s.SnapshotCreateTime = &v
	return s
}

// SetSnapshotType sets the SnapshotType field's value.
func (s *DBSnapshot) SetSnapshotType(v string) *DBSnapshot {
	s.SnapshotType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *DBSnapshot) SetStatus(v string) *DBSnapshot {
	s.Status = &v
	return s
}

type DeleteDBInstanceInput struct {
	_ struct{} `type:"structure"`

	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string"`

	FinalDBSnapshotIdentifier *string `locationName:"FinalDBSnapshotIdentifier" type:"string"`

	SkipFinalSnapshot *bool `locationName:"SkipFinalSnapshot" type:"boolean"`
}

// String returns the string representation
func (s DeleteDBInstanceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBInstanceInput) GoString() string {
	return s.String()
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *DeleteDBInstanceInput) SetDBInstanceIdentifier(v string) *DeleteDBInstanceInput {
	s.DBInstanceIdentifier = &v
	return s
}

// SetFinalDBSnapshotIdentifier sets the FinalDBSnapshotIdentifier field's value.
func (s *DeleteDBInstanceInput) SetFinalDBSnapshotIdentifier(v string) *DeleteDBInstanceInput {
	s.FinalDBSnapshotIdentifier = &v
	return s
}

// SetSkipFinalSnapshot sets the SkipFinalSnapshot field's value.
func (s *DeleteDBInstanceInput) SetSkipFinalSnapshot(v bool) *DeleteDBInstanceInput {
	s.SkipFinalSnapshot = &v
	return s
}

type DeleteDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	DBInstance *DBInstance `type:"structure"`
}

// String returns the string representation
func (s DeleteDBInstanceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBInstanceOutput) GoString() string {
	return s.String()
}

// SetDBInstance sets the DBInstance field's value.
func (s *DeleteDBInstanceOutput) SetDBInstance(v *DBInstance) *DeleteDBInstanceOutput {
	s.DBInstance = v
	return s
}

type DeleteDBParameterGroupInput struct {
	_ struct{} `type:"structure"`

	DBParameterGroupName *string `locationName:"DBParameterGroupName" type:"string"`
}

// String returns the string representation
func (s DeleteDBParameterGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBParameterGroupInput) GoString() string {
	return s.String()
}

// SetDBParameterGroupName sets the DBParameterGroupName field's value.
func (s *DeleteDBParameterGroupInput) SetDBParameterGroupName(v string) *DeleteDBParameterGroupInput {
	s.DBParameterGroupName = &v
	return s
}

type DeleteDBParameterGroupOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteDBParameterGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBParameterGroupOutput) GoString() string {
	return s.String()
}

type DeleteDBSecurityGroupInput struct {
	_ struct{} `type:"structure"`

	DBSecurityGroupName *string `locationName:"DBSecurityGroupName" type:"string"`
}

// String returns the string representation
func (s DeleteDBSecurityGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBSecurityGroupInput) GoString() string {
	return s.String()
}

// SetDBSecurityGroupName sets the DBSecurityGroupName field's value.
func (s *DeleteDBSecurityGroupInput) SetDBSecurityGroupName(v string) *DeleteDBSecurityGroupInput {
	s.DBSecurityGroupName = &v
	return s
}

type DeleteDBSecurityGroupOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteDBSecurityGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBSecurityGroupOutput) GoString() string {
	return s.String()
}

type DeleteDBSnapshotInput struct {
	_ struct{} `type:"structure"`

	DBSnapshotIdentifier *string `locationName:"DBSnapshotIdentifier" type:"string"`
}

// String returns the string representation
func (s DeleteDBSnapshotInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBSnapshotInput) GoString() string {
	return s.String()
}

// SetDBSnapshotIdentifier sets the DBSnapshotIdentifier field's value.
func (s *DeleteDBSnapshotInput) SetDBSnapshotIdentifier(v string) *DeleteDBSnapshotInput {
	s.DBSnapshotIdentifier = &v
	return s
}

type DeleteDBSnapshotOutput struct {
	_ struct{} `type:"structure"`

	DBSnapshot *DBSnapshot `type:"structure"`
}

// String returns the string representation
func (s DeleteDBSnapshotOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteDBSnapshotOutput) GoString() string {
	return s.String()
}

// SetDBSnapshot sets the DBSnapshot field's value.
func (s *DeleteDBSnapshotOutput) SetDBSnapshot(v *DBSnapshot) *DeleteDBSnapshotOutput {
	s.DBSnapshot = v
	return s
}

type DeleteEventSubscriptionInput struct {
	_ struct{} `type:"structure"`

	SubscriptionName *string `locationName:"SubscriptionName" type:"string"`
}

// String returns the string representation
func (s DeleteEventSubscriptionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteEventSubscriptionInput) GoString() string {
	return s.String()
}

// SetSubscriptionName sets the SubscriptionName field's value.
func (s *DeleteEventSubscriptionInput) SetSubscriptionName(v string) *DeleteEventSubscriptionInput {
	s.SubscriptionName = &v
	return s
}

type DeleteEventSubscriptionOutput struct {
	_ struct{} `type:"structure"`

	EventSubscription *EventSubscription `type:"structure"`
}

// String returns the string representation
func (s DeleteEventSubscriptionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteEventSubscriptionOutput) GoString() string {
	return s.String()
}

// SetEventSubscription sets the EventSubscription field's value.
func (s *DeleteEventSubscriptionOutput) SetEventSubscription(v *EventSubscription) *DeleteEventSubscriptionOutput {
	s.EventSubscription = v
	return s
}

type DescribeDBEngineVersionsInput struct {
	_ struct{} `type:"structure"`

	DBParameterGroupFamily *string `locationName:"DBParameterGroupFamily" type:"string"`

	DefaultOnly *bool `locationName:"DefaultOnly" type:"boolean"`

	Engine *string `locationName:"Engine" type:"string"`

	EngineVersion *string `locationName:"EngineVersion" type:"string"`

	Marker *string `locationName:"Marker" type:"string"`

	MaxRecords *int64 `locationName:"MaxRecords" type:"integer"`
}

// String returns the string representation
func (s DescribeDBEngineVersionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBEngineVersionsInput) GoString() string {
	return s.String()
}

// SetDBParameterGroupFamily sets the DBParameterGroupFamily field's value.
func (s *DescribeDBEngineVersionsInput) SetDBParameterGroupFamily(v string) *DescribeDBEngineVersionsInput {
	s.DBParameterGroupFamily = &v
	return s
}

// SetDefaultOnly sets the DefaultOnly field's value.
func (s *DescribeDBEngineVersionsInput) SetDefaultOnly(v bool) *DescribeDBEngineVersionsInput {
	s.DefaultOnly = &v
	return s
}

// SetEngine sets the Engine field's value.
func (s *DescribeDBEngineVersionsInput) SetEngine(v string) *DescribeDBEngineVersionsInput {
	s.Engine = &v
	return s
}

// SetEngineVersion sets the EngineVersion field's value.
func (s *DescribeDBEngineVersionsInput) SetEngineVersion(v string) *DescribeDBEngineVersionsInput {
	s.EngineVersion = &v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBEngineVersionsInput) SetMarker(v string) *DescribeDBEngineVersionsInput {
	s.Marker = &v
	return s
}

// SetMaxRecords sets the MaxRecords field's value.
func (s *DescribeDBEngineVersionsInput) SetMaxRecords(v int64) *DescribeDBEngineVersionsInput {
	s.MaxRecords = &v
	return s
}

type DescribeDBEngineVersionsOutput struct {
	_ struct{} `type:"structure"`

	DBEngineVersions []*DBEngineVersion `locationNameList:"DBEngineVersion" type:"list"`

	Marker *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBEngineVersionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBEngineVersionsOutput) GoString() string {
	return s.String()
}

// SetDBEngineVersions sets the DBEngineVersions field's value.
func (s *DescribeDBEngineVersionsOutput) SetDBEngineVersions(v []*DBEngineVersion) *DescribeDBEngineVersionsOutput {
	s.DBEngineVersions = v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBEngineVersionsOutput) SetMarker(v string) *DescribeDBEngineVersionsOutput {
	s.Marker = &v
	return s
}

type DescribeDBInstancesInput struct {
	_ struct{} `type:"structure"`

	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string"`

	Marker *string `locationName:"Marker" type:"string"`

	MaxRecords *int64 `locationName:"MaxRecords" type:"integer"`
}

// String returns the string representation
func (s DescribeDBInstancesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstancesInput) GoString() string {
	return s.String()
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *DescribeDBInstancesInput) SetDBInstanceIdentifier(v string) *DescribeDBInstancesInput {
	s.DBInstanceIdentifier = &v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBInstancesInput) SetMarker(v string) *DescribeDBInstancesInput {
	s.Marker = &v
	return s
}

// SetMaxRecords sets the MaxRecords field's value.
func (s *DescribeDBInstancesInput) SetMaxRecords(v int64) *DescribeDBInstancesInput {
	s.MaxRecords = &v
	return s
}

type DescribeDBInstancesOutput struct {
	_ struct{} `type:"structure"`

	DBInstances []*DBInstance `locationNameList:"DBInstance" type:"list"`

	Marker *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBInstancesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBInstancesOutput) GoString() string {
	return s.String()
}

// SetDBInstances sets the DBInstances field's value.
func (s *DescribeDBInstancesOutput) SetDBInstances(v []*DBInstance) *DescribeDBInstancesOutput {
	s.DBInstances = v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBInstancesOutput) SetMarker(v string) *DescribeDBInstancesOutput {
	s.Marker = &v
	return s
}

type DescribeDBLogFilesDetails struct {
	_ struct{} `type:"structure"`

	LastWritten *string `type:"string"`

	LogFileName *string `type:"string"`

	Size *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBLogFilesDetails) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBLogFilesDetails) GoString() string {
	return s.String()
}

// SetLastWritten sets the LastWritten field's value.
func (s *DescribeDBLogFilesDetails) SetLastWritten(v string) *DescribeDBLogFilesDetails {
	s.LastWritten = &v
	return s
}

// SetLogFileName sets the LogFileName field's value.
func (s *DescribeDBLogFilesDetails) SetLogFileName(v string) *DescribeDBLogFilesDetails {
	s.LogFileName = &v
	return s
}

// SetSize sets the Size field's value.
func (s *DescribeDBLogFilesDetails) SetSize(v string) *DescribeDBLogFilesDetails {
	s.Size = &v
	return s
}

type DescribeDBLogFilesInput struct {
	_ struct{} `type:"structure"`

	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string"`

	FileLastWritten *int64 `locationName:"FileLastWritten" type:"integer"`

	FileSize *int64 `locationName:"FileSize" type:"integer"`

	FilenameContains *string `locationName:"FilenameContains" type:"string"`

	Marker *string `locationName:"Marker" type:"string"`

	MaxRecords *int64 `locationName:"MaxRecords" type:"integer"`
}

// String returns the string representation
func (s DescribeDBLogFilesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBLogFilesInput) GoString() string {
	return s.String()
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *DescribeDBLogFilesInput) SetDBInstanceIdentifier(v string) *DescribeDBLogFilesInput {
	s.DBInstanceIdentifier = &v
	return s
}

// SetFileLastWritten sets the FileLastWritten field's value.
func (s *DescribeDBLogFilesInput) SetFileLastWritten(v int64) *DescribeDBLogFilesInput {
	s.FileLastWritten = &v
	return s
}

// SetFileSize sets the FileSize field's value.
func (s *DescribeDBLogFilesInput) SetFileSize(v int64) *DescribeDBLogFilesInput {
	s.FileSize = &v
	return s
}

// SetFilenameContains sets the FilenameContains field's value.
func (s *DescribeDBLogFilesInput) SetFilenameContains(v string) *DescribeDBLogFilesInput {
	s.FilenameContains = &v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBLogFilesInput) SetMarker(v string) *DescribeDBLogFilesInput {
	s.Marker = &v
	return s
}

// SetMaxRecords sets the MaxRecords field's value.
func (s *DescribeDBLogFilesInput) SetMaxRecords(v int64) *DescribeDBLogFilesInput {
	s.MaxRecords = &v
	return s
}

type DescribeDBLogFilesOutput struct {
	_ struct{} `type:"structure"`

	DescribeDBLogFiles []*DescribeDBLogFilesDetails `locationNameList:"DescribeDBLogFilesDetails" type:"list"`

	Marker *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBLogFilesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBLogFilesOutput) GoString() string {
	return s.String()
}

// SetDescribeDBLogFiles sets the DescribeDBLogFiles field's value.
func (s *DescribeDBLogFilesOutput) SetDescribeDBLogFiles(v []*DescribeDBLogFilesDetails) *DescribeDBLogFilesOutput {
	s.DescribeDBLogFiles = v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBLogFilesOutput) SetMarker(v string) *DescribeDBLogFilesOutput {
	s.Marker = &v
	return s
}

type DescribeDBParameterGroupsInput struct {
	_ struct{} `type:"structure"`

	DBParameterGroupName *string `locationName:"DBParameterGroupName" type:"string"`

	Marker *string `locationName:"Marker" type:"string"`

	MaxRecords *int64 `locationName:"MaxRecords" type:"integer"`
}

// String returns the string representation
func (s DescribeDBParameterGroupsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBParameterGroupsInput) GoString() string {
	return s.String()
}

// SetDBParameterGroupName sets the DBParameterGroupName field's value.
func (s *DescribeDBParameterGroupsInput) SetDBParameterGroupName(v string) *DescribeDBParameterGroupsInput {
	s.DBParameterGroupName = &v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBParameterGroupsInput) SetMarker(v string) *DescribeDBParameterGroupsInput {
	s.Marker = &v
	return s
}

// SetMaxRecords sets the MaxRecords field's value.
func (s *DescribeDBParameterGroupsInput) SetMaxRecords(v int64) *DescribeDBParameterGroupsInput {
	s.MaxRecords = &v
	return s
}

type DescribeDBParameterGroupsOutput struct {
	_ struct{} `type:"structure"`

	DBParameterGroups []*DBParameterGroup `locationNameList:"DBParameterGroup" type:"list"`

	Marker *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBParameterGroupsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBParameterGroupsOutput) GoString() string {
	return s.String()
}

// SetDBParameterGroups sets the DBParameterGroups field's value.
func (s *DescribeDBParameterGroupsOutput) SetDBParameterGroups(v []*DBParameterGroup) *DescribeDBParameterGroupsOutput {
	s.DBParameterGroups = v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBParameterGroupsOutput) SetMarker(v string) *DescribeDBParameterGroupsOutput {
	s.Marker = &v
	return s
}

type DescribeDBParametersInput struct {
	_ struct{} `type:"structure"`

	DBParameterGroupName *string `locationName:"DBParameterGroupName" type:"string"`

	Marker *string `locationName:"Marker" type:"string"`

	MaxRecords *int64 `locationName:"MaxRecords" type:"integer"`

	Source *string `locationName:"Source" type:"string"`
}

// String returns the string representation
func (s DescribeDBParametersInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBParametersInput) GoString() string {
	return s.String()
}

// SetDBParameterGroupName sets the DBParameterGroupName field's value.
func (s *DescribeDBParametersInput) SetDBParameterGroupName(v string) *DescribeDBParametersInput {
	s.DBParameterGroupName = &v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBParametersInput) SetMarker(v string) *DescribeDBParametersInput {
	s.Marker = &v
	return s
}

// SetMaxRecords sets the MaxRecords field's value.
func (s *DescribeDBParametersInput) SetMaxRecords(v int64) *DescribeDBParametersInput {
	s.MaxRecords = &v
	return s
}

// SetSource sets the Source field's value.
func (s *DescribeDBParametersInput) SetSource(v string) *DescribeDBParametersInput {
	s.Source = &v
	return s
}

type DescribeDBParametersOutput struct {
	_ struct{} `type:"structure"`

	Marker *string `type:"string"`

	Parameters []*Parameter `locationNameList:"Parameter" type:"list"`
}

// String returns the string representation
func (s DescribeDBParametersOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBParametersOutput) GoString() string {
	return s.String()
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBParametersOutput) SetMarker(v string) *DescribeDBParametersOutput {
	s.Marker = &v
	return s
}

// SetParameters sets the Parameters field's value.
func (s *DescribeDBParametersOutput) SetParameters(v []*Parameter) *DescribeDBParametersOutput {
	s.Parameters = v
	return s
}

type DescribeDBSecurityGroupsInput struct {
	_ struct{} `type:"structure"`

	DBSecurityGroupName *string `locationName:"DBSecurityGroupName" type:"string"`

	Marker *string `locationName:"Marker" type:"string"`

	MaxRecords *int64 `locationName:"MaxRecords" type:"integer"`
}

// String returns the string representation
func (s DescribeDBSecurityGroupsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBSecurityGroupsInput) GoString() string {
	return s.String()
}

// SetDBSecurityGroupName sets the DBSecurityGroupName field's value.
func (s *DescribeDBSecurityGroupsInput) SetDBSecurityGroupName(v string) *DescribeDBSecurityGroupsInput {
	s.DBSecurityGroupName = &v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBSecurityGroupsInput) SetMarker(v string) *DescribeDBSecurityGroupsInput {
	s.Marker = &v
	return s
}

// SetMaxRecords sets the MaxRecords field's value.
func (s *DescribeDBSecurityGroupsInput) SetMaxRecords(v int64) *DescribeDBSecurityGroupsInput {
	s.MaxRecords = &v
	return s
}

type DescribeDBSecurityGroupsOutput struct {
	_ struct{} `type:"structure"`

	DBSecurityGroups []*DBSecurityGroup `locationNameList:"DBSecurityGroup" type:"list"`

	Marker *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBSecurityGroupsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBSecurityGroupsOutput) GoString() string {
	return s.String()
}

// SetDBSecurityGroups sets the DBSecurityGroups field's value.
func (s *DescribeDBSecurityGroupsOutput) SetDBSecurityGroups(v []*DBSecurityGroup) *DescribeDBSecurityGroupsOutput {
	s.DBSecurityGroups = v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBSecurityGroupsOutput) SetMarker(v string) *DescribeDBSecurityGroupsOutput {
	s.Marker = &v
	return s
}

type DescribeDBSnapshotsInput struct {
	_ struct{} `type:"structure"`

	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string"`

	DBSnapshotIdentifier *string `locationName:"DBSnapshotIdentifier" type:"string"`

	Marker *string `locationName:"Marker" type:"string"`

	MaxRecords *int64 `locationName:"MaxRecords" type:"integer"`

	SnapshotType *string `locationName:"SnapshotType" type:"string"`
}

// String returns the string representation
func (s DescribeDBSnapshotsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBSnapshotsInput) GoString() string {
	return s.String()
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *DescribeDBSnapshotsInput) SetDBInstanceIdentifier(v string) *DescribeDBSnapshotsInput {
	s.DBInstanceIdentifier = &v
	return s
}

// SetDBSnapshotIdentifier sets the DBSnapshotIdentifier field's value.
func (s *DescribeDBSnapshotsInput) SetDBSnapshotIdentifier(v string) *DescribeDBSnapshotsInput {
	s.DBSnapshotIdentifier = &v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBSnapshotsInput) SetMarker(v string) *DescribeDBSnapshotsInput {
	s.Marker = &v
	return s
}

// SetMaxRecords sets the MaxRecords field's value.
func (s *DescribeDBSnapshotsInput) SetMaxRecords(v int64) *DescribeDBSnapshotsInput {
	s.MaxRecords = &v
	return s
}

// SetSnapshotType sets the SnapshotType field's value.
func (s *DescribeDBSnapshotsInput) SetSnapshotType(v string) *DescribeDBSnapshotsInput {
	s.SnapshotType = &v
	return s
}

type DescribeDBSnapshotsOutput struct {
	_ struct{} `type:"structure"`

	DBSnapshots []*DBSnapshot `locationNameList:"DBSnapshot" type:"list"`

	Marker *string `type:"string"`
}

// String returns the string representation
func (s DescribeDBSnapshotsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeDBSnapshotsOutput) GoString() string {
	return s.String()
}

// SetDBSnapshots sets the DBSnapshots field's value.
func (s *DescribeDBSnapshotsOutput) SetDBSnapshots(v []*DBSnapshot) *DescribeDBSnapshotsOutput {
	s.DBSnapshots = v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeDBSnapshotsOutput) SetMarker(v string) *DescribeDBSnapshotsOutput {
	s.Marker = &v
	return s
}

type DescribeEngineDefaultParametersInput struct {
	_ struct{} `type:"structure"`

	DBParameterGroupFamily *string `locationName:"DBParameterGroupFamily" type:"string"`

	Marker *string `locationName:"Marker" type:"string"`

	MaxRecords *int64 `locationName:"MaxRecords" type:"integer"`
}

// String returns the string representation
func (s DescribeEngineDefaultParametersInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEngineDefaultParametersInput) GoString() string {
	return s.String()
}

// SetDBParameterGroupFamily sets the DBParameterGroupFamily field's value.
func (s *DescribeEngineDefaultParametersInput) SetDBParameterGroupFamily(v string) *DescribeEngineDefaultParametersInput {
	s.DBParameterGroupFamily = &v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeEngineDefaultParametersInput) SetMarker(v string) *DescribeEngineDefaultParametersInput {
	s.Marker = &v
	return s
}

// SetMaxRecords sets the MaxRecords field's value.
func (s *DescribeEngineDefaultParametersInput) SetMaxRecords(v int64) *DescribeEngineDefaultParametersInput {
	s.MaxRecords = &v
	return s
}

type DescribeEngineDefaultParametersOutput struct {
	_ struct{} `type:"structure"`

	EngineDefaults *EngineDefaults `type:"structure"`
}

// String returns the string representation
func (s DescribeEngineDefaultParametersOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEngineDefaultParametersOutput) GoString() string {
	return s.String()
}

// SetEngineDefaults sets the EngineDefaults field's value.
func (s *DescribeEngineDefaultParametersOutput) SetEngineDefaults(v *EngineDefaults) *DescribeEngineDefaultParametersOutput {
	s.EngineDefaults = v
	return s
}

type DescribeEventCategoriesInput struct {
	_ struct{} `type:"structure"`

	SourceType *string `locationName:"SourceType" type:"string"`
}

// String returns the string representation
func (s DescribeEventCategoriesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventCategoriesInput) GoString() string {
	return s.String()
}

// SetSourceType sets the SourceType field's value.
func (s *DescribeEventCategoriesInput) SetSourceType(v string) *DescribeEventCategoriesInput {
	s.SourceType = &v
	return s
}

type DescribeEventCategoriesOutput struct {
	_ struct{} `type:"structure"`

	EventCategoriesMapList []*EventCategoriesMap `locationNameList:"EventCategoriesMap" type:"list"`
}

// String returns the string representation
func (s DescribeEventCategoriesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventCategoriesOutput) GoString() string {
	return s.String()
}

// SetEventCategoriesMapList sets the EventCategoriesMapList field's value.
func (s *DescribeEventCategoriesOutput) SetEventCategoriesMapList(v []*EventCategoriesMap) *DescribeEventCategoriesOutput {
	s.EventCategoriesMapList = v
	return s
}

type DescribeEventSubscriptionsInput struct {
	_ struct{} `type:"structure"`

	Marker *string `locationName:"Marker" type:"string"`

	MaxRecords *int64 `locationName:"MaxRecords" type:"integer"`

	SubscriptionName *string `locationName:"SubscriptionName" type:"string"`
}

// String returns the string representation
func (s DescribeEventSubscriptionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventSubscriptionsInput) GoString() string {
	return s.String()
}

// SetMarker sets the Marker field's value.
func (s *DescribeEventSubscriptionsInput) SetMarker(v string) *DescribeEventSubscriptionsInput {
	s.Marker = &v
	return s
}

// SetMaxRecords sets the MaxRecords field's value.
func (s *DescribeEventSubscriptionsInput) SetMaxRecords(v int64) *DescribeEventSubscriptionsInput {
	s.MaxRecords = &v
	return s
}

// SetSubscriptionName sets the SubscriptionName field's value.
func (s *DescribeEventSubscriptionsInput) SetSubscriptionName(v string) *DescribeEventSubscriptionsInput {
	s.SubscriptionName = &v
	return s
}

type DescribeEventSubscriptionsOutput struct {
	_ struct{} `type:"structure"`

	EventSubscriptionsList []*EventSubscription `locationNameList:"EventSubscription" type:"list"`

	Marker *string `type:"string"`
}

// String returns the string representation
func (s DescribeEventSubscriptionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventSubscriptionsOutput) GoString() string {
	return s.String()
}

// SetEventSubscriptionsList sets the EventSubscriptionsList field's value.
func (s *DescribeEventSubscriptionsOutput) SetEventSubscriptionsList(v []*EventSubscription) *DescribeEventSubscriptionsOutput {
	s.EventSubscriptionsList = v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeEventSubscriptionsOutput) SetMarker(v string) *DescribeEventSubscriptionsOutput {
	s.Marker = &v
	return s
}

type DescribeEventsInput struct {
	_ struct{} `type:"structure"`

	Duration *int64 `locationName:"Duration" type:"integer"`

	EndTime *time.Time `locationName:"EndTime" type:"timestamp" timestampFormat:"iso8601"`

	EventCategories []*string `locationName:"EventCategories" locationNameList:"member" type:"list"`

	Marker *string `locationName:"Marker" type:"string"`

	MaxRecords *int64 `locationName:"MaxRecords" type:"integer"`

	SourceIdentifier *string `locationName:"SourceIdentifier" type:"string"`

	SourceType *string `locationName:"SourceType" type:"string"`

	StartTime *time.Time `locationName:"StartTime" type:"timestamp" timestampFormat:"iso8601"`
}

// String returns the string representation
func (s DescribeEventsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventsInput) GoString() string {
	return s.String()
}

// SetDuration sets the Duration field's value.
func (s *DescribeEventsInput) SetDuration(v int64) *DescribeEventsInput {
	s.Duration = &v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *DescribeEventsInput) SetEndTime(v time.Time) *DescribeEventsInput {
	s.EndTime = &v
	return s
}

// SetEventCategories sets the EventCategories field's value.
func (s *DescribeEventsInput) SetEventCategories(v []*string) *DescribeEventsInput {
	s.EventCategories = v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeEventsInput) SetMarker(v string) *DescribeEventsInput {
	s.Marker = &v
	return s
}

// SetMaxRecords sets the MaxRecords field's value.
func (s *DescribeEventsInput) SetMaxRecords(v int64) *DescribeEventsInput {
	s.MaxRecords = &v
	return s
}

// SetSourceIdentifier sets the SourceIdentifier field's value.
func (s *DescribeEventsInput) SetSourceIdentifier(v string) *DescribeEventsInput {
	s.SourceIdentifier = &v
	return s
}

// SetSourceType sets the SourceType field's value.
func (s *DescribeEventsInput) SetSourceType(v string) *DescribeEventsInput {
	s.SourceType = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *DescribeEventsInput) SetStartTime(v time.Time) *DescribeEventsInput {
	s.StartTime = &v
	return s
}

type DescribeEventsOutput struct {
	_ struct{} `type:"structure"`

	Events []*Event `locationNameList:"Event" type:"list"`

	Marker *string `type:"string"`
}

// String returns the string representation
func (s DescribeEventsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeEventsOutput) GoString() string {
	return s.String()
}

// SetEvents sets the Events field's value.
func (s *DescribeEventsOutput) SetEvents(v []*Event) *DescribeEventsOutput {
	s.Events = v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeEventsOutput) SetMarker(v string) *DescribeEventsOutput {
	s.Marker = &v
	return s
}

type DescribeOrderableDBInstanceOptionsInput struct {
	_ struct{} `type:"structure"`

	DBInstanceClass *string `locationName:"DBInstanceClass" type:"string"`

	Engine *string `locationName:"Engine" type:"string"`

	EngineVersion *string `locationName:"EngineVersion" type:"string"`

	LicenseModel *string `locationName:"LicenseModel" type:"string"`

	Marker *string `locationName:"Marker" type:"string"`

	MaxRecords *int64 `locationName:"MaxRecords" type:"integer"`
}

// String returns the string representation
func (s DescribeOrderableDBInstanceOptionsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeOrderableDBInstanceOptionsInput) GoString() string {
	return s.String()
}

// SetDBInstanceClass sets the DBInstanceClass field's value.
func (s *DescribeOrderableDBInstanceOptionsInput) SetDBInstanceClass(v string) *DescribeOrderableDBInstanceOptionsInput {
	s.DBInstanceClass = &v
	return s
}

// SetEngine sets the Engine field's value.
func (s *DescribeOrderableDBInstanceOptionsInput) SetEngine(v string) *DescribeOrderableDBInstanceOptionsInput {
	s.Engine = &v
	return s
}

// SetEngineVersion sets the EngineVersion field's value.
func (s *DescribeOrderableDBInstanceOptionsInput) SetEngineVersion(v string) *DescribeOrderableDBInstanceOptionsInput {
	s.EngineVersion = &v
	return s
}

// SetLicenseModel sets the LicenseModel field's value.
func (s *DescribeOrderableDBInstanceOptionsInput) SetLicenseModel(v string) *DescribeOrderableDBInstanceOptionsInput {
	s.LicenseModel = &v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DescribeOrderableDBInstanceOptionsInput) SetMarker(v string) *DescribeOrderableDBInstanceOptionsInput {
	s.Marker = &v
	return s
}

// SetMaxRecords sets the MaxRecords field's value.
func (s *DescribeOrderableDBInstanceOptionsInput) SetMaxRecords(v int64) *DescribeOrderableDBInstanceOptionsInput {
	s.MaxRecords = &v
	return s
}

type DescribeOrderableDBInstanceOptionsOutput struct {
	_ struct{} `type:"structure"`

	Marker *string `type:"string"`

	OrderableDBInstanceOptions []*OrderableDBInstanceOption `locationNameList:"OrderableDBInstanceOption" type:"list"`
}

// String returns the string representation
func (s DescribeOrderableDBInstanceOptionsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeOrderableDBInstanceOptionsOutput) GoString() string {
	return s.String()
}

// SetMarker sets the Marker field's value.
func (s *DescribeOrderableDBInstanceOptionsOutput) SetMarker(v string) *DescribeOrderableDBInstanceOptionsOutput {
	s.Marker = &v
	return s
}

// SetOrderableDBInstanceOptions sets the OrderableDBInstanceOptions field's value.
func (s *DescribeOrderableDBInstanceOptionsOutput) SetOrderableDBInstanceOptions(v []*OrderableDBInstanceOption) *DescribeOrderableDBInstanceOptionsOutput {
	s.OrderableDBInstanceOptions = v
	return s
}

type DownloadDBLogFilePortionInput struct {
	_ struct{} `type:"structure"`

	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string"`

	LogFileName *string `locationName:"LogFileName" type:"string"`

	Marker *string `locationName:"Marker" type:"string"`

	NumberOfLines *int64 `locationName:"NumberOfLines" type:"integer"`
}

// String returns the string representation
func (s DownloadDBLogFilePortionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DownloadDBLogFilePortionInput) GoString() string {
	return s.String()
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *DownloadDBLogFilePortionInput) SetDBInstanceIdentifier(v string) *DownloadDBLogFilePortionInput {
	s.DBInstanceIdentifier = &v
	return s
}

// SetLogFileName sets the LogFileName field's value.
func (s *DownloadDBLogFilePortionInput) SetLogFileName(v string) *DownloadDBLogFilePortionInput {
	s.LogFileName = &v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DownloadDBLogFilePortionInput) SetMarker(v string) *DownloadDBLogFilePortionInput {
	s.Marker = &v
	return s
}

// SetNumberOfLines sets the NumberOfLines field's value.
func (s *DownloadDBLogFilePortionInput) SetNumberOfLines(v int64) *DownloadDBLogFilePortionInput {
	s.NumberOfLines = &v
	return s
}

type DownloadDBLogFilePortionOutput struct {
	_ struct{} `type:"structure"`

	AdditionalDataPending *bool `type:"boolean"`

	LogFileData *string `type:"string"`

	Marker *string `type:"string"`
}

// String returns the string representation
func (s DownloadDBLogFilePortionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DownloadDBLogFilePortionOutput) GoString() string {
	return s.String()
}

// SetAdditionalDataPending sets the AdditionalDataPending field's value.
func (s *DownloadDBLogFilePortionOutput) SetAdditionalDataPending(v bool) *DownloadDBLogFilePortionOutput {
	s.AdditionalDataPending = &v
	return s
}

// SetLogFileData sets the LogFileData field's value.
func (s *DownloadDBLogFilePortionOutput) SetLogFileData(v string) *DownloadDBLogFilePortionOutput {
	s.LogFileData = &v
	return s
}

// SetMarker sets the Marker field's value.
func (s *DownloadDBLogFilePortionOutput) SetMarker(v string) *DownloadDBLogFilePortionOutput {
	s.Marker = &v
	return s
}

type EC2SecurityGroup struct {
	_ struct{} `type:"structure"`

	EC2SecurityGroupName *string `type:"string"`

	EC2SecurityGroupOwnerId *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s EC2SecurityGroup) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EC2SecurityGroup) GoString() string {
	return s.String()
}

// SetEC2SecurityGroupName sets the EC2SecurityGroupName field's value.
func (s *EC2SecurityGroup) SetEC2SecurityGroupName(v string) *EC2SecurityGroup {
	s.EC2SecurityGroupName = &v
	return s
}

// SetEC2SecurityGroupOwnerId sets the EC2SecurityGroupOwnerId field's value.
func (s *EC2SecurityGroup) SetEC2SecurityGroupOwnerId(v string) *EC2SecurityGroup {
	s.EC2SecurityGroupOwnerId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *EC2SecurityGroup) SetStatus(v string) *EC2SecurityGroup {
	s.Status = &v
	return s
}

type Endpoint struct {
	_ struct{} `type:"structure"`

	Address *string `type:"string"`

	NiftyPrivateAddress *string `type:"string"`

	Port *string `type:"string"`
}

// String returns the string representation
func (s Endpoint) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Endpoint) GoString() string {
	return s.String()
}

// SetAddress sets the Address field's value.
func (s *Endpoint) SetAddress(v string) *Endpoint {
	s.Address = &v
	return s
}

// SetNiftyPrivateAddress sets the NiftyPrivateAddress field's value.
func (s *Endpoint) SetNiftyPrivateAddress(v string) *Endpoint {
	s.NiftyPrivateAddress = &v
	return s
}

// SetPort sets the Port field's value.
func (s *Endpoint) SetPort(v string) *Endpoint {
	s.Port = &v
	return s
}

type EngineDefaults struct {
	_ struct{} `type:"structure"`

	DBParameterGroupFamily *string `type:"string"`

	Marker *string `type:"string"`

	Parameters []*Parameter `locationNameList:"Parameter" type:"list"`
}

// String returns the string representation
func (s EngineDefaults) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EngineDefaults) GoString() string {
	return s.String()
}

// SetDBParameterGroupFamily sets the DBParameterGroupFamily field's value.
func (s *EngineDefaults) SetDBParameterGroupFamily(v string) *EngineDefaults {
	s.DBParameterGroupFamily = &v
	return s
}

// SetMarker sets the Marker field's value.
func (s *EngineDefaults) SetMarker(v string) *EngineDefaults {
	s.Marker = &v
	return s
}

// SetParameters sets the Parameters field's value.
func (s *EngineDefaults) SetParameters(v []*Parameter) *EngineDefaults {
	s.Parameters = v
	return s
}

type Event struct {
	_ struct{} `type:"structure"`

	Date *string `type:"string"`

	EventCategories []*string `type:"list"`

	Message *string `type:"string"`

	SourceIdentifier *string `type:"string"`

	SourceType *string `type:"string"`
}

// String returns the string representation
func (s Event) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Event) GoString() string {
	return s.String()
}

// SetDate sets the Date field's value.
func (s *Event) SetDate(v string) *Event {
	s.Date = &v
	return s
}

// SetEventCategories sets the EventCategories field's value.
func (s *Event) SetEventCategories(v []*string) *Event {
	s.EventCategories = v
	return s
}

// SetMessage sets the Message field's value.
func (s *Event) SetMessage(v string) *Event {
	s.Message = &v
	return s
}

// SetSourceIdentifier sets the SourceIdentifier field's value.
func (s *Event) SetSourceIdentifier(v string) *Event {
	s.SourceIdentifier = &v
	return s
}

// SetSourceType sets the SourceType field's value.
func (s *Event) SetSourceType(v string) *Event {
	s.SourceType = &v
	return s
}

type EventCategoriesMap struct {
	_ struct{} `type:"structure"`

	EventCategories []*string `type:"list"`

	SourceType *string `type:"string"`
}

// String returns the string representation
func (s EventCategoriesMap) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EventCategoriesMap) GoString() string {
	return s.String()
}

// SetEventCategories sets the EventCategories field's value.
func (s *EventCategoriesMap) SetEventCategories(v []*string) *EventCategoriesMap {
	s.EventCategories = v
	return s
}

// SetSourceType sets the SourceType field's value.
func (s *EventCategoriesMap) SetSourceType(v string) *EventCategoriesMap {
	s.SourceType = &v
	return s
}

type EventSubscription struct {
	_ struct{} `type:"structure"`

	CustSubscriptionId *string `type:"string"`

	Enabled *string `type:"string"`

	EventCategoriesList []*string `type:"list"`

	NiftyDescription *string `type:"string"`

	NiftyEmailAddressesList []*string `type:"list"`

	SourceIdsList []*string `type:"list"`

	SourceType *string `type:"string"`

	Status *string `type:"string"`

	SubscriptionCreationTime *string `type:"string"`
}

// String returns the string representation
func (s EventSubscription) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s EventSubscription) GoString() string {
	return s.String()
}

// SetCustSubscriptionId sets the CustSubscriptionId field's value.
func (s *EventSubscription) SetCustSubscriptionId(v string) *EventSubscription {
	s.CustSubscriptionId = &v
	return s
}

// SetEnabled sets the Enabled field's value.
func (s *EventSubscription) SetEnabled(v string) *EventSubscription {
	s.Enabled = &v
	return s
}

// SetEventCategoriesList sets the EventCategoriesList field's value.
func (s *EventSubscription) SetEventCategoriesList(v []*string) *EventSubscription {
	s.EventCategoriesList = v
	return s
}

// SetNiftyDescription sets the NiftyDescription field's value.
func (s *EventSubscription) SetNiftyDescription(v string) *EventSubscription {
	s.NiftyDescription = &v
	return s
}

// SetNiftyEmailAddressesList sets the NiftyEmailAddressesList field's value.
func (s *EventSubscription) SetNiftyEmailAddressesList(v []*string) *EventSubscription {
	s.NiftyEmailAddressesList = v
	return s
}

// SetSourceIdsList sets the SourceIdsList field's value.
func (s *EventSubscription) SetSourceIdsList(v []*string) *EventSubscription {
	s.SourceIdsList = v
	return s
}

// SetSourceType sets the SourceType field's value.
func (s *EventSubscription) SetSourceType(v string) *EventSubscription {
	s.SourceType = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *EventSubscription) SetStatus(v string) *EventSubscription {
	s.Status = &v
	return s
}

// SetSubscriptionCreationTime sets the SubscriptionCreationTime field's value.
func (s *EventSubscription) SetSubscriptionCreationTime(v string) *EventSubscription {
	s.SubscriptionCreationTime = &v
	return s
}

type IPRange struct {
	_ struct{} `type:"structure"`

	CIDRIP *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s IPRange) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s IPRange) GoString() string {
	return s.String()
}

// SetCIDRIP sets the CIDRIP field's value.
func (s *IPRange) SetCIDRIP(v string) *IPRange {
	s.CIDRIP = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *IPRange) SetStatus(v string) *IPRange {
	s.Status = &v
	return s
}

type Member struct {
	_ struct{} `type:"structure"`

	NiftyTargetName *string `type:"string"`

	SampleCount *string `type:"string"`

	Sum *string `type:"string"`

	Timestamp *string `type:"string"`
}

// String returns the string representation
func (s Member) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Member) GoString() string {
	return s.String()
}

// SetNiftyTargetName sets the NiftyTargetName field's value.
func (s *Member) SetNiftyTargetName(v string) *Member {
	s.NiftyTargetName = &v
	return s
}

// SetSampleCount sets the SampleCount field's value.
func (s *Member) SetSampleCount(v string) *Member {
	s.SampleCount = &v
	return s
}

// SetSum sets the Sum field's value.
func (s *Member) SetSum(v string) *Member {
	s.Sum = &v
	return s
}

// SetTimestamp sets the Timestamp field's value.
func (s *Member) SetTimestamp(v string) *Member {
	s.Timestamp = &v
	return s
}

type ModifyDBInstanceInput struct {
	_ struct{} `type:"structure"`

	AllocatedStorage *int64 `locationName:"AllocatedStorage" type:"integer"`

	ApplyImmediately *bool `locationName:"ApplyImmediately" type:"boolean"`

	BackupRetentionPeriod *int64 `locationName:"BackupRetentionPeriod" type:"integer"`

	DBInstanceClass *string `locationName:"DBInstanceClass" type:"string"`

	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string"`

	DBParameterGroupName *string `locationName:"DBParameterGroupName" type:"string"`

	DBSecurityGroups []*string `locationName:"DBSecurityGroups" locationNameList:"member" type:"list"`

	MasterUserPassword *string `locationName:"MasterUserPassword" type:"string"`

	MultiAZ *bool `locationName:"MultiAZ" type:"boolean"`

	NewDBInstanceIdentifier *string `locationName:"NewDBInstanceIdentifier" type:"string"`

	NiftyMultiAZType *int64 `locationName:"NiftyMultiAZType" type:"integer"`

	NiftyReadReplicaDBInstanceIdentifier *string `locationName:"NiftyReadReplicaDBInstanceIdentifier" type:"string"`

	NiftyReadReplicaPrivateAddress *string `locationName:"NiftyReadReplicaPrivateAddress" type:"string"`

	NiftySlavePrivateAddress *string `locationName:"NiftySlavePrivateAddress" type:"string"`

	PreferredBackupWindow *string `locationName:"PreferredBackupWindow" type:"string"`

	PreferredMaintenanceWindow *string `locationName:"PreferredMaintenanceWindow" type:"string"`
}

// String returns the string representation
func (s ModifyDBInstanceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceInput) GoString() string {
	return s.String()
}

// SetAllocatedStorage sets the AllocatedStorage field's value.
func (s *ModifyDBInstanceInput) SetAllocatedStorage(v int64) *ModifyDBInstanceInput {
	s.AllocatedStorage = &v
	return s
}

// SetApplyImmediately sets the ApplyImmediately field's value.
func (s *ModifyDBInstanceInput) SetApplyImmediately(v bool) *ModifyDBInstanceInput {
	s.ApplyImmediately = &v
	return s
}

// SetBackupRetentionPeriod sets the BackupRetentionPeriod field's value.
func (s *ModifyDBInstanceInput) SetBackupRetentionPeriod(v int64) *ModifyDBInstanceInput {
	s.BackupRetentionPeriod = &v
	return s
}

// SetDBInstanceClass sets the DBInstanceClass field's value.
func (s *ModifyDBInstanceInput) SetDBInstanceClass(v string) *ModifyDBInstanceInput {
	s.DBInstanceClass = &v
	return s
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *ModifyDBInstanceInput) SetDBInstanceIdentifier(v string) *ModifyDBInstanceInput {
	s.DBInstanceIdentifier = &v
	return s
}

// SetDBParameterGroupName sets the DBParameterGroupName field's value.
func (s *ModifyDBInstanceInput) SetDBParameterGroupName(v string) *ModifyDBInstanceInput {
	s.DBParameterGroupName = &v
	return s
}

// SetDBSecurityGroups sets the DBSecurityGroups field's value.
func (s *ModifyDBInstanceInput) SetDBSecurityGroups(v []*string) *ModifyDBInstanceInput {
	s.DBSecurityGroups = v
	return s
}

// SetMasterUserPassword sets the MasterUserPassword field's value.
func (s *ModifyDBInstanceInput) SetMasterUserPassword(v string) *ModifyDBInstanceInput {
	s.MasterUserPassword = &v
	return s
}

// SetMultiAZ sets the MultiAZ field's value.
func (s *ModifyDBInstanceInput) SetMultiAZ(v bool) *ModifyDBInstanceInput {
	s.MultiAZ = &v
	return s
}

// SetNewDBInstanceIdentifier sets the NewDBInstanceIdentifier field's value.
func (s *ModifyDBInstanceInput) SetNewDBInstanceIdentifier(v string) *ModifyDBInstanceInput {
	s.NewDBInstanceIdentifier = &v
	return s
}

// SetNiftyMultiAZType sets the NiftyMultiAZType field's value.
func (s *ModifyDBInstanceInput) SetNiftyMultiAZType(v int64) *ModifyDBInstanceInput {
	s.NiftyMultiAZType = &v
	return s
}

// SetNiftyReadReplicaDBInstanceIdentifier sets the NiftyReadReplicaDBInstanceIdentifier field's value.
func (s *ModifyDBInstanceInput) SetNiftyReadReplicaDBInstanceIdentifier(v string) *ModifyDBInstanceInput {
	s.NiftyReadReplicaDBInstanceIdentifier = &v
	return s
}

// SetNiftyReadReplicaPrivateAddress sets the NiftyReadReplicaPrivateAddress field's value.
func (s *ModifyDBInstanceInput) SetNiftyReadReplicaPrivateAddress(v string) *ModifyDBInstanceInput {
	s.NiftyReadReplicaPrivateAddress = &v
	return s
}

// SetNiftySlavePrivateAddress sets the NiftySlavePrivateAddress field's value.
func (s *ModifyDBInstanceInput) SetNiftySlavePrivateAddress(v string) *ModifyDBInstanceInput {
	s.NiftySlavePrivateAddress = &v
	return s
}

// SetPreferredBackupWindow sets the PreferredBackupWindow field's value.
func (s *ModifyDBInstanceInput) SetPreferredBackupWindow(v string) *ModifyDBInstanceInput {
	s.PreferredBackupWindow = &v
	return s
}

// SetPreferredMaintenanceWindow sets the PreferredMaintenanceWindow field's value.
func (s *ModifyDBInstanceInput) SetPreferredMaintenanceWindow(v string) *ModifyDBInstanceInput {
	s.PreferredMaintenanceWindow = &v
	return s
}

type ModifyDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	DBInstance *DBInstance `type:"structure"`
}

// String returns the string representation
func (s ModifyDBInstanceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBInstanceOutput) GoString() string {
	return s.String()
}

// SetDBInstance sets the DBInstance field's value.
func (s *ModifyDBInstanceOutput) SetDBInstance(v *DBInstance) *ModifyDBInstanceOutput {
	s.DBInstance = v
	return s
}

type ModifyDBParameterGroupInput struct {
	_ struct{} `type:"structure"`

	DBParameterGroupName *string `locationName:"DBParameterGroupName" type:"string"`

	Parameters []*RequestParametersStruct `locationName:"Parameters" locationNameList:"member" type:"list"`
}

// String returns the string representation
func (s ModifyDBParameterGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBParameterGroupInput) GoString() string {
	return s.String()
}

// SetDBParameterGroupName sets the DBParameterGroupName field's value.
func (s *ModifyDBParameterGroupInput) SetDBParameterGroupName(v string) *ModifyDBParameterGroupInput {
	s.DBParameterGroupName = &v
	return s
}

// SetParameters sets the Parameters field's value.
func (s *ModifyDBParameterGroupInput) SetParameters(v []*RequestParametersStruct) *ModifyDBParameterGroupInput {
	s.Parameters = v
	return s
}

type ModifyDBParameterGroupOutput struct {
	_ struct{} `type:"structure"`

	DBParameterGroupName *string `type:"string"`
}

// String returns the string representation
func (s ModifyDBParameterGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyDBParameterGroupOutput) GoString() string {
	return s.String()
}

// SetDBParameterGroupName sets the DBParameterGroupName field's value.
func (s *ModifyDBParameterGroupOutput) SetDBParameterGroupName(v string) *ModifyDBParameterGroupOutput {
	s.DBParameterGroupName = &v
	return s
}

type ModifyEventSubscriptionInput struct {
	_ struct{} `type:"structure"`

	Enabled *bool `locationName:"Enabled" type:"boolean"`

	EventCategories []*string `locationName:"EventCategories" locationNameList:"member" type:"list"`

	NiftyDescription *string `locationName:"NiftyDescription" type:"string"`

	NiftyEmailAddresses []*string `locationName:"NiftyEmailAddresses" locationNameList:"member" type:"list"`

	SourceType *string `locationName:"SourceType" type:"string"`

	SubscriptionName *string `locationName:"SubscriptionName" type:"string"`
}

// String returns the string representation
func (s ModifyEventSubscriptionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyEventSubscriptionInput) GoString() string {
	return s.String()
}

// SetEnabled sets the Enabled field's value.
func (s *ModifyEventSubscriptionInput) SetEnabled(v bool) *ModifyEventSubscriptionInput {
	s.Enabled = &v
	return s
}

// SetEventCategories sets the EventCategories field's value.
func (s *ModifyEventSubscriptionInput) SetEventCategories(v []*string) *ModifyEventSubscriptionInput {
	s.EventCategories = v
	return s
}

// SetNiftyDescription sets the NiftyDescription field's value.
func (s *ModifyEventSubscriptionInput) SetNiftyDescription(v string) *ModifyEventSubscriptionInput {
	s.NiftyDescription = &v
	return s
}

// SetNiftyEmailAddresses sets the NiftyEmailAddresses field's value.
func (s *ModifyEventSubscriptionInput) SetNiftyEmailAddresses(v []*string) *ModifyEventSubscriptionInput {
	s.NiftyEmailAddresses = v
	return s
}

// SetSourceType sets the SourceType field's value.
func (s *ModifyEventSubscriptionInput) SetSourceType(v string) *ModifyEventSubscriptionInput {
	s.SourceType = &v
	return s
}

// SetSubscriptionName sets the SubscriptionName field's value.
func (s *ModifyEventSubscriptionInput) SetSubscriptionName(v string) *ModifyEventSubscriptionInput {
	s.SubscriptionName = &v
	return s
}

type ModifyEventSubscriptionOutput struct {
	_ struct{} `type:"structure"`

	EventSubscription *EventSubscription `type:"structure"`
}

// String returns the string representation
func (s ModifyEventSubscriptionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyEventSubscriptionOutput) GoString() string {
	return s.String()
}

// SetEventSubscription sets the EventSubscription field's value.
func (s *ModifyEventSubscriptionOutput) SetEventSubscription(v *EventSubscription) *ModifyEventSubscriptionOutput {
	s.EventSubscription = v
	return s
}

type NiftyFailoverDBInstanceInput struct {
	_ struct{} `type:"structure"`

	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string"`
}

// String returns the string representation
func (s NiftyFailoverDBInstanceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s NiftyFailoverDBInstanceInput) GoString() string {
	return s.String()
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *NiftyFailoverDBInstanceInput) SetDBInstanceIdentifier(v string) *NiftyFailoverDBInstanceInput {
	s.DBInstanceIdentifier = &v
	return s
}

type NiftyFailoverDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	DBInstance *DBInstance `type:"structure"`
}

// String returns the string representation
func (s NiftyFailoverDBInstanceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s NiftyFailoverDBInstanceOutput) GoString() string {
	return s.String()
}

// SetDBInstance sets the DBInstance field's value.
func (s *NiftyFailoverDBInstanceOutput) SetDBInstance(v *DBInstance) *NiftyFailoverDBInstanceOutput {
	s.DBInstance = v
	return s
}

type NiftyGetMetricStatisticsInput struct {
	_ struct{} `type:"structure"`

	Dimensions []*RequestDimensionsStruct `locationName:"Dimensions" locationNameList:"member" type:"list"`

	EndTime *time.Time `locationName:"EndTime" type:"timestamp" timestampFormat:"iso8601"`

	MetricName *string `locationName:"MetricName" type:"string"`

	StartTime *time.Time `locationName:"StartTime" type:"timestamp" timestampFormat:"iso8601"`
}

// String returns the string representation
func (s NiftyGetMetricStatisticsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s NiftyGetMetricStatisticsInput) GoString() string {
	return s.String()
}

// SetDimensions sets the Dimensions field's value.
func (s *NiftyGetMetricStatisticsInput) SetDimensions(v []*RequestDimensionsStruct) *NiftyGetMetricStatisticsInput {
	s.Dimensions = v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *NiftyGetMetricStatisticsInput) SetEndTime(v time.Time) *NiftyGetMetricStatisticsInput {
	s.EndTime = &v
	return s
}

// SetMetricName sets the MetricName field's value.
func (s *NiftyGetMetricStatisticsInput) SetMetricName(v string) *NiftyGetMetricStatisticsInput {
	s.MetricName = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *NiftyGetMetricStatisticsInput) SetStartTime(v time.Time) *NiftyGetMetricStatisticsInput {
	s.StartTime = &v
	return s
}

type NiftyGetMetricStatisticsOutput struct {
	_ struct{} `type:"structure"`

	Datapoints []*Member `locationNameList:"member" type:"list"`

	Label *string `type:"string"`
}

// String returns the string representation
func (s NiftyGetMetricStatisticsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s NiftyGetMetricStatisticsOutput) GoString() string {
	return s.String()
}

// SetDatapoints sets the Datapoints field's value.
func (s *NiftyGetMetricStatisticsOutput) SetDatapoints(v []*Member) *NiftyGetMetricStatisticsOutput {
	s.Datapoints = v
	return s
}

// SetLabel sets the Label field's value.
func (s *NiftyGetMetricStatisticsOutput) SetLabel(v string) *NiftyGetMetricStatisticsOutput {
	s.Label = &v
	return s
}

type OptionGroupMembership struct {
	_ struct{} `type:"structure"`

	OptionGroupName *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s OptionGroupMembership) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OptionGroupMembership) GoString() string {
	return s.String()
}

// SetOptionGroupName sets the OptionGroupName field's value.
func (s *OptionGroupMembership) SetOptionGroupName(v string) *OptionGroupMembership {
	s.OptionGroupName = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *OptionGroupMembership) SetStatus(v string) *OptionGroupMembership {
	s.Status = &v
	return s
}

type OrderableDBInstanceOption struct {
	_ struct{} `type:"structure"`

	AvailabilityZones []*AvailabilityZone `locationNameList:"AvailabilityZone" type:"list"`

	DBInstanceClass *string `type:"string"`

	Engine *string `type:"string"`

	EngineVersion *string `type:"string"`

	LicenseModel *string `type:"string"`

	MultiAZCapable *bool `type:"boolean"`

	ReadReplicaCapable *bool `type:"boolean"`

	Vpc *bool `type:"boolean"`
}

// String returns the string representation
func (s OrderableDBInstanceOption) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s OrderableDBInstanceOption) GoString() string {
	return s.String()
}

// SetAvailabilityZones sets the AvailabilityZones field's value.
func (s *OrderableDBInstanceOption) SetAvailabilityZones(v []*AvailabilityZone) *OrderableDBInstanceOption {
	s.AvailabilityZones = v
	return s
}

// SetDBInstanceClass sets the DBInstanceClass field's value.
func (s *OrderableDBInstanceOption) SetDBInstanceClass(v string) *OrderableDBInstanceOption {
	s.DBInstanceClass = &v
	return s
}

// SetEngine sets the Engine field's value.
func (s *OrderableDBInstanceOption) SetEngine(v string) *OrderableDBInstanceOption {
	s.Engine = &v
	return s
}

// SetEngineVersion sets the EngineVersion field's value.
func (s *OrderableDBInstanceOption) SetEngineVersion(v string) *OrderableDBInstanceOption {
	s.EngineVersion = &v
	return s
}

// SetLicenseModel sets the LicenseModel field's value.
func (s *OrderableDBInstanceOption) SetLicenseModel(v string) *OrderableDBInstanceOption {
	s.LicenseModel = &v
	return s
}

// SetMultiAZCapable sets the MultiAZCapable field's value.
func (s *OrderableDBInstanceOption) SetMultiAZCapable(v bool) *OrderableDBInstanceOption {
	s.MultiAZCapable = &v
	return s
}

// SetReadReplicaCapable sets the ReadReplicaCapable field's value.
func (s *OrderableDBInstanceOption) SetReadReplicaCapable(v bool) *OrderableDBInstanceOption {
	s.ReadReplicaCapable = &v
	return s
}

// SetVpc sets the Vpc field's value.
func (s *OrderableDBInstanceOption) SetVpc(v bool) *OrderableDBInstanceOption {
	s.Vpc = &v
	return s
}

type Parameter struct {
	_ struct{} `type:"structure"`

	AllowedValues *string `type:"string"`

	ApplyMethod *string `type:"string"`

	ApplyType *string `type:"string"`

	DataType *string `type:"string"`

	Description *string `type:"string"`

	IsModifiable *string `type:"string"`

	MinimumEngineVersion *string `type:"string"`

	ParameterName *string `type:"string"`

	ParameterValue *string `type:"string"`

	Source *string `type:"string"`
}

// String returns the string representation
func (s Parameter) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Parameter) GoString() string {
	return s.String()
}

// SetAllowedValues sets the AllowedValues field's value.
func (s *Parameter) SetAllowedValues(v string) *Parameter {
	s.AllowedValues = &v
	return s
}

// SetApplyMethod sets the ApplyMethod field's value.
func (s *Parameter) SetApplyMethod(v string) *Parameter {
	s.ApplyMethod = &v
	return s
}

// SetApplyType sets the ApplyType field's value.
func (s *Parameter) SetApplyType(v string) *Parameter {
	s.ApplyType = &v
	return s
}

// SetDataType sets the DataType field's value.
func (s *Parameter) SetDataType(v string) *Parameter {
	s.DataType = &v
	return s
}

// SetDescription sets the Description field's value.
func (s *Parameter) SetDescription(v string) *Parameter {
	s.Description = &v
	return s
}

// SetIsModifiable sets the IsModifiable field's value.
func (s *Parameter) SetIsModifiable(v string) *Parameter {
	s.IsModifiable = &v
	return s
}

// SetMinimumEngineVersion sets the MinimumEngineVersion field's value.
func (s *Parameter) SetMinimumEngineVersion(v string) *Parameter {
	s.MinimumEngineVersion = &v
	return s
}

// SetParameterName sets the ParameterName field's value.
func (s *Parameter) SetParameterName(v string) *Parameter {
	s.ParameterName = &v
	return s
}

// SetParameterValue sets the ParameterValue field's value.
func (s *Parameter) SetParameterValue(v string) *Parameter {
	s.ParameterValue = &v
	return s
}

// SetSource sets the Source field's value.
func (s *Parameter) SetSource(v string) *Parameter {
	s.Source = &v
	return s
}

type PendingModifiedValues struct {
	_ struct{} `type:"structure"`

	AllocatedStorage *string `type:"string"`

	BackupRetentionPeriod *string `type:"string"`

	DBInstanceClass *string `type:"string"`

	DBInstanceIdentifier *string `type:"string"`

	EngineVersion *string `type:"string"`

	MasterUserPassword *string `type:"string"`

	MultiAZ *string `type:"string"`

	NiftyMultiAZType *string `type:"string"`

	Port *string `type:"string"`
}

// String returns the string representation
func (s PendingModifiedValues) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s PendingModifiedValues) GoString() string {
	return s.String()
}

// SetAllocatedStorage sets the AllocatedStorage field's value.
func (s *PendingModifiedValues) SetAllocatedStorage(v string) *PendingModifiedValues {
	s.AllocatedStorage = &v
	return s
}

// SetBackupRetentionPeriod sets the BackupRetentionPeriod field's value.
func (s *PendingModifiedValues) SetBackupRetentionPeriod(v string) *PendingModifiedValues {
	s.BackupRetentionPeriod = &v
	return s
}

// SetDBInstanceClass sets the DBInstanceClass field's value.
func (s *PendingModifiedValues) SetDBInstanceClass(v string) *PendingModifiedValues {
	s.DBInstanceClass = &v
	return s
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *PendingModifiedValues) SetDBInstanceIdentifier(v string) *PendingModifiedValues {
	s.DBInstanceIdentifier = &v
	return s
}

// SetEngineVersion sets the EngineVersion field's value.
func (s *PendingModifiedValues) SetEngineVersion(v string) *PendingModifiedValues {
	s.EngineVersion = &v
	return s
}

// SetMasterUserPassword sets the MasterUserPassword field's value.
func (s *PendingModifiedValues) SetMasterUserPassword(v string) *PendingModifiedValues {
	s.MasterUserPassword = &v
	return s
}

// SetMultiAZ sets the MultiAZ field's value.
func (s *PendingModifiedValues) SetMultiAZ(v string) *PendingModifiedValues {
	s.MultiAZ = &v
	return s
}

// SetNiftyMultiAZType sets the NiftyMultiAZType field's value.
func (s *PendingModifiedValues) SetNiftyMultiAZType(v string) *PendingModifiedValues {
	s.NiftyMultiAZType = &v
	return s
}

// SetPort sets the Port field's value.
func (s *PendingModifiedValues) SetPort(v string) *PendingModifiedValues {
	s.Port = &v
	return s
}

type ReadReplicaDBInstanceIdentifier struct {
	_ struct{} `type:"structure"`

	ReadReplicaDBInstanceIdentifier *string `type:"string"`
}

// String returns the string representation
func (s ReadReplicaDBInstanceIdentifier) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ReadReplicaDBInstanceIdentifier) GoString() string {
	return s.String()
}

// SetReadReplicaDBInstanceIdentifier sets the ReadReplicaDBInstanceIdentifier field's value.
func (s *ReadReplicaDBInstanceIdentifier) SetReadReplicaDBInstanceIdentifier(v string) *ReadReplicaDBInstanceIdentifier {
	s.ReadReplicaDBInstanceIdentifier = &v
	return s
}

type RebootDBInstanceInput struct {
	_ struct{} `type:"structure"`

	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string"`

	ForceFailover *bool `locationName:"ForceFailover" type:"boolean"`

	NiftyRebootType *string `locationName:"NiftyRebootType" type:"string"`
}

// String returns the string representation
func (s RebootDBInstanceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootDBInstanceInput) GoString() string {
	return s.String()
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *RebootDBInstanceInput) SetDBInstanceIdentifier(v string) *RebootDBInstanceInput {
	s.DBInstanceIdentifier = &v
	return s
}

// SetForceFailover sets the ForceFailover field's value.
func (s *RebootDBInstanceInput) SetForceFailover(v bool) *RebootDBInstanceInput {
	s.ForceFailover = &v
	return s
}

// SetNiftyRebootType sets the NiftyRebootType field's value.
func (s *RebootDBInstanceInput) SetNiftyRebootType(v string) *RebootDBInstanceInput {
	s.NiftyRebootType = &v
	return s
}

type RebootDBInstanceOutput struct {
	_ struct{} `type:"structure"`

	DBInstance *DBInstance `type:"structure"`
}

// String returns the string representation
func (s RebootDBInstanceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RebootDBInstanceOutput) GoString() string {
	return s.String()
}

// SetDBInstance sets the DBInstance field's value.
func (s *RebootDBInstanceOutput) SetDBInstance(v *DBInstance) *RebootDBInstanceOutput {
	s.DBInstance = v
	return s
}

type RemoveSourceIdentifierFromSubscriptionInput struct {
	_ struct{} `type:"structure"`

	SourceIdentifier *string `locationName:"SourceIdentifier" type:"string"`

	SubscriptionName *string `locationName:"SubscriptionName" type:"string"`
}

// String returns the string representation
func (s RemoveSourceIdentifierFromSubscriptionInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RemoveSourceIdentifierFromSubscriptionInput) GoString() string {
	return s.String()
}

// SetSourceIdentifier sets the SourceIdentifier field's value.
func (s *RemoveSourceIdentifierFromSubscriptionInput) SetSourceIdentifier(v string) *RemoveSourceIdentifierFromSubscriptionInput {
	s.SourceIdentifier = &v
	return s
}

// SetSubscriptionName sets the SubscriptionName field's value.
func (s *RemoveSourceIdentifierFromSubscriptionInput) SetSubscriptionName(v string) *RemoveSourceIdentifierFromSubscriptionInput {
	s.SubscriptionName = &v
	return s
}

type RemoveSourceIdentifierFromSubscriptionOutput struct {
	_ struct{} `type:"structure"`

	EventSubscription *EventSubscription `type:"structure"`
}

// String returns the string representation
func (s RemoveSourceIdentifierFromSubscriptionOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RemoveSourceIdentifierFromSubscriptionOutput) GoString() string {
	return s.String()
}

// SetEventSubscription sets the EventSubscription field's value.
func (s *RemoveSourceIdentifierFromSubscriptionOutput) SetEventSubscription(v *EventSubscription) *RemoveSourceIdentifierFromSubscriptionOutput {
	s.EventSubscription = v
	return s
}

type RequestDimensionsStruct struct {
	_ struct{} `type:"structure"`

	Name *string `locationName:"Name" type:"string"`

	Value *string `locationName:"Value" type:"string"`
}

// String returns the string representation
func (s RequestDimensionsStruct) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RequestDimensionsStruct) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *RequestDimensionsStruct) SetName(v string) *RequestDimensionsStruct {
	s.Name = &v
	return s
}

// SetValue sets the Value field's value.
func (s *RequestDimensionsStruct) SetValue(v string) *RequestDimensionsStruct {
	s.Value = &v
	return s
}

type RequestParametersStruct struct {
	_ struct{} `type:"structure"`

	ApplyMethod *string `locationName:"ApplyMethod" type:"string"`

	ParameterName *string `locationName:"ParameterName" type:"string"`

	ParameterValue *string `locationName:"ParameterValue" type:"string"`
}

// String returns the string representation
func (s RequestParametersStruct) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RequestParametersStruct) GoString() string {
	return s.String()
}

// SetApplyMethod sets the ApplyMethod field's value.
func (s *RequestParametersStruct) SetApplyMethod(v string) *RequestParametersStruct {
	s.ApplyMethod = &v
	return s
}

// SetParameterName sets the ParameterName field's value.
func (s *RequestParametersStruct) SetParameterName(v string) *RequestParametersStruct {
	s.ParameterName = &v
	return s
}

// SetParameterValue sets the ParameterValue field's value.
func (s *RequestParametersStruct) SetParameterValue(v string) *RequestParametersStruct {
	s.ParameterValue = &v
	return s
}

type ResetDBParameterGroupInput struct {
	_ struct{} `type:"structure"`

	DBParameterGroupName *string `locationName:"DBParameterGroupName" type:"string"`

	Parameters []*RequestParametersStruct `locationName:"Parameters" locationNameList:"member" type:"list"`

	ResetAllParameters *bool `locationName:"ResetAllParameters" type:"boolean"`
}

// String returns the string representation
func (s ResetDBParameterGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetDBParameterGroupInput) GoString() string {
	return s.String()
}

// SetDBParameterGroupName sets the DBParameterGroupName field's value.
func (s *ResetDBParameterGroupInput) SetDBParameterGroupName(v string) *ResetDBParameterGroupInput {
	s.DBParameterGroupName = &v
	return s
}

// SetParameters sets the Parameters field's value.
func (s *ResetDBParameterGroupInput) SetParameters(v []*RequestParametersStruct) *ResetDBParameterGroupInput {
	s.Parameters = v
	return s
}

// SetResetAllParameters sets the ResetAllParameters field's value.
func (s *ResetDBParameterGroupInput) SetResetAllParameters(v bool) *ResetDBParameterGroupInput {
	s.ResetAllParameters = &v
	return s
}

type ResetDBParameterGroupOutput struct {
	_ struct{} `type:"structure"`

	DBParameterGroupName *string `type:"string"`
}

// String returns the string representation
func (s ResetDBParameterGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ResetDBParameterGroupOutput) GoString() string {
	return s.String()
}

// SetDBParameterGroupName sets the DBParameterGroupName field's value.
func (s *ResetDBParameterGroupOutput) SetDBParameterGroupName(v string) *ResetDBParameterGroupOutput {
	s.DBParameterGroupName = &v
	return s
}

type RestoreDBInstanceFromDBSnapshotInput struct {
	_ struct{} `type:"structure"`

	AvailabilityZone *string `locationName:"AvailabilityZone" type:"string"`

	DBInstanceClass *string `locationName:"DBInstanceClass" type:"string"`

	DBInstanceIdentifier *string `locationName:"DBInstanceIdentifier" type:"string"`

	DBName *string `locationName:"DBName" type:"string"`

	DBSnapshotIdentifier *string `locationName:"DBSnapshotIdentifier" type:"string"`

	Engine *string `locationName:"Engine" type:"string"`

	LicenseModel *string `locationName:"LicenseModel" type:"string"`

	MultiAZ *bool `locationName:"MultiAZ" type:"boolean"`

	NiftyDBParameterGroupName *string `locationName:"NiftyDBParameterGroupName" type:"string"`

	NiftyDBSecurityGroups []*string `locationName:"NiftyDBSecurityGroups" locationNameList:"member" type:"list"`

	NiftyMasterPrivateAddress *string `locationName:"NiftyMasterPrivateAddress" type:"string"`

	NiftyMultiAZType *int64 `locationName:"NiftyMultiAZType" type:"integer"`

	NiftyNetworkId *string `locationName:"NiftyNetworkId" type:"string"`

	NiftyReadReplicaDBInstanceIdentifier *int64 `locationName:"NiftyReadReplicaDBInstanceIdentifier" type:"integer"`

	NiftyReadReplicaPrivateAddress *string `locationName:"NiftyReadReplicaPrivateAddress" type:"string"`

	NiftySlavePrivateAddress *string `locationName:"NiftySlavePrivateAddress" type:"string"`

	NiftyStorageType *int64 `locationName:"NiftyStorageType" type:"integer"`

	NiftyVirtualPrivateAddress *string `locationName:"NiftyVirtualPrivateAddress" type:"string"`

	Port *int64 `locationName:"Port" type:"integer"`

	PubliclyAccessible *bool `locationName:"PubliclyAccessible" type:"boolean"`
}

// String returns the string representation
func (s RestoreDBInstanceFromDBSnapshotInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreDBInstanceFromDBSnapshotInput) GoString() string {
	return s.String()
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetAvailabilityZone(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.AvailabilityZone = &v
	return s
}

// SetDBInstanceClass sets the DBInstanceClass field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetDBInstanceClass(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.DBInstanceClass = &v
	return s
}

// SetDBInstanceIdentifier sets the DBInstanceIdentifier field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetDBInstanceIdentifier(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.DBInstanceIdentifier = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetDBName(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.DBName = &v
	return s
}

// SetDBSnapshotIdentifier sets the DBSnapshotIdentifier field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetDBSnapshotIdentifier(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.DBSnapshotIdentifier = &v
	return s
}

// SetEngine sets the Engine field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetEngine(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.Engine = &v
	return s
}

// SetLicenseModel sets the LicenseModel field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetLicenseModel(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.LicenseModel = &v
	return s
}

// SetMultiAZ sets the MultiAZ field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetMultiAZ(v bool) *RestoreDBInstanceFromDBSnapshotInput {
	s.MultiAZ = &v
	return s
}

// SetNiftyDBParameterGroupName sets the NiftyDBParameterGroupName field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetNiftyDBParameterGroupName(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.NiftyDBParameterGroupName = &v
	return s
}

// SetNiftyDBSecurityGroups sets the NiftyDBSecurityGroups field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetNiftyDBSecurityGroups(v []*string) *RestoreDBInstanceFromDBSnapshotInput {
	s.NiftyDBSecurityGroups = v
	return s
}

// SetNiftyMasterPrivateAddress sets the NiftyMasterPrivateAddress field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetNiftyMasterPrivateAddress(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.NiftyMasterPrivateAddress = &v
	return s
}

// SetNiftyMultiAZType sets the NiftyMultiAZType field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetNiftyMultiAZType(v int64) *RestoreDBInstanceFromDBSnapshotInput {
	s.NiftyMultiAZType = &v
	return s
}

// SetNiftyNetworkId sets the NiftyNetworkId field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetNiftyNetworkId(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.NiftyNetworkId = &v
	return s
}

// SetNiftyReadReplicaDBInstanceIdentifier sets the NiftyReadReplicaDBInstanceIdentifier field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetNiftyReadReplicaDBInstanceIdentifier(v int64) *RestoreDBInstanceFromDBSnapshotInput {
	s.NiftyReadReplicaDBInstanceIdentifier = &v
	return s
}

// SetNiftyReadReplicaPrivateAddress sets the NiftyReadReplicaPrivateAddress field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetNiftyReadReplicaPrivateAddress(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.NiftyReadReplicaPrivateAddress = &v
	return s
}

// SetNiftySlavePrivateAddress sets the NiftySlavePrivateAddress field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetNiftySlavePrivateAddress(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.NiftySlavePrivateAddress = &v
	return s
}

// SetNiftyStorageType sets the NiftyStorageType field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetNiftyStorageType(v int64) *RestoreDBInstanceFromDBSnapshotInput {
	s.NiftyStorageType = &v
	return s
}

// SetNiftyVirtualPrivateAddress sets the NiftyVirtualPrivateAddress field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetNiftyVirtualPrivateAddress(v string) *RestoreDBInstanceFromDBSnapshotInput {
	s.NiftyVirtualPrivateAddress = &v
	return s
}

// SetPort sets the Port field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetPort(v int64) *RestoreDBInstanceFromDBSnapshotInput {
	s.Port = &v
	return s
}

// SetPubliclyAccessible sets the PubliclyAccessible field's value.
func (s *RestoreDBInstanceFromDBSnapshotInput) SetPubliclyAccessible(v bool) *RestoreDBInstanceFromDBSnapshotInput {
	s.PubliclyAccessible = &v
	return s
}

type RestoreDBInstanceFromDBSnapshotOutput struct {
	_ struct{} `type:"structure"`

	DBInstance *DBInstance `type:"structure"`
}

// String returns the string representation
func (s RestoreDBInstanceFromDBSnapshotOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreDBInstanceFromDBSnapshotOutput) GoString() string {
	return s.String()
}

// SetDBInstance sets the DBInstance field's value.
func (s *RestoreDBInstanceFromDBSnapshotOutput) SetDBInstance(v *DBInstance) *RestoreDBInstanceFromDBSnapshotOutput {
	s.DBInstance = v
	return s
}

type RestoreDBInstanceToPointInTimeInput struct {
	_ struct{} `type:"structure"`

	AvailabilityZone *string `locationName:"AvailabilityZone" type:"string"`

	DBInstanceClass *string `locationName:"DBInstanceClass" type:"string"`

	DBName *string `locationName:"DBName" type:"string"`

	Engine *string `locationName:"Engine" type:"string"`

	LicenseModel *string `locationName:"LicenseModel" type:"string"`

	MultiAZ *bool `locationName:"MultiAZ" type:"boolean"`

	NiftyDBParameterGroupName *string `locationName:"NiftyDBParameterGroupName" type:"string"`

	NiftyDBSecurityGroups []*string `locationName:"NiftyDBSecurityGroups" locationNameList:"member" type:"list"`

	NiftyMasterPrivateAddress *string `locationName:"NiftyMasterPrivateAddress" type:"string"`

	NiftyMultiAZType *int64 `locationName:"NiftyMultiAZType" type:"integer"`

	NiftyNetworkId *string `locationName:"NiftyNetworkId" type:"string"`

	NiftyReadReplicaDBInstanceIdentifier *string `locationName:"NiftyReadReplicaDBInstanceIdentifier" type:"string"`

	NiftyReadReplicaPrivateAddress *string `locationName:"NiftyReadReplicaPrivateAddress" type:"string"`

	NiftySlavePrivateAddress *string `locationName:"NiftySlavePrivateAddress" type:"string"`

	NiftyStorageType *int64 `locationName:"NiftyStorageType" type:"integer"`

	NiftyVirtualPrivateAddress *string `locationName:"NiftyVirtualPrivateAddress" type:"string"`

	Port *int64 `locationName:"Port" type:"integer"`

	PubliclyAccessible *bool `locationName:"PubliclyAccessible" type:"boolean"`

	RestoreTime *time.Time `locationName:"RestoreTime" type:"timestamp" timestampFormat:"iso8601"`

	SourceDBInstanceIdentifier *string `locationName:"SourceDBInstanceIdentifier" type:"string"`

	TargetDBInstanceIdentifier *string `locationName:"TargetDBInstanceIdentifier" type:"string"`

	UseLatestRestorableTime *bool `locationName:"UseLatestRestorableTime" type:"boolean"`
}

// String returns the string representation
func (s RestoreDBInstanceToPointInTimeInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreDBInstanceToPointInTimeInput) GoString() string {
	return s.String()
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetAvailabilityZone(v string) *RestoreDBInstanceToPointInTimeInput {
	s.AvailabilityZone = &v
	return s
}

// SetDBInstanceClass sets the DBInstanceClass field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetDBInstanceClass(v string) *RestoreDBInstanceToPointInTimeInput {
	s.DBInstanceClass = &v
	return s
}

// SetDBName sets the DBName field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetDBName(v string) *RestoreDBInstanceToPointInTimeInput {
	s.DBName = &v
	return s
}

// SetEngine sets the Engine field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetEngine(v string) *RestoreDBInstanceToPointInTimeInput {
	s.Engine = &v
	return s
}

// SetLicenseModel sets the LicenseModel field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetLicenseModel(v string) *RestoreDBInstanceToPointInTimeInput {
	s.LicenseModel = &v
	return s
}

// SetMultiAZ sets the MultiAZ field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetMultiAZ(v bool) *RestoreDBInstanceToPointInTimeInput {
	s.MultiAZ = &v
	return s
}

// SetNiftyDBParameterGroupName sets the NiftyDBParameterGroupName field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetNiftyDBParameterGroupName(v string) *RestoreDBInstanceToPointInTimeInput {
	s.NiftyDBParameterGroupName = &v
	return s
}

// SetNiftyDBSecurityGroups sets the NiftyDBSecurityGroups field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetNiftyDBSecurityGroups(v []*string) *RestoreDBInstanceToPointInTimeInput {
	s.NiftyDBSecurityGroups = v
	return s
}

// SetNiftyMasterPrivateAddress sets the NiftyMasterPrivateAddress field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetNiftyMasterPrivateAddress(v string) *RestoreDBInstanceToPointInTimeInput {
	s.NiftyMasterPrivateAddress = &v
	return s
}

// SetNiftyMultiAZType sets the NiftyMultiAZType field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetNiftyMultiAZType(v int64) *RestoreDBInstanceToPointInTimeInput {
	s.NiftyMultiAZType = &v
	return s
}

// SetNiftyNetworkId sets the NiftyNetworkId field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetNiftyNetworkId(v string) *RestoreDBInstanceToPointInTimeInput {
	s.NiftyNetworkId = &v
	return s
}

// SetNiftyReadReplicaDBInstanceIdentifier sets the NiftyReadReplicaDBInstanceIdentifier field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetNiftyReadReplicaDBInstanceIdentifier(v string) *RestoreDBInstanceToPointInTimeInput {
	s.NiftyReadReplicaDBInstanceIdentifier = &v
	return s
}

// SetNiftyReadReplicaPrivateAddress sets the NiftyReadReplicaPrivateAddress field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetNiftyReadReplicaPrivateAddress(v string) *RestoreDBInstanceToPointInTimeInput {
	s.NiftyReadReplicaPrivateAddress = &v
	return s
}

// SetNiftySlavePrivateAddress sets the NiftySlavePrivateAddress field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetNiftySlavePrivateAddress(v string) *RestoreDBInstanceToPointInTimeInput {
	s.NiftySlavePrivateAddress = &v
	return s
}

// SetNiftyStorageType sets the NiftyStorageType field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetNiftyStorageType(v int64) *RestoreDBInstanceToPointInTimeInput {
	s.NiftyStorageType = &v
	return s
}

// SetNiftyVirtualPrivateAddress sets the NiftyVirtualPrivateAddress field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetNiftyVirtualPrivateAddress(v string) *RestoreDBInstanceToPointInTimeInput {
	s.NiftyVirtualPrivateAddress = &v
	return s
}

// SetPort sets the Port field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetPort(v int64) *RestoreDBInstanceToPointInTimeInput {
	s.Port = &v
	return s
}

// SetPubliclyAccessible sets the PubliclyAccessible field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetPubliclyAccessible(v bool) *RestoreDBInstanceToPointInTimeInput {
	s.PubliclyAccessible = &v
	return s
}

// SetRestoreTime sets the RestoreTime field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetRestoreTime(v time.Time) *RestoreDBInstanceToPointInTimeInput {
	s.RestoreTime = &v
	return s
}

// SetSourceDBInstanceIdentifier sets the SourceDBInstanceIdentifier field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetSourceDBInstanceIdentifier(v string) *RestoreDBInstanceToPointInTimeInput {
	s.SourceDBInstanceIdentifier = &v
	return s
}

// SetTargetDBInstanceIdentifier sets the TargetDBInstanceIdentifier field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetTargetDBInstanceIdentifier(v string) *RestoreDBInstanceToPointInTimeInput {
	s.TargetDBInstanceIdentifier = &v
	return s
}

// SetUseLatestRestorableTime sets the UseLatestRestorableTime field's value.
func (s *RestoreDBInstanceToPointInTimeInput) SetUseLatestRestorableTime(v bool) *RestoreDBInstanceToPointInTimeInput {
	s.UseLatestRestorableTime = &v
	return s
}

type RestoreDBInstanceToPointInTimeOutput struct {
	_ struct{} `type:"structure"`

	DBInstance *DBInstance `type:"structure"`
}

// String returns the string representation
func (s RestoreDBInstanceToPointInTimeOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RestoreDBInstanceToPointInTimeOutput) GoString() string {
	return s.String()
}

// SetDBInstance sets the DBInstance field's value.
func (s *RestoreDBInstanceToPointInTimeOutput) SetDBInstance(v *DBInstance) *RestoreDBInstanceToPointInTimeOutput {
	s.DBInstance = v
	return s
}

type RevokeDBSecurityGroupIngressInput struct {
	_ struct{} `type:"structure"`

	CIDRIP *string `locationName:"CIDRIP" type:"string"`

	DBSecurityGroupName *string `locationName:"DBSecurityGroupName" type:"string"`

	EC2SecurityGroupName *string `locationName:"EC2SecurityGroupName" type:"string"`
}

// String returns the string representation
func (s RevokeDBSecurityGroupIngressInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokeDBSecurityGroupIngressInput) GoString() string {
	return s.String()
}

// SetCIDRIP sets the CIDRIP field's value.
func (s *RevokeDBSecurityGroupIngressInput) SetCIDRIP(v string) *RevokeDBSecurityGroupIngressInput {
	s.CIDRIP = &v
	return s
}

// SetDBSecurityGroupName sets the DBSecurityGroupName field's value.
func (s *RevokeDBSecurityGroupIngressInput) SetDBSecurityGroupName(v string) *RevokeDBSecurityGroupIngressInput {
	s.DBSecurityGroupName = &v
	return s
}

// SetEC2SecurityGroupName sets the EC2SecurityGroupName field's value.
func (s *RevokeDBSecurityGroupIngressInput) SetEC2SecurityGroupName(v string) *RevokeDBSecurityGroupIngressInput {
	s.EC2SecurityGroupName = &v
	return s
}

type RevokeDBSecurityGroupIngressOutput struct {
	_ struct{} `type:"structure"`

	DBSecurityGroup *DBSecurityGroup `type:"structure"`
}

// String returns the string representation
func (s RevokeDBSecurityGroupIngressOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokeDBSecurityGroupIngressOutput) GoString() string {
	return s.String()
}

// SetDBSecurityGroup sets the DBSecurityGroup field's value.
func (s *RevokeDBSecurityGroupIngressOutput) SetDBSecurityGroup(v *DBSecurityGroup) *RevokeDBSecurityGroupIngressOutput {
	s.DBSecurityGroup = v
	return s
}

type VpcSecurityGroup struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s VpcSecurityGroup) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s VpcSecurityGroup) GoString() string {
	return s.String()
}
