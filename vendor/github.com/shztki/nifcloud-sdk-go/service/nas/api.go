// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package nas

import (
	"time"

	"github.com/shztki/nifcloud-sdk-go/nifcloud"
	"github.com/shztki/nifcloud-sdk-go/nifcloud/awsutil"
	"github.com/shztki/nifcloud-sdk-go/nifcloud/request"
	"github.com/shztki/nifcloud-sdk-go/private/protocol"
	"github.com/shztki/nifcloud-sdk-go/private/protocol/query"
)

const opAuthorizeNASSecurityGroupIngress = "AuthorizeNASSecurityGroupIngress"

// AuthorizeNASSecurityGroupIngressRequest generates a "nifcloud/request.Request" representing the
// client's request for the AuthorizeNASSecurityGroupIngress operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See AuthorizeNASSecurityGroupIngress for more information on using the AuthorizeNASSecurityGroupIngress
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the AuthorizeNASSecurityGroupIngressRequest method.
//    req, resp := client.AuthorizeNASSecurityGroupIngressRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/AuthorizeNASSecurityGroupIngress
func (c *Nas) AuthorizeNASSecurityGroupIngressRequest(input *AuthorizeNASSecurityGroupIngressInput) (req *request.Request, output *AuthorizeNASSecurityGroupIngressOutput) {
	op := &request.Operation{
		Name:       opAuthorizeNASSecurityGroupIngress,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &AuthorizeNASSecurityGroupIngressInput{}
	}

	output = &AuthorizeNASSecurityGroupIngressOutput{}
	req = c.newRequest(op, input, output)
	return
}

// AuthorizeNASSecurityGroupIngress API operation for NIFCLOUD NAS.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD NAS's
// API operation AuthorizeNASSecurityGroupIngress for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/AuthorizeNASSecurityGroupIngress
func (c *Nas) AuthorizeNASSecurityGroupIngress(input *AuthorizeNASSecurityGroupIngressInput) (*AuthorizeNASSecurityGroupIngressOutput, error) {
	req, out := c.AuthorizeNASSecurityGroupIngressRequest(input)
	return out, req.Send()
}

// AuthorizeNASSecurityGroupIngressWithContext is the same as AuthorizeNASSecurityGroupIngress with the addition of
// the ability to pass a context and additional request options.
//
// See AuthorizeNASSecurityGroupIngress for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Nas) AuthorizeNASSecurityGroupIngressWithContext(ctx nifcloud.Context, input *AuthorizeNASSecurityGroupIngressInput, opts ...request.Option) (*AuthorizeNASSecurityGroupIngressOutput, error) {
	req, out := c.AuthorizeNASSecurityGroupIngressRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateNASInstance = "CreateNASInstance"

// CreateNASInstanceRequest generates a "nifcloud/request.Request" representing the
// client's request for the CreateNASInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateNASInstance for more information on using the CreateNASInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateNASInstanceRequest method.
//    req, resp := client.CreateNASInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/CreateNASInstance
func (c *Nas) CreateNASInstanceRequest(input *CreateNASInstanceInput) (req *request.Request, output *CreateNASInstanceOutput) {
	op := &request.Operation{
		Name:       opCreateNASInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateNASInstanceInput{}
	}

	output = &CreateNASInstanceOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateNASInstance API operation for NIFCLOUD NAS.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD NAS's
// API operation CreateNASInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/CreateNASInstance
func (c *Nas) CreateNASInstance(input *CreateNASInstanceInput) (*CreateNASInstanceOutput, error) {
	req, out := c.CreateNASInstanceRequest(input)
	return out, req.Send()
}

// CreateNASInstanceWithContext is the same as CreateNASInstance with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNASInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Nas) CreateNASInstanceWithContext(ctx nifcloud.Context, input *CreateNASInstanceInput, opts ...request.Option) (*CreateNASInstanceOutput, error) {
	req, out := c.CreateNASInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opCreateNASSecurityGroup = "CreateNASSecurityGroup"

// CreateNASSecurityGroupRequest generates a "nifcloud/request.Request" representing the
// client's request for the CreateNASSecurityGroup operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See CreateNASSecurityGroup for more information on using the CreateNASSecurityGroup
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the CreateNASSecurityGroupRequest method.
//    req, resp := client.CreateNASSecurityGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/CreateNASSecurityGroup
func (c *Nas) CreateNASSecurityGroupRequest(input *CreateNASSecurityGroupInput) (req *request.Request, output *CreateNASSecurityGroupOutput) {
	op := &request.Operation{
		Name:       opCreateNASSecurityGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &CreateNASSecurityGroupInput{}
	}

	output = &CreateNASSecurityGroupOutput{}
	req = c.newRequest(op, input, output)
	return
}

// CreateNASSecurityGroup API operation for NIFCLOUD NAS.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD NAS's
// API operation CreateNASSecurityGroup for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/CreateNASSecurityGroup
func (c *Nas) CreateNASSecurityGroup(input *CreateNASSecurityGroupInput) (*CreateNASSecurityGroupOutput, error) {
	req, out := c.CreateNASSecurityGroupRequest(input)
	return out, req.Send()
}

// CreateNASSecurityGroupWithContext is the same as CreateNASSecurityGroup with the addition of
// the ability to pass a context and additional request options.
//
// See CreateNASSecurityGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Nas) CreateNASSecurityGroupWithContext(ctx nifcloud.Context, input *CreateNASSecurityGroupInput, opts ...request.Option) (*CreateNASSecurityGroupOutput, error) {
	req, out := c.CreateNASSecurityGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNASInstance = "DeleteNASInstance"

// DeleteNASInstanceRequest generates a "nifcloud/request.Request" representing the
// client's request for the DeleteNASInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteNASInstance for more information on using the DeleteNASInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteNASInstanceRequest method.
//    req, resp := client.DeleteNASInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/DeleteNASInstance
func (c *Nas) DeleteNASInstanceRequest(input *DeleteNASInstanceInput) (req *request.Request, output *DeleteNASInstanceOutput) {
	op := &request.Operation{
		Name:       opDeleteNASInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteNASInstanceInput{}
	}

	output = &DeleteNASInstanceOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DeleteNASInstance API operation for NIFCLOUD NAS.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD NAS's
// API operation DeleteNASInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/DeleteNASInstance
func (c *Nas) DeleteNASInstance(input *DeleteNASInstanceInput) (*DeleteNASInstanceOutput, error) {
	req, out := c.DeleteNASInstanceRequest(input)
	return out, req.Send()
}

// DeleteNASInstanceWithContext is the same as DeleteNASInstance with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNASInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Nas) DeleteNASInstanceWithContext(ctx nifcloud.Context, input *DeleteNASInstanceInput, opts ...request.Option) (*DeleteNASInstanceOutput, error) {
	req, out := c.DeleteNASInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDeleteNASSecurityGroup = "DeleteNASSecurityGroup"

// DeleteNASSecurityGroupRequest generates a "nifcloud/request.Request" representing the
// client's request for the DeleteNASSecurityGroup operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DeleteNASSecurityGroup for more information on using the DeleteNASSecurityGroup
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DeleteNASSecurityGroupRequest method.
//    req, resp := client.DeleteNASSecurityGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/DeleteNASSecurityGroup
func (c *Nas) DeleteNASSecurityGroupRequest(input *DeleteNASSecurityGroupInput) (req *request.Request, output *DeleteNASSecurityGroupOutput) {
	op := &request.Operation{
		Name:       opDeleteNASSecurityGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DeleteNASSecurityGroupInput{}
	}

	output = &DeleteNASSecurityGroupOutput{}
	req = c.newRequest(op, input, output)
	req.Handlers.Unmarshal.Remove(query.UnmarshalHandler)
	req.Handlers.Unmarshal.PushBackNamed(protocol.UnmarshalDiscardBodyHandler)
	return
}

// DeleteNASSecurityGroup API operation for NIFCLOUD NAS.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD NAS's
// API operation DeleteNASSecurityGroup for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/DeleteNASSecurityGroup
func (c *Nas) DeleteNASSecurityGroup(input *DeleteNASSecurityGroupInput) (*DeleteNASSecurityGroupOutput, error) {
	req, out := c.DeleteNASSecurityGroupRequest(input)
	return out, req.Send()
}

// DeleteNASSecurityGroupWithContext is the same as DeleteNASSecurityGroup with the addition of
// the ability to pass a context and additional request options.
//
// See DeleteNASSecurityGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Nas) DeleteNASSecurityGroupWithContext(ctx nifcloud.Context, input *DeleteNASSecurityGroupInput, opts ...request.Option) (*DeleteNASSecurityGroupOutput, error) {
	req, out := c.DeleteNASSecurityGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeNASInstances = "DescribeNASInstances"

// DescribeNASInstancesRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeNASInstances operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeNASInstances for more information on using the DescribeNASInstances
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeNASInstancesRequest method.
//    req, resp := client.DescribeNASInstancesRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/DescribeNASInstances
func (c *Nas) DescribeNASInstancesRequest(input *DescribeNASInstancesInput) (req *request.Request, output *DescribeNASInstancesOutput) {
	op := &request.Operation{
		Name:       opDescribeNASInstances,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeNASInstancesInput{}
	}

	output = &DescribeNASInstancesOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeNASInstances API operation for NIFCLOUD NAS.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD NAS's
// API operation DescribeNASInstances for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/DescribeNASInstances
func (c *Nas) DescribeNASInstances(input *DescribeNASInstancesInput) (*DescribeNASInstancesOutput, error) {
	req, out := c.DescribeNASInstancesRequest(input)
	return out, req.Send()
}

// DescribeNASInstancesWithContext is the same as DescribeNASInstances with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNASInstances for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Nas) DescribeNASInstancesWithContext(ctx nifcloud.Context, input *DescribeNASInstancesInput, opts ...request.Option) (*DescribeNASInstancesOutput, error) {
	req, out := c.DescribeNASInstancesRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opDescribeNASSecurityGroups = "DescribeNASSecurityGroups"

// DescribeNASSecurityGroupsRequest generates a "nifcloud/request.Request" representing the
// client's request for the DescribeNASSecurityGroups operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See DescribeNASSecurityGroups for more information on using the DescribeNASSecurityGroups
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the DescribeNASSecurityGroupsRequest method.
//    req, resp := client.DescribeNASSecurityGroupsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/DescribeNASSecurityGroups
func (c *Nas) DescribeNASSecurityGroupsRequest(input *DescribeNASSecurityGroupsInput) (req *request.Request, output *DescribeNASSecurityGroupsOutput) {
	op := &request.Operation{
		Name:       opDescribeNASSecurityGroups,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &DescribeNASSecurityGroupsInput{}
	}

	output = &DescribeNASSecurityGroupsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// DescribeNASSecurityGroups API operation for NIFCLOUD NAS.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD NAS's
// API operation DescribeNASSecurityGroups for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/DescribeNASSecurityGroups
func (c *Nas) DescribeNASSecurityGroups(input *DescribeNASSecurityGroupsInput) (*DescribeNASSecurityGroupsOutput, error) {
	req, out := c.DescribeNASSecurityGroupsRequest(input)
	return out, req.Send()
}

// DescribeNASSecurityGroupsWithContext is the same as DescribeNASSecurityGroups with the addition of
// the ability to pass a context and additional request options.
//
// See DescribeNASSecurityGroups for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Nas) DescribeNASSecurityGroupsWithContext(ctx nifcloud.Context, input *DescribeNASSecurityGroupsInput, opts ...request.Option) (*DescribeNASSecurityGroupsOutput, error) {
	req, out := c.DescribeNASSecurityGroupsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opGetMetricStatistics = "GetMetricStatistics"

// GetMetricStatisticsRequest generates a "nifcloud/request.Request" representing the
// client's request for the GetMetricStatistics operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See GetMetricStatistics for more information on using the GetMetricStatistics
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the GetMetricStatisticsRequest method.
//    req, resp := client.GetMetricStatisticsRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/GetMetricStatistics
func (c *Nas) GetMetricStatisticsRequest(input *GetMetricStatisticsInput) (req *request.Request, output *GetMetricStatisticsOutput) {
	op := &request.Operation{
		Name:       opGetMetricStatistics,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &GetMetricStatisticsInput{}
	}

	output = &GetMetricStatisticsOutput{}
	req = c.newRequest(op, input, output)
	return
}

// GetMetricStatistics API operation for NIFCLOUD NAS.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD NAS's
// API operation GetMetricStatistics for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/GetMetricStatistics
func (c *Nas) GetMetricStatistics(input *GetMetricStatisticsInput) (*GetMetricStatisticsOutput, error) {
	req, out := c.GetMetricStatisticsRequest(input)
	return out, req.Send()
}

// GetMetricStatisticsWithContext is the same as GetMetricStatistics with the addition of
// the ability to pass a context and additional request options.
//
// See GetMetricStatistics for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Nas) GetMetricStatisticsWithContext(ctx nifcloud.Context, input *GetMetricStatisticsInput, opts ...request.Option) (*GetMetricStatisticsOutput, error) {
	req, out := c.GetMetricStatisticsRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyNASInstance = "ModifyNASInstance"

// ModifyNASInstanceRequest generates a "nifcloud/request.Request" representing the
// client's request for the ModifyNASInstance operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyNASInstance for more information on using the ModifyNASInstance
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyNASInstanceRequest method.
//    req, resp := client.ModifyNASInstanceRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/ModifyNASInstance
func (c *Nas) ModifyNASInstanceRequest(input *ModifyNASInstanceInput) (req *request.Request, output *ModifyNASInstanceOutput) {
	op := &request.Operation{
		Name:       opModifyNASInstance,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyNASInstanceInput{}
	}

	output = &ModifyNASInstanceOutput{}
	req = c.newRequest(op, input, output)
	return
}

// ModifyNASInstance API operation for NIFCLOUD NAS.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD NAS's
// API operation ModifyNASInstance for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/ModifyNASInstance
func (c *Nas) ModifyNASInstance(input *ModifyNASInstanceInput) (*ModifyNASInstanceOutput, error) {
	req, out := c.ModifyNASInstanceRequest(input)
	return out, req.Send()
}

// ModifyNASInstanceWithContext is the same as ModifyNASInstance with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyNASInstance for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Nas) ModifyNASInstanceWithContext(ctx nifcloud.Context, input *ModifyNASInstanceInput, opts ...request.Option) (*ModifyNASInstanceOutput, error) {
	req, out := c.ModifyNASInstanceRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opModifyNASSecurityGroup = "ModifyNASSecurityGroup"

// ModifyNASSecurityGroupRequest generates a "nifcloud/request.Request" representing the
// client's request for the ModifyNASSecurityGroup operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ModifyNASSecurityGroup for more information on using the ModifyNASSecurityGroup
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ModifyNASSecurityGroupRequest method.
//    req, resp := client.ModifyNASSecurityGroupRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/ModifyNASSecurityGroup
func (c *Nas) ModifyNASSecurityGroupRequest(input *ModifyNASSecurityGroupInput) (req *request.Request, output *ModifyNASSecurityGroupOutput) {
	op := &request.Operation{
		Name:       opModifyNASSecurityGroup,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &ModifyNASSecurityGroupInput{}
	}

	output = &ModifyNASSecurityGroupOutput{}
	req = c.newRequest(op, input, output)
	return
}

// ModifyNASSecurityGroup API operation for NIFCLOUD NAS.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD NAS's
// API operation ModifyNASSecurityGroup for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/ModifyNASSecurityGroup
func (c *Nas) ModifyNASSecurityGroup(input *ModifyNASSecurityGroupInput) (*ModifyNASSecurityGroupOutput, error) {
	req, out := c.ModifyNASSecurityGroupRequest(input)
	return out, req.Send()
}

// ModifyNASSecurityGroupWithContext is the same as ModifyNASSecurityGroup with the addition of
// the ability to pass a context and additional request options.
//
// See ModifyNASSecurityGroup for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Nas) ModifyNASSecurityGroupWithContext(ctx nifcloud.Context, input *ModifyNASSecurityGroupInput, opts ...request.Option) (*ModifyNASSecurityGroupOutput, error) {
	req, out := c.ModifyNASSecurityGroupRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

const opRevokeNASSecurityGroupIngress = "RevokeNASSecurityGroupIngress"

// RevokeNASSecurityGroupIngressRequest generates a "nifcloud/request.Request" representing the
// client's request for the RevokeNASSecurityGroupIngress operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See RevokeNASSecurityGroupIngress for more information on using the RevokeNASSecurityGroupIngress
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the RevokeNASSecurityGroupIngressRequest method.
//    req, resp := client.RevokeNASSecurityGroupIngressRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/RevokeNASSecurityGroupIngress
func (c *Nas) RevokeNASSecurityGroupIngressRequest(input *RevokeNASSecurityGroupIngressInput) (req *request.Request, output *RevokeNASSecurityGroupIngressOutput) {
	op := &request.Operation{
		Name:       opRevokeNASSecurityGroupIngress,
		HTTPMethod: "POST",
		HTTPPath:   "/",
	}

	if input == nil {
		input = &RevokeNASSecurityGroupIngressInput{}
	}

	output = &RevokeNASSecurityGroupIngressOutput{}
	req = c.newRequest(op, input, output)
	return
}

// RevokeNASSecurityGroupIngress API operation for NIFCLOUD NAS.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD NAS's
// API operation RevokeNASSecurityGroupIngress for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/nas-N2016-02-24/RevokeNASSecurityGroupIngress
func (c *Nas) RevokeNASSecurityGroupIngress(input *RevokeNASSecurityGroupIngressInput) (*RevokeNASSecurityGroupIngressOutput, error) {
	req, out := c.RevokeNASSecurityGroupIngressRequest(input)
	return out, req.Send()
}

// RevokeNASSecurityGroupIngressWithContext is the same as RevokeNASSecurityGroupIngress with the addition of
// the ability to pass a context and additional request options.
//
// See RevokeNASSecurityGroupIngress for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Nas) RevokeNASSecurityGroupIngressWithContext(ctx nifcloud.Context, input *RevokeNASSecurityGroupIngressInput, opts ...request.Option) (*RevokeNASSecurityGroupIngressOutput, error) {
	req, out := c.RevokeNASSecurityGroupIngressRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type AuthorizeNASSecurityGroupIngressInput struct {
	_ struct{} `type:"structure"`

	CIDRIP *string `locationName:"CIDRIP" type:"string"`

	NASSecurityGroupName *string `locationName:"NASSecurityGroupName" type:"string"`

	SecurityGroupName *string `locationName:"SecurityGroupName" type:"string"`
}

// String returns the string representation
func (s AuthorizeNASSecurityGroupIngressInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AuthorizeNASSecurityGroupIngressInput) GoString() string {
	return s.String()
}

// SetCIDRIP sets the CIDRIP field's value.
func (s *AuthorizeNASSecurityGroupIngressInput) SetCIDRIP(v string) *AuthorizeNASSecurityGroupIngressInput {
	s.CIDRIP = &v
	return s
}

// SetNASSecurityGroupName sets the NASSecurityGroupName field's value.
func (s *AuthorizeNASSecurityGroupIngressInput) SetNASSecurityGroupName(v string) *AuthorizeNASSecurityGroupIngressInput {
	s.NASSecurityGroupName = &v
	return s
}

// SetSecurityGroupName sets the SecurityGroupName field's value.
func (s *AuthorizeNASSecurityGroupIngressInput) SetSecurityGroupName(v string) *AuthorizeNASSecurityGroupIngressInput {
	s.SecurityGroupName = &v
	return s
}

type AuthorizeNASSecurityGroupIngressOutput struct {
	_ struct{} `type:"structure"`

	NASSecurityGroup *NASSecurityGroup `type:"structure"`
}

// String returns the string representation
func (s AuthorizeNASSecurityGroupIngressOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s AuthorizeNASSecurityGroupIngressOutput) GoString() string {
	return s.String()
}

// SetNASSecurityGroup sets the NASSecurityGroup field's value.
func (s *AuthorizeNASSecurityGroupIngressOutput) SetNASSecurityGroup(v *NASSecurityGroup) *AuthorizeNASSecurityGroupIngressOutput {
	s.NASSecurityGroup = v
	return s
}

type CreateNASInstanceInput struct {
	_ struct{} `type:"structure"`

	AllocatedStorage *int64 `locationName:"AllocatedStorage" type:"integer"`

	AvailabilityZone *string `locationName:"AvailabilityZone" type:"string"`

	MasterPrivateAddress *string `locationName:"MasterPrivateAddress" type:"string"`

	MasterUserPassword *string `locationName:"MasterUserPassword" type:"string"`

	MasterUsername *string `locationName:"MasterUsername" type:"string"`

	NASInstanceDescription *string `locationName:"NASInstanceDescription" type:"string"`

	NASInstanceIdentifier *string `locationName:"NASInstanceIdentifier" type:"string"`

	NASInstanceType *int64 `locationName:"NASInstanceType" type:"integer"`

	NASSecurityGroups []*string `locationName:"NASSecurityGroups" locationNameList:"member" type:"list"`

	NetworkId *string `locationName:"NetworkId" type:"string"`

	Protocol *string `locationName:"Protocol" type:"string"`
}

// String returns the string representation
func (s CreateNASInstanceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNASInstanceInput) GoString() string {
	return s.String()
}

// SetAllocatedStorage sets the AllocatedStorage field's value.
func (s *CreateNASInstanceInput) SetAllocatedStorage(v int64) *CreateNASInstanceInput {
	s.AllocatedStorage = &v
	return s
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *CreateNASInstanceInput) SetAvailabilityZone(v string) *CreateNASInstanceInput {
	s.AvailabilityZone = &v
	return s
}

// SetMasterPrivateAddress sets the MasterPrivateAddress field's value.
func (s *CreateNASInstanceInput) SetMasterPrivateAddress(v string) *CreateNASInstanceInput {
	s.MasterPrivateAddress = &v
	return s
}

// SetMasterUserPassword sets the MasterUserPassword field's value.
func (s *CreateNASInstanceInput) SetMasterUserPassword(v string) *CreateNASInstanceInput {
	s.MasterUserPassword = &v
	return s
}

// SetMasterUsername sets the MasterUsername field's value.
func (s *CreateNASInstanceInput) SetMasterUsername(v string) *CreateNASInstanceInput {
	s.MasterUsername = &v
	return s
}

// SetNASInstanceDescription sets the NASInstanceDescription field's value.
func (s *CreateNASInstanceInput) SetNASInstanceDescription(v string) *CreateNASInstanceInput {
	s.NASInstanceDescription = &v
	return s
}

// SetNASInstanceIdentifier sets the NASInstanceIdentifier field's value.
func (s *CreateNASInstanceInput) SetNASInstanceIdentifier(v string) *CreateNASInstanceInput {
	s.NASInstanceIdentifier = &v
	return s
}

// SetNASInstanceType sets the NASInstanceType field's value.
func (s *CreateNASInstanceInput) SetNASInstanceType(v int64) *CreateNASInstanceInput {
	s.NASInstanceType = &v
	return s
}

// SetNASSecurityGroups sets the NASSecurityGroups field's value.
func (s *CreateNASInstanceInput) SetNASSecurityGroups(v []*string) *CreateNASInstanceInput {
	s.NASSecurityGroups = v
	return s
}

// SetNetworkId sets the NetworkId field's value.
func (s *CreateNASInstanceInput) SetNetworkId(v string) *CreateNASInstanceInput {
	s.NetworkId = &v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *CreateNASInstanceInput) SetProtocol(v string) *CreateNASInstanceInput {
	s.Protocol = &v
	return s
}

type CreateNASInstanceOutput struct {
	_ struct{} `type:"structure"`

	NASInstance *NASInstance `type:"structure"`
}

// String returns the string representation
func (s CreateNASInstanceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNASInstanceOutput) GoString() string {
	return s.String()
}

// SetNASInstance sets the NASInstance field's value.
func (s *CreateNASInstanceOutput) SetNASInstance(v *NASInstance) *CreateNASInstanceOutput {
	s.NASInstance = v
	return s
}

type CreateNASSecurityGroupInput struct {
	_ struct{} `type:"structure"`

	AvailabilityZone *string `locationName:"AvailabilityZone" type:"string"`

	NASSecurityGroupDescription *string `locationName:"NASSecurityGroupDescription" type:"string"`

	NASSecurityGroupName *string `locationName:"NASSecurityGroupName" type:"string"`
}

// String returns the string representation
func (s CreateNASSecurityGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNASSecurityGroupInput) GoString() string {
	return s.String()
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *CreateNASSecurityGroupInput) SetAvailabilityZone(v string) *CreateNASSecurityGroupInput {
	s.AvailabilityZone = &v
	return s
}

// SetNASSecurityGroupDescription sets the NASSecurityGroupDescription field's value.
func (s *CreateNASSecurityGroupInput) SetNASSecurityGroupDescription(v string) *CreateNASSecurityGroupInput {
	s.NASSecurityGroupDescription = &v
	return s
}

// SetNASSecurityGroupName sets the NASSecurityGroupName field's value.
func (s *CreateNASSecurityGroupInput) SetNASSecurityGroupName(v string) *CreateNASSecurityGroupInput {
	s.NASSecurityGroupName = &v
	return s
}

type CreateNASSecurityGroupOutput struct {
	_ struct{} `type:"structure"`

	NASSecurityGroup *NASSecurityGroup `type:"structure"`
}

// String returns the string representation
func (s CreateNASSecurityGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s CreateNASSecurityGroupOutput) GoString() string {
	return s.String()
}

// SetNASSecurityGroup sets the NASSecurityGroup field's value.
func (s *CreateNASSecurityGroupOutput) SetNASSecurityGroup(v *NASSecurityGroup) *CreateNASSecurityGroupOutput {
	s.NASSecurityGroup = v
	return s
}

type DeleteNASInstanceInput struct {
	_ struct{} `type:"structure"`

	DirectoryServiceAdministratorName *string `locationName:"DirectoryServiceAdministratorName" type:"string"`

	DirectoryServiceAdministratorPassword *string `locationName:"DirectoryServiceAdministratorPassword" type:"string"`

	NASInstanceIdentifier *string `locationName:"NASInstanceIdentifier" type:"string"`
}

// String returns the string representation
func (s DeleteNASInstanceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNASInstanceInput) GoString() string {
	return s.String()
}

// SetDirectoryServiceAdministratorName sets the DirectoryServiceAdministratorName field's value.
func (s *DeleteNASInstanceInput) SetDirectoryServiceAdministratorName(v string) *DeleteNASInstanceInput {
	s.DirectoryServiceAdministratorName = &v
	return s
}

// SetDirectoryServiceAdministratorPassword sets the DirectoryServiceAdministratorPassword field's value.
func (s *DeleteNASInstanceInput) SetDirectoryServiceAdministratorPassword(v string) *DeleteNASInstanceInput {
	s.DirectoryServiceAdministratorPassword = &v
	return s
}

// SetNASInstanceIdentifier sets the NASInstanceIdentifier field's value.
func (s *DeleteNASInstanceInput) SetNASInstanceIdentifier(v string) *DeleteNASInstanceInput {
	s.NASInstanceIdentifier = &v
	return s
}

type DeleteNASInstanceOutput struct {
	_ struct{} `type:"structure"`

	NASInstance *NASInstance `type:"structure"`
}

// String returns the string representation
func (s DeleteNASInstanceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNASInstanceOutput) GoString() string {
	return s.String()
}

// SetNASInstance sets the NASInstance field's value.
func (s *DeleteNASInstanceOutput) SetNASInstance(v *NASInstance) *DeleteNASInstanceOutput {
	s.NASInstance = v
	return s
}

type DeleteNASSecurityGroupInput struct {
	_ struct{} `type:"structure"`

	NASSecurityGroupName *string `locationName:"NASSecurityGroupName" type:"string"`
}

// String returns the string representation
func (s DeleteNASSecurityGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNASSecurityGroupInput) GoString() string {
	return s.String()
}

// SetNASSecurityGroupName sets the NASSecurityGroupName field's value.
func (s *DeleteNASSecurityGroupInput) SetNASSecurityGroupName(v string) *DeleteNASSecurityGroupInput {
	s.NASSecurityGroupName = &v
	return s
}

type DeleteNASSecurityGroupOutput struct {
	_ struct{} `type:"structure"`
}

// String returns the string representation
func (s DeleteNASSecurityGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DeleteNASSecurityGroupOutput) GoString() string {
	return s.String()
}

type DescribeNASInstancesInput struct {
	_ struct{} `type:"structure"`

	NASInstanceIdentifier *string `locationName:"NASInstanceIdentifier" type:"string"`
}

// String returns the string representation
func (s DescribeNASInstancesInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNASInstancesInput) GoString() string {
	return s.String()
}

// SetNASInstanceIdentifier sets the NASInstanceIdentifier field's value.
func (s *DescribeNASInstancesInput) SetNASInstanceIdentifier(v string) *DescribeNASInstancesInput {
	s.NASInstanceIdentifier = &v
	return s
}

type DescribeNASInstancesOutput struct {
	_ struct{} `type:"structure"`

	NASInstances []*NASInstance `locationNameList:"NASInstance" type:"list"`
}

// String returns the string representation
func (s DescribeNASInstancesOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNASInstancesOutput) GoString() string {
	return s.String()
}

// SetNASInstances sets the NASInstances field's value.
func (s *DescribeNASInstancesOutput) SetNASInstances(v []*NASInstance) *DescribeNASInstancesOutput {
	s.NASInstances = v
	return s
}

type DescribeNASSecurityGroupsInput struct {
	_ struct{} `type:"structure"`

	NASSecurityGroupName *string `locationName:"NASSecurityGroupName" type:"string"`
}

// String returns the string representation
func (s DescribeNASSecurityGroupsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNASSecurityGroupsInput) GoString() string {
	return s.String()
}

// SetNASSecurityGroupName sets the NASSecurityGroupName field's value.
func (s *DescribeNASSecurityGroupsInput) SetNASSecurityGroupName(v string) *DescribeNASSecurityGroupsInput {
	s.NASSecurityGroupName = &v
	return s
}

type DescribeNASSecurityGroupsOutput struct {
	_ struct{} `type:"structure"`

	NASSecurityGroups []*NASSecurityGroup `locationNameList:"NASSecurityGroup" type:"list"`
}

// String returns the string representation
func (s DescribeNASSecurityGroupsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DescribeNASSecurityGroupsOutput) GoString() string {
	return s.String()
}

// SetNASSecurityGroups sets the NASSecurityGroups field's value.
func (s *DescribeNASSecurityGroupsOutput) SetNASSecurityGroups(v []*NASSecurityGroup) *DescribeNASSecurityGroupsOutput {
	s.NASSecurityGroups = v
	return s
}

type DomainController struct {
	_ struct{} `type:"structure"`

	Hostname *string `type:"string"`

	IPAddress *string `type:"string"`
}

// String returns the string representation
func (s DomainController) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s DomainController) GoString() string {
	return s.String()
}

// SetHostname sets the Hostname field's value.
func (s *DomainController) SetHostname(v string) *DomainController {
	s.Hostname = &v
	return s
}

// SetIPAddress sets the IPAddress field's value.
func (s *DomainController) SetIPAddress(v string) *DomainController {
	s.IPAddress = &v
	return s
}

type Endpoint struct {
	_ struct{} `type:"structure"`

	Address *string `type:"string"`

	PrivateAddress *string `type:"string"`
}

// String returns the string representation
func (s Endpoint) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Endpoint) GoString() string {
	return s.String()
}

// SetAddress sets the Address field's value.
func (s *Endpoint) SetAddress(v string) *Endpoint {
	s.Address = &v
	return s
}

// SetPrivateAddress sets the PrivateAddress field's value.
func (s *Endpoint) SetPrivateAddress(v string) *Endpoint {
	s.PrivateAddress = &v
	return s
}

type GetMetricStatisticsInput struct {
	_ struct{} `type:"structure"`

	Dimensions []*RequestDimensionsStruct `locationName:"Dimensions" locationNameList:"member" type:"list"`

	EndTime *time.Time `locationName:"EndTime" type:"timestamp" timestampFormat:"iso8601"`

	MetricName *string `locationName:"MetricName" type:"string"`

	StartTime *time.Time `locationName:"StartTime" type:"timestamp" timestampFormat:"iso8601"`
}

// String returns the string representation
func (s GetMetricStatisticsInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetMetricStatisticsInput) GoString() string {
	return s.String()
}

// SetDimensions sets the Dimensions field's value.
func (s *GetMetricStatisticsInput) SetDimensions(v []*RequestDimensionsStruct) *GetMetricStatisticsInput {
	s.Dimensions = v
	return s
}

// SetEndTime sets the EndTime field's value.
func (s *GetMetricStatisticsInput) SetEndTime(v time.Time) *GetMetricStatisticsInput {
	s.EndTime = &v
	return s
}

// SetMetricName sets the MetricName field's value.
func (s *GetMetricStatisticsInput) SetMetricName(v string) *GetMetricStatisticsInput {
	s.MetricName = &v
	return s
}

// SetStartTime sets the StartTime field's value.
func (s *GetMetricStatisticsInput) SetStartTime(v time.Time) *GetMetricStatisticsInput {
	s.StartTime = &v
	return s
}

type GetMetricStatisticsOutput struct {
	_ struct{} `type:"structure"`

	Datapoints []*Member `locationNameList:"member" type:"list"`

	Label *string `type:"string"`
}

// String returns the string representation
func (s GetMetricStatisticsOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s GetMetricStatisticsOutput) GoString() string {
	return s.String()
}

// SetDatapoints sets the Datapoints field's value.
func (s *GetMetricStatisticsOutput) SetDatapoints(v []*Member) *GetMetricStatisticsOutput {
	s.Datapoints = v
	return s
}

// SetLabel sets the Label field's value.
func (s *GetMetricStatisticsOutput) SetLabel(v string) *GetMetricStatisticsOutput {
	s.Label = &v
	return s
}

type IPRange struct {
	_ struct{} `type:"structure"`

	CIDRIP *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s IPRange) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s IPRange) GoString() string {
	return s.String()
}

// SetCIDRIP sets the CIDRIP field's value.
func (s *IPRange) SetCIDRIP(v string) *IPRange {
	s.CIDRIP = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *IPRange) SetStatus(v string) *IPRange {
	s.Status = &v
	return s
}

type Member struct {
	_ struct{} `type:"structure"`

	SampleCount *string `type:"string"`

	Sum *string `type:"string"`

	TargetName *string `type:"string"`

	Timestamp *string `type:"string"`
}

// String returns the string representation
func (s Member) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Member) GoString() string {
	return s.String()
}

// SetSampleCount sets the SampleCount field's value.
func (s *Member) SetSampleCount(v string) *Member {
	s.SampleCount = &v
	return s
}

// SetSum sets the Sum field's value.
func (s *Member) SetSum(v string) *Member {
	s.Sum = &v
	return s
}

// SetTargetName sets the TargetName field's value.
func (s *Member) SetTargetName(v string) *Member {
	s.TargetName = &v
	return s
}

// SetTimestamp sets the Timestamp field's value.
func (s *Member) SetTimestamp(v string) *Member {
	s.Timestamp = &v
	return s
}

type ModifyNASInstanceInput struct {
	_ struct{} `type:"structure"`

	AllocatedStorage *int64 `locationName:"AllocatedStorage" type:"integer"`

	AuthenticationType *int64 `locationName:"AuthenticationType" type:"integer"`

	DirectoryServiceAdministratorName *string `locationName:"DirectoryServiceAdministratorName" type:"string"`

	DirectoryServiceAdministratorPassword *string `locationName:"DirectoryServiceAdministratorPassword" type:"string"`

	DirectoryServiceDomainName *string `locationName:"DirectoryServiceDomainName" type:"string"`

	DomainControllers []*RequestDomainControllersStruct `locationName:"DomainControllers" locationNameList:"member" type:"list"`

	MasterPrivateAddress *string `locationName:"MasterPrivateAddress" type:"string"`

	MasterUserPassword *string `locationName:"MasterUserPassword" type:"string"`

	NASInstanceDescription *string `locationName:"NASInstanceDescription" type:"string"`

	NASInstanceIdentifier *string `locationName:"NASInstanceIdentifier" type:"string"`

	NASSecurityGroups []*string `locationName:"NASSecurityGroups" locationNameList:"member" type:"list"`

	NetworkId *string `locationName:"NetworkId" type:"string"`

	NewNASInstanceIdentifier *string `locationName:"NewNASInstanceIdentifier" type:"string"`
}

// String returns the string representation
func (s ModifyNASInstanceInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyNASInstanceInput) GoString() string {
	return s.String()
}

// SetAllocatedStorage sets the AllocatedStorage field's value.
func (s *ModifyNASInstanceInput) SetAllocatedStorage(v int64) *ModifyNASInstanceInput {
	s.AllocatedStorage = &v
	return s
}

// SetAuthenticationType sets the AuthenticationType field's value.
func (s *ModifyNASInstanceInput) SetAuthenticationType(v int64) *ModifyNASInstanceInput {
	s.AuthenticationType = &v
	return s
}

// SetDirectoryServiceAdministratorName sets the DirectoryServiceAdministratorName field's value.
func (s *ModifyNASInstanceInput) SetDirectoryServiceAdministratorName(v string) *ModifyNASInstanceInput {
	s.DirectoryServiceAdministratorName = &v
	return s
}

// SetDirectoryServiceAdministratorPassword sets the DirectoryServiceAdministratorPassword field's value.
func (s *ModifyNASInstanceInput) SetDirectoryServiceAdministratorPassword(v string) *ModifyNASInstanceInput {
	s.DirectoryServiceAdministratorPassword = &v
	return s
}

// SetDirectoryServiceDomainName sets the DirectoryServiceDomainName field's value.
func (s *ModifyNASInstanceInput) SetDirectoryServiceDomainName(v string) *ModifyNASInstanceInput {
	s.DirectoryServiceDomainName = &v
	return s
}

// SetDomainControllers sets the DomainControllers field's value.
func (s *ModifyNASInstanceInput) SetDomainControllers(v []*RequestDomainControllersStruct) *ModifyNASInstanceInput {
	s.DomainControllers = v
	return s
}

// SetMasterPrivateAddress sets the MasterPrivateAddress field's value.
func (s *ModifyNASInstanceInput) SetMasterPrivateAddress(v string) *ModifyNASInstanceInput {
	s.MasterPrivateAddress = &v
	return s
}

// SetMasterUserPassword sets the MasterUserPassword field's value.
func (s *ModifyNASInstanceInput) SetMasterUserPassword(v string) *ModifyNASInstanceInput {
	s.MasterUserPassword = &v
	return s
}

// SetNASInstanceDescription sets the NASInstanceDescription field's value.
func (s *ModifyNASInstanceInput) SetNASInstanceDescription(v string) *ModifyNASInstanceInput {
	s.NASInstanceDescription = &v
	return s
}

// SetNASInstanceIdentifier sets the NASInstanceIdentifier field's value.
func (s *ModifyNASInstanceInput) SetNASInstanceIdentifier(v string) *ModifyNASInstanceInput {
	s.NASInstanceIdentifier = &v
	return s
}

// SetNASSecurityGroups sets the NASSecurityGroups field's value.
func (s *ModifyNASInstanceInput) SetNASSecurityGroups(v []*string) *ModifyNASInstanceInput {
	s.NASSecurityGroups = v
	return s
}

// SetNetworkId sets the NetworkId field's value.
func (s *ModifyNASInstanceInput) SetNetworkId(v string) *ModifyNASInstanceInput {
	s.NetworkId = &v
	return s
}

// SetNewNASInstanceIdentifier sets the NewNASInstanceIdentifier field's value.
func (s *ModifyNASInstanceInput) SetNewNASInstanceIdentifier(v string) *ModifyNASInstanceInput {
	s.NewNASInstanceIdentifier = &v
	return s
}

type ModifyNASInstanceOutput struct {
	_ struct{} `type:"structure"`

	NASInstance *NASInstance `type:"structure"`
}

// String returns the string representation
func (s ModifyNASInstanceOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyNASInstanceOutput) GoString() string {
	return s.String()
}

// SetNASInstance sets the NASInstance field's value.
func (s *ModifyNASInstanceOutput) SetNASInstance(v *NASInstance) *ModifyNASInstanceOutput {
	s.NASInstance = v
	return s
}

type ModifyNASSecurityGroupInput struct {
	_ struct{} `type:"structure"`

	NASSecurityGroupDescription *string `locationName:"NASSecurityGroupDescription" type:"string"`

	NASSecurityGroupName *string `locationName:"NASSecurityGroupName" type:"string"`

	NewNASSecurityGroupName *string `locationName:"NewNASSecurityGroupName" type:"string"`
}

// String returns the string representation
func (s ModifyNASSecurityGroupInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyNASSecurityGroupInput) GoString() string {
	return s.String()
}

// SetNASSecurityGroupDescription sets the NASSecurityGroupDescription field's value.
func (s *ModifyNASSecurityGroupInput) SetNASSecurityGroupDescription(v string) *ModifyNASSecurityGroupInput {
	s.NASSecurityGroupDescription = &v
	return s
}

// SetNASSecurityGroupName sets the NASSecurityGroupName field's value.
func (s *ModifyNASSecurityGroupInput) SetNASSecurityGroupName(v string) *ModifyNASSecurityGroupInput {
	s.NASSecurityGroupName = &v
	return s
}

// SetNewNASSecurityGroupName sets the NewNASSecurityGroupName field's value.
func (s *ModifyNASSecurityGroupInput) SetNewNASSecurityGroupName(v string) *ModifyNASSecurityGroupInput {
	s.NewNASSecurityGroupName = &v
	return s
}

type ModifyNASSecurityGroupOutput struct {
	_ struct{} `type:"structure"`

	NASSecurityGroup *NASSecurityGroup `type:"structure"`
}

// String returns the string representation
func (s ModifyNASSecurityGroupOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ModifyNASSecurityGroupOutput) GoString() string {
	return s.String()
}

// SetNASSecurityGroup sets the NASSecurityGroup field's value.
func (s *ModifyNASSecurityGroupOutput) SetNASSecurityGroup(v *NASSecurityGroup) *ModifyNASSecurityGroupOutput {
	s.NASSecurityGroup = v
	return s
}

type NASInstance struct {
	_ struct{} `type:"structure"`

	AllocatedStorage *string `type:"string"`

	AuthenticationType *int64 `type:"integer"`

	AvailabilityZone *string `type:"string"`

	CreateTime *string `type:"string"`

	DirectoryServiceDomainName *string `type:"string"`

	DomainControllers []*DomainController `locationNameList:"DomainController" type:"list"`

	Endpoint *Endpoint `type:"structure"`

	MasterUsername *string `type:"string"`

	NASInstanceClass *string `type:"string"`

	NASInstanceDescription *string `type:"string"`

	NASInstanceErrorInfo *NASInstanceErrorInfo `type:"structure"`

	NASInstanceIdentifier *string `type:"string"`

	NASInstanceStatus *string `type:"string"`

	NASInstanceType *int64 `type:"integer"`

	NASSecurityGroups []*NASSecurityGroup `locationNameList:"NASSecurityGroup" type:"list"`

	NetworkId *string `type:"string"`

	NoRootSquash *string `type:"string"`

	Protocol *string `type:"string"`

	StorageType *int64 `type:"integer"`
}

// String returns the string representation
func (s NASInstance) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s NASInstance) GoString() string {
	return s.String()
}

// SetAllocatedStorage sets the AllocatedStorage field's value.
func (s *NASInstance) SetAllocatedStorage(v string) *NASInstance {
	s.AllocatedStorage = &v
	return s
}

// SetAuthenticationType sets the AuthenticationType field's value.
func (s *NASInstance) SetAuthenticationType(v int64) *NASInstance {
	s.AuthenticationType = &v
	return s
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *NASInstance) SetAvailabilityZone(v string) *NASInstance {
	s.AvailabilityZone = &v
	return s
}

// SetCreateTime sets the CreateTime field's value.
func (s *NASInstance) SetCreateTime(v string) *NASInstance {
	s.CreateTime = &v
	return s
}

// SetDirectoryServiceDomainName sets the DirectoryServiceDomainName field's value.
func (s *NASInstance) SetDirectoryServiceDomainName(v string) *NASInstance {
	s.DirectoryServiceDomainName = &v
	return s
}

// SetDomainControllers sets the DomainControllers field's value.
func (s *NASInstance) SetDomainControllers(v []*DomainController) *NASInstance {
	s.DomainControllers = v
	return s
}

// SetEndpoint sets the Endpoint field's value.
func (s *NASInstance) SetEndpoint(v *Endpoint) *NASInstance {
	s.Endpoint = v
	return s
}

// SetMasterUsername sets the MasterUsername field's value.
func (s *NASInstance) SetMasterUsername(v string) *NASInstance {
	s.MasterUsername = &v
	return s
}

// SetNASInstanceClass sets the NASInstanceClass field's value.
func (s *NASInstance) SetNASInstanceClass(v string) *NASInstance {
	s.NASInstanceClass = &v
	return s
}

// SetNASInstanceDescription sets the NASInstanceDescription field's value.
func (s *NASInstance) SetNASInstanceDescription(v string) *NASInstance {
	s.NASInstanceDescription = &v
	return s
}

// SetNASInstanceErrorInfo sets the NASInstanceErrorInfo field's value.
func (s *NASInstance) SetNASInstanceErrorInfo(v *NASInstanceErrorInfo) *NASInstance {
	s.NASInstanceErrorInfo = v
	return s
}

// SetNASInstanceIdentifier sets the NASInstanceIdentifier field's value.
func (s *NASInstance) SetNASInstanceIdentifier(v string) *NASInstance {
	s.NASInstanceIdentifier = &v
	return s
}

// SetNASInstanceStatus sets the NASInstanceStatus field's value.
func (s *NASInstance) SetNASInstanceStatus(v string) *NASInstance {
	s.NASInstanceStatus = &v
	return s
}

// SetNASInstanceType sets the NASInstanceType field's value.
func (s *NASInstance) SetNASInstanceType(v int64) *NASInstance {
	s.NASInstanceType = &v
	return s
}

// SetNASSecurityGroups sets the NASSecurityGroups field's value.
func (s *NASInstance) SetNASSecurityGroups(v []*NASSecurityGroup) *NASInstance {
	s.NASSecurityGroups = v
	return s
}

// SetNetworkId sets the NetworkId field's value.
func (s *NASInstance) SetNetworkId(v string) *NASInstance {
	s.NetworkId = &v
	return s
}

// SetNoRootSquash sets the NoRootSquash field's value.
func (s *NASInstance) SetNoRootSquash(v string) *NASInstance {
	s.NoRootSquash = &v
	return s
}

// SetProtocol sets the Protocol field's value.
func (s *NASInstance) SetProtocol(v string) *NASInstance {
	s.Protocol = &v
	return s
}

// SetStorageType sets the StorageType field's value.
func (s *NASInstance) SetStorageType(v int64) *NASInstance {
	s.StorageType = &v
	return s
}

type NASInstanceErrorInfo struct {
	_ struct{} `type:"structure"`

	NASInstanceErrorCode *string `type:"string"`

	NASInstanceErrorMessage *string `type:"string"`
}

// String returns the string representation
func (s NASInstanceErrorInfo) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s NASInstanceErrorInfo) GoString() string {
	return s.String()
}

// SetNASInstanceErrorCode sets the NASInstanceErrorCode field's value.
func (s *NASInstanceErrorInfo) SetNASInstanceErrorCode(v string) *NASInstanceErrorInfo {
	s.NASInstanceErrorCode = &v
	return s
}

// SetNASInstanceErrorMessage sets the NASInstanceErrorMessage field's value.
func (s *NASInstanceErrorInfo) SetNASInstanceErrorMessage(v string) *NASInstanceErrorInfo {
	s.NASInstanceErrorMessage = &v
	return s
}

type NASSecurityGroup struct {
	_ struct{} `type:"structure"`

	AvailabilityZone *string `type:"string"`

	IPRanges []*IPRange `locationNameList:"IPRange" type:"list"`

	NASSecurityGroupDescription *string `type:"string"`

	NASSecurityGroupName *string `type:"string"`

	OwnerId *string `type:"string"`

	SecurityGroups []*SecurityGroup `locationNameList:"SecurityGroup" type:"list"`
}

// String returns the string representation
func (s NASSecurityGroup) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s NASSecurityGroup) GoString() string {
	return s.String()
}

// SetAvailabilityZone sets the AvailabilityZone field's value.
func (s *NASSecurityGroup) SetAvailabilityZone(v string) *NASSecurityGroup {
	s.AvailabilityZone = &v
	return s
}

// SetIPRanges sets the IPRanges field's value.
func (s *NASSecurityGroup) SetIPRanges(v []*IPRange) *NASSecurityGroup {
	s.IPRanges = v
	return s
}

// SetNASSecurityGroupDescription sets the NASSecurityGroupDescription field's value.
func (s *NASSecurityGroup) SetNASSecurityGroupDescription(v string) *NASSecurityGroup {
	s.NASSecurityGroupDescription = &v
	return s
}

// SetNASSecurityGroupName sets the NASSecurityGroupName field's value.
func (s *NASSecurityGroup) SetNASSecurityGroupName(v string) *NASSecurityGroup {
	s.NASSecurityGroupName = &v
	return s
}

// SetOwnerId sets the OwnerId field's value.
func (s *NASSecurityGroup) SetOwnerId(v string) *NASSecurityGroup {
	s.OwnerId = &v
	return s
}

// SetSecurityGroups sets the SecurityGroups field's value.
func (s *NASSecurityGroup) SetSecurityGroups(v []*SecurityGroup) *NASSecurityGroup {
	s.SecurityGroups = v
	return s
}

type RequestDimensionsStruct struct {
	_ struct{} `type:"structure"`

	Name *string `locationName:"Name" type:"string"`

	Value *string `locationName:"Value" type:"string"`
}

// String returns the string representation
func (s RequestDimensionsStruct) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RequestDimensionsStruct) GoString() string {
	return s.String()
}

// SetName sets the Name field's value.
func (s *RequestDimensionsStruct) SetName(v string) *RequestDimensionsStruct {
	s.Name = &v
	return s
}

// SetValue sets the Value field's value.
func (s *RequestDimensionsStruct) SetValue(v string) *RequestDimensionsStruct {
	s.Value = &v
	return s
}

type RequestDomainControllersStruct struct {
	_ struct{} `type:"structure"`

	Hostname *string `locationName:"Hostname" type:"string"`

	IPAddress *string `locationName:"IPAddress" type:"string"`
}

// String returns the string representation
func (s RequestDomainControllersStruct) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RequestDomainControllersStruct) GoString() string {
	return s.String()
}

// SetHostname sets the Hostname field's value.
func (s *RequestDomainControllersStruct) SetHostname(v string) *RequestDomainControllersStruct {
	s.Hostname = &v
	return s
}

// SetIPAddress sets the IPAddress field's value.
func (s *RequestDomainControllersStruct) SetIPAddress(v string) *RequestDomainControllersStruct {
	s.IPAddress = &v
	return s
}

type RevokeNASSecurityGroupIngressInput struct {
	_ struct{} `type:"structure"`

	CIDRIP *string `locationName:"CIDRIP" type:"string"`

	NASSecurityGroupName *string `locationName:"NASSecurityGroupName" type:"string"`

	SecurityGroupName *string `locationName:"SecurityGroupName" type:"string"`
}

// String returns the string representation
func (s RevokeNASSecurityGroupIngressInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokeNASSecurityGroupIngressInput) GoString() string {
	return s.String()
}

// SetCIDRIP sets the CIDRIP field's value.
func (s *RevokeNASSecurityGroupIngressInput) SetCIDRIP(v string) *RevokeNASSecurityGroupIngressInput {
	s.CIDRIP = &v
	return s
}

// SetNASSecurityGroupName sets the NASSecurityGroupName field's value.
func (s *RevokeNASSecurityGroupIngressInput) SetNASSecurityGroupName(v string) *RevokeNASSecurityGroupIngressInput {
	s.NASSecurityGroupName = &v
	return s
}

// SetSecurityGroupName sets the SecurityGroupName field's value.
func (s *RevokeNASSecurityGroupIngressInput) SetSecurityGroupName(v string) *RevokeNASSecurityGroupIngressInput {
	s.SecurityGroupName = &v
	return s
}

type RevokeNASSecurityGroupIngressOutput struct {
	_ struct{} `type:"structure"`

	NASSecurityGroup *NASSecurityGroup `type:"structure"`
}

// String returns the string representation
func (s RevokeNASSecurityGroupIngressOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s RevokeNASSecurityGroupIngressOutput) GoString() string {
	return s.String()
}

// SetNASSecurityGroup sets the NASSecurityGroup field's value.
func (s *RevokeNASSecurityGroupIngressOutput) SetNASSecurityGroup(v *NASSecurityGroup) *RevokeNASSecurityGroupIngressOutput {
	s.NASSecurityGroup = v
	return s
}

type SecurityGroup struct {
	_ struct{} `type:"structure"`

	SecurityGroupName *string `type:"string"`

	SecurityGroupOwnerId *string `type:"string"`

	Status *string `type:"string"`
}

// String returns the string representation
func (s SecurityGroup) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s SecurityGroup) GoString() string {
	return s.String()
}

// SetSecurityGroupName sets the SecurityGroupName field's value.
func (s *SecurityGroup) SetSecurityGroupName(v string) *SecurityGroup {
	s.SecurityGroupName = &v
	return s
}

// SetSecurityGroupOwnerId sets the SecurityGroupOwnerId field's value.
func (s *SecurityGroup) SetSecurityGroupOwnerId(v string) *SecurityGroup {
	s.SecurityGroupOwnerId = &v
	return s
}

// SetStatus sets the Status field's value.
func (s *SecurityGroup) SetStatus(v string) *SecurityGroup {
	s.Status = &v
	return s
}
