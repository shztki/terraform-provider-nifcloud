// Code generated by private/model/cli/gen-api/main.go. DO NOT EDIT.

package script

import (
	"github.com/shztki/nifcloud-sdk-go/nifcloud"
	"github.com/shztki/nifcloud-sdk-go/nifcloud/awsutil"
	"github.com/shztki/nifcloud-sdk-go/nifcloud/request"
)

const opExecuteScript = "ExecuteScript"

// ExecuteScriptRequest generates a "nifcloud/request.Request" representing the
// client's request for the ExecuteScript operation. The "output" return
// value will be populated with the request's response once the request completes
// successfuly.
//
// Use "Send" method on the returned Request to send the API call to the service.
// the "output" return value is not valid until after Send returns without error.
//
// See ExecuteScript for more information on using the ExecuteScript
// API call, and error handling.
//
// This method is useful when you want to inject custom logic or configuration
// into the SDK's request lifecycle. Such as custom headers, or retry logic.
//
//
//    // Example sending a request using the ExecuteScriptRequest method.
//    req, resp := client.ExecuteScriptRequest(params)
//
//    err := req.Send()
//    if err == nil { // resp is now filled
//        fmt.Println(resp)
//    }
//
// See also, https://docs.aws.amazon.com/goto/WebAPI/script-2015-09-01/ExecuteScript
func (c *Script) ExecuteScriptRequest(input *ExecuteScriptInput) (req *request.Request, output *ExecuteScriptOutput) {
	op := &request.Operation{
		Name:       opExecuteScript,
		HTTPMethod: "POST",
		HTTPPath:   "/2015-09-01/",
	}

	if input == nil {
		input = &ExecuteScriptInput{}
	}

	output = &ExecuteScriptOutput{}
	req = c.newRequest(op, input, output)
	return
}

// ExecuteScript API operation for NIFCLOUD Script.
//
// Returns awserr.Error for service API and SDK errors. Use runtime type assertions
// with awserr.Error's Code and Message methods to get detailed information about
// the error.
//
// See the AWS API reference guide for NIFCLOUD Script's
// API operation ExecuteScript for usage and error information.
// See also, https://docs.aws.amazon.com/goto/WebAPI/script-2015-09-01/ExecuteScript
func (c *Script) ExecuteScript(input *ExecuteScriptInput) (*ExecuteScriptOutput, error) {
	req, out := c.ExecuteScriptRequest(input)
	return out, req.Send()
}

// ExecuteScriptWithContext is the same as ExecuteScript with the addition of
// the ability to pass a context and additional request options.
//
// See ExecuteScript for details on how to use this API operation.
//
// The context must be non-nil and will be used for request cancellation. If
// the context is nil a panic will occur. In the future the SDK may create
// sub-contexts for http.Requests. See https://golang.org/pkg/context/
// for more information on using Contexts.
func (c *Script) ExecuteScriptWithContext(ctx nifcloud.Context, input *ExecuteScriptInput, opts ...request.Option) (*ExecuteScriptOutput, error) {
	req, out := c.ExecuteScriptRequest(input)
	req.SetContext(ctx)
	req.ApplyOptions(opts...)
	return out, req.Send()
}

type ExecuteScriptInput struct {
	_ struct{} `type:"structure"`

	Body *string `locationName:"Body" type:"string"`

	Header *string `locationName:"Header" type:"string"`

	Method *string `locationName:"Method" type:"string"`

	Query *string `locationName:"Query" type:"string"`

	ScriptIdentifier *string `locationName:"ScriptIdentifier" type:"string"`
}

// String returns the string representation
func (s ExecuteScriptInput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ExecuteScriptInput) GoString() string {
	return s.String()
}

// SetBody sets the Body field's value.
func (s *ExecuteScriptInput) SetBody(v string) *ExecuteScriptInput {
	s.Body = &v
	return s
}

// SetHeader sets the Header field's value.
func (s *ExecuteScriptInput) SetHeader(v string) *ExecuteScriptInput {
	s.Header = &v
	return s
}

// SetMethod sets the Method field's value.
func (s *ExecuteScriptInput) SetMethod(v string) *ExecuteScriptInput {
	s.Method = &v
	return s
}

// SetQuery sets the Query field's value.
func (s *ExecuteScriptInput) SetQuery(v string) *ExecuteScriptInput {
	s.Query = &v
	return s
}

// SetScriptIdentifier sets the ScriptIdentifier field's value.
func (s *ExecuteScriptInput) SetScriptIdentifier(v string) *ExecuteScriptInput {
	s.ScriptIdentifier = &v
	return s
}

type ExecuteScriptOutput struct {
	_ struct{} `type:"structure"`

	Result *Result `type:"structure"`
}

// String returns the string representation
func (s ExecuteScriptOutput) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s ExecuteScriptOutput) GoString() string {
	return s.String()
}

// SetResult sets the Result field's value.
func (s *ExecuteScriptOutput) SetResult(v *Result) *ExecuteScriptOutput {
	s.Result = v
	return s
}

type Result struct {
	_ struct{} `type:"structure"`

	RequestBody *string `type:"string"`

	RequestHeader *string `type:"string"`

	RequestQuery *string `type:"string"`

	ResponseData *string `type:"string"`

	ResponseHeader *string `type:"string"`

	ResponseStatus *int64 `type:"integer"`

	ScriptIdentifier *string `type:"string"`
}

// String returns the string representation
func (s Result) String() string {
	return awsutil.Prettify(s)
}

// GoString returns the string representation
func (s Result) GoString() string {
	return s.String()
}

// SetRequestBody sets the RequestBody field's value.
func (s *Result) SetRequestBody(v string) *Result {
	s.RequestBody = &v
	return s
}

// SetRequestHeader sets the RequestHeader field's value.
func (s *Result) SetRequestHeader(v string) *Result {
	s.RequestHeader = &v
	return s
}

// SetRequestQuery sets the RequestQuery field's value.
func (s *Result) SetRequestQuery(v string) *Result {
	s.RequestQuery = &v
	return s
}

// SetResponseData sets the ResponseData field's value.
func (s *Result) SetResponseData(v string) *Result {
	s.ResponseData = &v
	return s
}

// SetResponseHeader sets the ResponseHeader field's value.
func (s *Result) SetResponseHeader(v string) *Result {
	s.ResponseHeader = &v
	return s
}

// SetResponseStatus sets the ResponseStatus field's value.
func (s *Result) SetResponseStatus(v int64) *Result {
	s.ResponseStatus = &v
	return s
}

// SetScriptIdentifier sets the ScriptIdentifier field's value.
func (s *Result) SetScriptIdentifier(v string) *Result {
	s.ScriptIdentifier = &v
	return s
}
